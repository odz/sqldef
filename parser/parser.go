// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const MAX = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const POSIX_REGEX = 57431
const POSIX_REGEX_CI = 57432
const POSIX_NOT_REGEX = 57433
const POSIX_NOT_REGEX_CI = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const INTERVAL = 57443
const JSON_EXTRACT_OP = 57444
const JSON_UNQUOTE_EXTRACT_OP = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const SCHEMA = 57452
const TABLE = 57453
const INDEX = 57454
const MATERIALIZED = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const PRIMARY = 57460
const COLUMN = 57461
const CONSTRAINT = 57462
const REFERENCES = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const FOREIGN = 57466
const KEY_BLOCK_SIZE = 57467
const POLICY = 57468
const WHILE = 57469
const UNIQUE = 57470
const KEY = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const MAXVALUE = 57480
const PARTITION = 57481
const REORGANIZE = 57482
const LESS = 57483
const THAN = 57484
const PROCEDURE = 57485
const TRIGGER = 57486
const TYPE = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const RESTRICT = 57492
const CASCADE = 57493
const NO = 57494
const ACTION = 57495
const PERMISSIVE = 57496
const RESTRICTIVE = 57497
const PUBLIC = 57498
const CURRENT_USER = 57499
const SESSION_USER = 57500
const PAD_INDEX = 57501
const FILLFACTOR = 57502
const IGNORE_DUP_KEY = 57503
const STATISTICS_NORECOMPUTE = 57504
const STATISTICS_INCREMENTAL = 57505
const ALLOW_ROW_LOCKS = 57506
const ALLOW_PAGE_LOCKS = 57507
const BEFORE = 57508
const AFTER = 57509
const EACH = 57510
const ROW = 57511
const SCROLL = 57512
const CURSOR = 57513
const OPEN = 57514
const CLOSE = 57515
const FETCH = 57516
const PRIOR = 57517
const FIRST = 57518
const LAST = 57519
const DEALLOCATE = 57520
const DEFERRABLE = 57521
const INITIALLY = 57522
const IMMEDIATE = 57523
const DEFERRED = 57524
const CONCURRENTLY = 57525
const BEGIN = 57526
const START = 57527
const TRANSACTION = 57528
const COMMIT = 57529
const ROLLBACK = 57530
const BIT = 57531
const TINYINT = 57532
const SMALLINT = 57533
const SMALLSERIAL = 57534
const MEDIUMINT = 57535
const INT = 57536
const INTEGER = 57537
const SERIAL = 57538
const BIGINT = 57539
const BIGSERIAL = 57540
const INTNUM = 57541
const REAL = 57542
const DOUBLE = 57543
const PRECISION = 57544
const FLOAT_TYPE = 57545
const DECIMAL = 57546
const NUMERIC = 57547
const SMALLMONEY = 57548
const MONEY = 57549
const TIME = 57550
const TIMESTAMP = 57551
const DATETIME = 57552
const YEAR = 57553
const DATETIMEOFFSET = 57554
const DATETIME2 = 57555
const SMALLDATETIME = 57556
const CHAR = 57557
const VARCHAR = 57558
const VARYING = 57559
const BOOL = 57560
const CHARACTER = 57561
const VARBINARY = 57562
const NCHAR = 57563
const NVARCHAR = 57564
const NTEXT = 57565
const UUID = 57566
const TEXT = 57567
const TINYTEXT = 57568
const MEDIUMTEXT = 57569
const LONGTEXT = 57570
const CITEXT = 57571
const BLOB = 57572
const TINYBLOB = 57573
const MEDIUMBLOB = 57574
const LONGBLOB = 57575
const JSON = 57576
const JSONB = 57577
const ENUM = 57578
const GEOMETRY = 57579
const POINT = 57580
const LINESTRING = 57581
const POLYGON = 57582
const GEOMETRYCOLLECTION = 57583
const MULTIPOINT = 57584
const MULTILINESTRING = 57585
const MULTIPOLYGON = 57586
const VARIADIC = 57587
const ARRAY = 57588
const NOW = 57589
const GETDATE = 57590
const BPCHAR = 57591
const TEXT_PATTERN_OPS = 57592
const NULLX = 57593
const AUTO_INCREMENT = 57594
const APPROXNUM = 57595
const SIGNED = 57596
const UNSIGNED = 57597
const ZEROFILL = 57598
const ZONE = 57599
const AUTOINCREMENT = 57600
const DATABASES = 57601
const TABLES = 57602
const VITESS_KEYSPACES = 57603
const VITESS_SHARDS = 57604
const VITESS_TABLETS = 57605
const VSCHEMA_TABLES = 57606
const EXTENDED = 57607
const FULL = 57608
const PROCESSLIST = 57609
const NAMES = 57610
const CHARSET = 57611
const GLOBAL = 57612
const SESSION = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const NEW = 57623
const CURRENT_TIMESTAMP = 57624
const DATABASE = 57625
const CURRENT_DATE = 57626
const CURRENT_TIME = 57627
const LOCALTIME = 57628
const LOCALTIMESTAMP = 57629
const UTC_DATE = 57630
const UTC_TIME = 57631
const UTC_TIMESTAMP = 57632
const REPLACE = 57633
const CONVERT = 57634
const CAST = 57635
const SUBSTR = 57636
const SUBSTRING = 57637
const GROUP_CONCAT = 57638
const SEPARATOR = 57639
const INHERIT = 57640
const MATCH = 57641
const AGAINST = 57642
const BOOLEAN = 57643
const LANGUAGE = 57644
const WITH = 57645
const WITHOUT = 57646
const PARSER = 57647
const QUERY = 57648
const EXPANSION = 57649
const UNUSED = 57650
const VIRTUAL = 57651
const STORED = 57652
const GENERATED = 57653
const ALWAYS = 57654
const IDENTITY = 57655
const SEQUENCE = 57656
const INCREMENT = 57657
const MINVALUE = 57658
const CACHE = 57659
const CYCLE = 57660
const OWNED = 57661
const NONE = 57662
const CLUSTERED = 57663
const NONCLUSTERED = 57664
const REPLICATION = 57665
const INCLUDE = 57666
const HOLDLOCK = 57667
const NOLOCK = 57668
const NOWAIT = 57669
const PAGLOCK = 57670
const ROWLOCK = 57671
const TABLELOCK = 57672
const TYPECAST = 57673
const CHECK = 57674

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	131, 153,
	-2, 143,
	-1, 36,
	165, 494,
	166, 494,
	-2, 484,
	-1, 278,
	118, 852,
	-2, 848,
	-1, 279,
	118, 853,
	-2, 849,
	-1, 280,
	118, 854,
	-2, 238,
	-1, 321,
	263, 863,
	-2, 746,
	-1, 353,
	85, 1078,
	-2, 82,
	-1, 354,
	85, 1028,
	-2, 83,
	-1, 360,
	85, 1007,
	-2, 819,
	-1, 362,
	85, 1052,
	-2, 821,
	-1, 618,
	263, 863,
	-2, 522,
	-1, 667,
	263, 863,
	-2, 522,
	-1, 696,
	55, 41,
	57, 41,
	-2, 43,
	-1, 728,
	115, 1002,
	246, 1002,
	252, 1002,
	-2, 274,
	-1, 729,
	115, 1003,
	246, 1003,
	252, 1003,
	-2, 275,
	-1, 730,
	246, 1005,
	252, 1005,
	-2, 309,
	-1, 731,
	246, 1006,
	252, 1006,
	-2, 309,
	-1, 732,
	246, 1105,
	252, 1105,
	-2, 316,
	-1, 733,
	246, 1053,
	252, 1053,
	-2, 309,
	-1, 734,
	246, 1058,
	252, 1058,
	-2, 316,
	-1, 735,
	115, 1056,
	246, 1056,
	252, 1056,
	-2, 281,
	-1, 737,
	115, 1104,
	246, 1104,
	252, 1104,
	-2, 316,
	-1, 738,
	246, 1090,
	252, 1090,
	-2, 329,
	-1, 739,
	246, 1096,
	252, 1096,
	-2, 329,
	-1, 740,
	246, 1046,
	252, 1046,
	-2, 329,
	-1, 741,
	246, 1042,
	252, 1042,
	-2, 329,
	-1, 743,
	115, 1001,
	246, 1001,
	252, 1001,
	-2, 290,
	-1, 744,
	115, 1094,
	246, 1094,
	252, 1094,
	-2, 291,
	-1, 745,
	115, 1044,
	246, 1044,
	252, 1044,
	-2, 292,
	-1, 746,
	115, 1041,
	246, 1041,
	252, 1041,
	-2, 293,
	-1, 747,
	115, 1033,
	246, 1033,
	252, 1033,
	-2, 294,
	-1, 749,
	115, 1103,
	246, 1103,
	252, 1103,
	-2, 296,
	-1, 752,
	115, 1014,
	246, 1014,
	252, 1014,
	-2, 266,
	-1, 753,
	115, 1092,
	246, 1092,
	252, 1092,
	-2, 309,
	-1, 754,
	115, 1093,
	246, 1093,
	252, 1093,
	-2, 309,
	-1, 755,
	115, 1015,
	246, 1015,
	252, 1015,
	-2, 309,
	-1, 756,
	115, 1016,
	246, 1016,
	252, 1016,
	-2, 270,
	-1, 757,
	115, 1017,
	246, 1017,
	252, 1017,
	-2, 309,
	-1, 758,
	115, 1083,
	246, 1083,
	252, 1083,
	-2, 272,
	-1, 759,
	115, 1117,
	246, 1117,
	252, 1117,
	-2, 273,
	-1, 760,
	115, 1025,
	246, 1025,
	252, 1025,
	-2, 299,
	-1, 761,
	115, 1062,
	246, 1062,
	252, 1062,
	-2, 300,
	-1, 762,
	115, 1040,
	246, 1040,
	252, 1040,
	-2, 301,
	-1, 763,
	115, 1063,
	246, 1063,
	252, 1063,
	-2, 302,
	-1, 764,
	115, 1026,
	246, 1026,
	252, 1026,
	-2, 303,
	-1, 765,
	115, 1050,
	246, 1050,
	252, 1050,
	-2, 304,
	-1, 766,
	115, 1049,
	246, 1049,
	252, 1049,
	-2, 305,
	-1, 767,
	115, 1051,
	246, 1051,
	252, 1051,
	-2, 306,
	-1, 768,
	115, 1000,
	246, 1000,
	252, 1000,
	-2, 248,
	-1, 769,
	115, 1095,
	246, 1095,
	252, 1095,
	-2, 249,
	-1, 770,
	115, 1084,
	246, 1084,
	252, 1084,
	-2, 250,
	-1, 771,
	115, 1086,
	246, 1086,
	252, 1086,
	-2, 251,
	-1, 772,
	115, 1045,
	246, 1045,
	252, 1045,
	-2, 252,
	-1, 773,
	115, 1030,
	246, 1030,
	252, 1030,
	-2, 253,
	-1, 774,
	115, 1031,
	246, 1031,
	252, 1031,
	-2, 254,
	-1, 775,
	115, 1079,
	246, 1079,
	252, 1079,
	-2, 255,
	-1, 776,
	115, 998,
	246, 998,
	252, 998,
	-2, 256,
	-1, 777,
	115, 999,
	246, 999,
	252, 999,
	-2, 257,
	-1, 778,
	115, 1070,
	246, 1070,
	252, 1070,
	-2, 311,
	-1, 779,
	115, 1019,
	246, 1019,
	252, 1019,
	-2, 311,
	-1, 780,
	115, 1023,
	246, 1023,
	252, 1023,
	-2, 311,
	-1, 781,
	115, 1018,
	246, 1018,
	252, 1018,
	-2, 313,
	-1, 782,
	115, 1057,
	246, 1057,
	252, 1057,
	-2, 313,
	-1, 783,
	115, 1048,
	246, 1048,
	252, 1048,
	-2, 264,
	-1, 784,
	115, 1085,
	246, 1085,
	252, 1085,
	-2, 265,
	-1, 860,
	118, 856,
	-2, 851,
	-1, 1000,
	141, 397,
	-2, 1012,
	-1, 1122,
	263, 863,
	-2, 522,
	-1, 1144,
	5, 28,
	-2, 643,
	-1, 1170,
	5, 27,
	-2, 792,
	-1, 1219,
	59, 370,
	-2, 367,
	-1, 1236,
	118, 854,
	-2, 238,
	-1, 1469,
	5, 27,
	-2, 90,
	-1, 1470,
	5, 27,
	-2, 91,
	-1, 1529,
	5, 28,
	-2, 793,
	-1, 1636,
	5, 27,
	-2, 795,
	-1, 1713,
	58, 102,
	-2, 172,
	-1, 1716,
	58, 102,
	-2, 172,
	-1, 1784,
	188, 54,
	-2, 172,
	-1, 1800,
	58, 102,
	-2, 171,
	-1, 1820,
	5, 28,
	-2, 796,
	-1, 1975,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 20984

var yyAct = [...]int16{
	364, 1691, 1927, 1810, 1067, 719, 1694, 1535, 1651, 1741,
	544, 1785, 1774, 1208, 1764, 789, 621, 3, 295, 257,
	718, 1173, 1600, 948, 53, 1186, 1381, 1562, 274, 1211,
	1928, 986, 1539, 966, 494, 92, 311, 1552, 92, 1601,
	1286, 1382, 836, 283, 622, 1378, 690, 1234, 1137, 1648,
	1412, 1075, 251, 688, 1059, 1076, 995, 603, 949, 1240,
	279, 1010, 92, 92, 256, 531, 989, 1353, 1191, 1127,
	885, 284, 1827, 66, 276, 92, 913, 918, 359, 795,
	1133, 92, 706, 92, 1178, 936, 1005, 1271, 862, 92,
	1031, 550, 692, 1054, 1036, 1717, 252, 253, 254, 255,
	916, 352, 945, 705, 677, 340, 556, 282, 720, 266,
	1253, 1024, 1025, 726, 564, 338, 1799, 912, 339, 721,
	1109, 645, 1349, 1954, 1028, 1419, 349, 21, 543, 355,
	581, 582, 583, 584, 585, 578, 1013, 270, 588, 500,
	287, 52, 1920, 588, 263, 604, 48, 26, 27, 1024,
	1020, 1439, 1008, 1775, 1568, 1425, 1426, 347, 1705, 1009,
	1988, 491, 1540, 1541, 1542, 1543, 1544, 1545, 1576, 28,
	577, 576, 586, 587, 579, 580, 581, 582, 583, 584,
	585, 578, 1732, 261, 588, 495, 496, 577, 576, 586,
	587, 579, 580, 581, 582, 583, 584, 585, 578, 1519,
	543, 588, 343, 579, 580, 581, 582, 583, 584, 585,
	578, 502, 1027, 588, 1232, 1520, 507, 1016, 578, 1011,
	1021, 588, 1845, 1846, 1042, 1892, 1981, 1018, 1017, 1818,
	92, 1746, 1134, 1135, 1966, 1911, 992, 529, 1068, 1863,
	1187, 1130, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 1904, 1745, 588, 1891, 1817, 279,
	279, 586, 587, 579, 580, 581, 582, 583, 584, 585,
	578, 1373, 1711, 588, 1842, 1523, 279, 508, 1430, 553,
	1199, 979, 1710, 1198, 1404, 552, 1200, 1405, 1406, 279,
	279, 279, 279, 279, 279, 279, 577, 576, 586, 587,
	579, 580, 581, 582, 583, 584, 585, 578, 980, 981,
	588, 539, 1245, 279, 1247, 1246, 87, 83, 84, 707,
	85, 708, 279, 827, 1502, 1501, 1500, 1706, 1707, 1709,
	828, 1255, 1030, 1708, 617, 1132, 1043, 940, 92, 1420,
	1625, 1032, 1347, 1346, 1345, 92, 92, 92, 495, 496,
	250, 1014, 524, 1689, 1032, 1055, 1512, 1015, 1510, 1986,
	1962, 1882, 1963, 609, 610, 611, 612, 613, 614, 615,
	300, 572, 589, 575, 1979, 1978, 1925, 589, 1693, 590,
	591, 592, 593, 594, 595, 596, 1780, 573, 574, 571,
	597, 598, 599, 600, 577, 576, 586, 587, 579, 580,
	581, 582, 583, 584, 585, 578, 1667, 1733, 588, 1933,
	1022, 1516, 1023, 1910, 1517, 1912, 355, 1348, 589, 1475,
	1476, 526, 605, 1765, 528, 797, 535, 536, 1980, 1964,
	1565, 1019, 1811, 1325, 358, 589, 492, 1812, 946, 1218,
	499, 1790, 1577, 503, 504, 650, 49, 589, 1633, 797,
	1322, 651, 1570, 525, 527, 589, 1569, 577, 576, 586,
	587, 579, 580, 581, 582, 583, 584, 585, 578, 1428,
	1482, 588, 532, 533, 534, 1226, 537, 703, 1418, 1225,
	1213, 1618, 1941, 541, 796, 343, 1492, 1483, 1959, 86,
	589, 1723, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 697, 1342, 588, 589, 92, 1219,
	92, 1985, 1903, 92, 785, 501, 92, 1043, 1056, 1035,
	92, 1746, 991, 513, 81, 1816, 1007, 1231, 1932, 577,
	576, 586, 587, 579, 580, 581, 582, 583, 584, 585,
	578, 92, 1607, 588, 589, 576, 586, 587, 579, 580,
	581, 582, 583, 584, 585, 578, 1323, 806, 588, 1321,
	92, 1190, 279, 279, 1560, 1560, 1563, 1564, 1566, 279,
	498, 279, 839, 1324, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 798,
	799, 497, 80, 523, 81, 1791, 1792, 1793, 815, 1189,
	1006, 1216, 1188, 636, 358, 358, 358, 358, 863, 358,
	786, 1847, 509, 798, 799, 506, 358, 1007, 229, 279,
	82, 1326, 903, 607, 608, 279, 279, 279, 279, 279,
	279, 279, 279, 1970, 859, 1737, 279, 787, 788, 1532,
	813, 923, 589, 566, 1447, 861, 801, 860, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 915, 841, 967, 969, 279, 279, 279,
	279, 1006, 92, 1334, 279, 92, 92, 92, 92, 92,
	856, 1155, 1121, 834, 710, 620, 919, 92, 1007, 858,
	92, 568, 1151, 519, 92, 988, 987, 1457, 888, 92,
	92, 928, 930, 891, 929, 589, 923, 938, 1851, 651,
	279, 890, 864, 831, 1104, 907, 910, 563, 1757, 869,
	561, 358, 1853, 937, 1756, 1976, 924, 925, 712, 1977,
	1755, 901, 933, 867, 868, 866, 563, 1754, 1150, 934,
	589, 900, 1330, 1753, 942, 950, 968, 904, 805, 1752,
	1751, 1749, 974, 1458, 1472, 1848, 905, 906, 1201, 816,
	817, 818, 819, 820, 821, 822, 823, 941, 355, 943,
	944, 902, 1176, 824, 825, 709, 985, 589, 1974, 1375,
	1669, 952, 953, 937, 955, 1160, 971, 1210, 92, 92,
	963, 512, 589, 951, 543, 92, 954, 92, 1105, 972,
	607, 608, 92, 1210, 976, 92, 1081, 92, 977, 792,
	92, 562, 561, 993, 1666, 343, 343, 343, 343, 343,
	1665, 1033, 1034, 1329, 1038, 562, 561, 1040, 563, 1039,
	343, 50, 1041, 279, 279, 279, 279, 1061, 558, 343,
	1944, 865, 563, 1210, 1050, 1051, 1052, 279, 1053, 1943,
	1111, 577, 576, 586, 587, 579, 580, 581, 582, 583,
	584, 585, 578, 725, 725, 588, 1909, 1588, 279, 279,
	279, 1256, 1302, 1057, 1058, 1905, 1587, 515, 516, 517,
	1256, 358, 1209, 57, 1908, 1849, 1850, 1852, 1854, 1855,
	837, 838, 358, 358, 358, 358, 358, 358, 358, 358,
	859, 1907, 1128, 863, 1830, 1210, 358, 358, 59, 60,
	61, 62, 63, 860, 1826, 279, 852, 854, 855, 1222,
	1149, 1906, 279, 853, 1256, 1261, 843, 1110, 638, 639,
	640, 641, 642, 643, 644, 279, 566, 1262, 279, 358,
	562, 561, 1124, 1125, 1126, 1679, 1596, 1117, 1303, 1299,
	1296, 1061, 1304, 1301, 1300, 1123, 1828, 563, 77, 1750,
	833, 1595, 1170, 1435, 1044, 1045, 1046, 1047, 1278, 1305,
	1221, 1276, 562, 561, 92, 1829, 1298, 1252, 909, 909,
	1632, 542, 1148, 886, 1147, 887, 911, 1057, 1058, 563,
	1593, 358, 50, 1138, 1193, 79, 1195, 619, 1494, 832,
	790, 931, 562, 561, 1272, 1228, 931, 864, 619, 562,
	561, 1118, 1119, 1120, 78, 1140, 1881, 562, 561, 563,
	1767, 1159, 92, 562, 561, 279, 563, 1194, 1747, 1071,
	1377, 1073, 1423, 1227, 563, 1157, 1422, 562, 561, 1183,
	563, 1778, 1993, 1244, 931, 1557, 1965, 543, 1102, 1640,
	1951, 1915, 345, 1421, 563, 1204, 337, 1557, 1916, 1557,
	1899, 1196, 1778, 1898, 92, 1220, 71, 76, 1242, 68,
	1895, 1894, 1861, 358, 1265, 1202, 1267, 1268, 1269, 1270,
	1070, 358, 72, 899, 77, 1887, 543, 89, 492, 1214,
	1215, 1217, 1557, 1884, 1557, 1883, 1640, 1808, 1798, 589,
	73, 74, 69, 1640, 1676, 92, 92, 1640, 543, 1643,
	1642, 1640, 1641, 92, 343, 348, 1557, 1556, 1401, 543,
	1531, 543, 1771, 279, 1464, 1463, 1259, 505, 812, 279,
	279, 1274, 1275, 510, 1287, 511, 1294, 1273, 1460, 1461,
	23, 518, 811, 279, 1460, 1459, 1770, 554, 1142, 543,
	1277, 279, 279, 279, 279, 279, 279, 1062, 1295, 793,
	1292, 279, 358, 791, 358, 1168, 921, 543, 700, 279,
	1169, 725, 674, 543, 1769, 279, 279, 279, 717, 716,
	279, 358, 1374, 279, 521, 514, 1688, 1339, 1385, 1684,
	50, 1779, 1380, 1778, 1341, 1683, 1350, 1680, 1389, 1340,
	1652, 23, 279, 1343, 1344, 358, 1383, 1589, 1614, 1579,
	1454, 1453, 701, 1654, 699, 54, 1403, 1366, 1402, 1365,
	1352, 1372, 1448, 1175, 1337, 1367, 1368, 1369, 1370, 1371,
	1154, 1635, 1379, 1390, 860, 1174, 279, 1174, 921, 70,
	950, 1388, 1291, 1652, 1870, 1290, 950, 1411, 1291, 23,
	1527, 50, 673, 1175, 1244, 1424, 1654, 1142, 1257, 1258,
	1152, 1260, 1557, 1263, 1264, 75, 674, 1578, 674, 1409,
	1142, 1471, 1410, 1598, 1597, 1312, 1153, 1462, 674, 1242,
	92, 1205, 520, 1436, 1429, 1427, 978, 1653, 566, 1449,
	1450, 92, 1452, 1142, 1438, 1455, 1456, 1440, 1174, 50,
	1469, 1470, 702, 577, 576, 586, 587, 579, 580, 581,
	582, 583, 584, 585, 578, 835, 973, 588, 699, 50,
	92, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1982, 1889,
	1653, 279, 1860, 1773, 263, 1772, 1442, 1444, 92, 1327,
	1761, 1192, 1760, 279, 1479, 1313, 1720, 1478, 1719, 1690,
	1485, 1315, 1308, 1309, 1678, 1316, 1311, 1310, 1496, 1487,
	358, 1318, 1314, 1619, 1655, 1656, 1657, 1658, 1659, 1660,
	1661, 1212, 1317, 1490, 1616, 1446, 1032, 1060, 279, 1307,
	1467, 1445, 1223, 1493, 50, 279, 1443, 1432, 1396, 1394,
	672, 1497, 1279, 1280, 1293, 1249, 1055, 1233, 1503, 696,
	1339, 92, 1207, 1179, 1180, 1546, 1547, 1548, 1049, 1534,
	1048, 1037, 65, 1508, 1742, 1766, 1599, 1499, 1468, 1379,
	1182, 809, 1551, 794, 540, 847, 1526, 679, 682, 683,
	684, 680, 279, 681, 685, 1282, 960, 1185, 279, 358,
	1575, 961, 1573, 1184, 1567, 1505, 1506, 1549, 1507, 957,
	958, 956, 1509, 1938, 1511, 959, 1244, 1890, 1333, 962,
	1572, 683, 684, 267, 268, 1650, 1106, 1936, 279, 92,
	1116, 1115, 358, 1206, 1553, 1266, 1204, 715, 343, 557,
	522, 1242, 1434, 1591, 1451, 1580, 1602, 679, 682, 683,
	684, 680, 358, 681, 685, 555, 545, 1179, 1180, 1525,
	1926, 837, 838, 1433, 1558, 1561, 1620, 1072, 1744, 546,
	1606, 808, 1605, 1590, 1289, 1284, 1283, 279, 279, 800,
	279, 279, 279, 687, 557, 1609, 358, 1610, 1611, 1612,
	264, 265, 1955, 1114, 1613, 840, 1474, 1287, 1553, 931,
	1608, 1113, 1387, 1192, 1417, 931, 258, 1636, 1913, 1726,
	259, 589, 54, 1725, 1623, 1175, 1077, 1078, 1079, 1759,
	802, 1878, 803, 1877, 1383, 807, 1876, 1875, 810, 1634,
	1844, 1843, 279, 559, 358, 1758, 1664, 279, 1413, 1416,
	1415, 1668, 1734, 1647, 1224, 830, 56, 1700, 8, 1697,
	7, 1626, 1627, 829, 1628, 1629, 1630, 58, 279, 1670,
	92, 1663, 1297, 920, 922, 1672, 1249, 1481, 1662, 1698,
	6, 990, 848, 1696, 5, 1615, 1602, 698, 51, 939,
	1685, 1, 1136, 616, 1681, 299, 1682, 1721, 577, 576,
	586, 587, 579, 580, 581, 582, 583, 584, 585, 578,
	1961, 1931, 588, 285, 1538, 1695, 1871, 1783, 1866, 1789,
	1251, 1466, 1012, 1768, 1736, 1230, 67, 1862, 1743, 1777,
	1473, 1288, 1735, 1306, 1480, 1069, 1285, 1484, 1087, 1486,
	965, 1809, 1383, 1740, 1823, 279, 1739, 1649, 1488, 1559,
	998, 1203, 490, 64, 1592, 1748, 1594, 999, 997, 996,
	994, 279, 1026, 1254, 1558, 1029, 1491, 724, 722, 312,
	47, 723, 727, 237, 350, 358, 686, 711, 560, 1602,
	1320, 279, 279, 1776, 1319, 1083, 1328, 826, 1103, 538,
	239, 601, 1112, 1197, 947, 1781, 279, 279, 357, 1782,
	1386, 1624, 549, 1712, 1724, 279, 1622, 785, 1158, 1794,
	1797, 633, 1704, 935, 286, 851, 298, 47, 297, 296,
	842, 1167, 975, 570, 1824, 262, 342, 670, 1819, 1806,
	1807, 344, 1838, 678, 676, 1536, 675, 1181, 1536, 1536,
	1536, 1814, 1550, 279, 1177, 341, 1336, 1840, 1522, 358,
	279, 358, 1731, 846, 1856, 1795, 1836, 1837, 25, 55,
	1872, 1602, 269, 19, 18, 1857, 1859, 17, 20, 16,
	15, 1839, 1869, 1536, 14, 29, 950, 13, 1249, 12,
	1581, 1867, 11, 1858, 10, 9, 1703, 1702, 358, 1701,
	1699, 4, 1704, 260, 1885, 1879, 1831, 1832, 1833, 1834,
	1835, 1801, 1802, 1803, 1804, 1805, 22, 2, 1603, 0,
	1065, 1066, 358, 358, 0, 0, 0, 1074, 0, 1080,
	1896, 1897, 1617, 0, 1082, 0, 1900, 1099, 0, 1100,
	0, 0, 1101, 1621, 0, 0, 0, 0, 1918, 0,
	0, 1901, 1902, 0, 1919, 0, 589, 0, 1914, 0,
	1922, 1131, 1923, 0, 0, 1930, 0, 272, 1929, 0,
	1934, 1935, 0, 0, 0, 1139, 0, 1141, 0, 1921,
	0, 0, 1638, 1639, 1940, 1144, 1145, 1146, 1704, 1917,
	0, 0, 1695, 0, 92, 1156, 0, 0, 0, 0,
	1162, 279, 1704, 1163, 1164, 1165, 1166, 1950, 1413, 1937,
	1872, 0, 0, 530, 530, 530, 530, 1948, 530, 0,
	1671, 1952, 92, 0, 0, 530, 0, 0, 0, 1942,
	0, 0, 1969, 0, 0, 0, 0, 1971, 1958, 0,
	1781, 1958, 47, 0, 1947, 0, 1949, 0, 1603, 1686,
	0, 0, 1975, 0, 0, 0, 0, 602, 1692, 0,
	0, 606, 0, 1984, 1989, 0, 0, 1713, 279, 1990,
	1536, 0, 0, 0, 0, 0, 1704, 0, 1972, 0,
	618, 0, 1973, 0, 0, 0, 0, 0, 1704, 1704,
	1704, 1738, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 1958, 635, 637, 637, 637, 637, 637, 637, 637,
	637, 0, 666, 667, 668, 669, 1983, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 1354, 0, 0,
	0, 0, 0, 0, 0, 1704, 0, 1704, 1704, 0,
	0, 1603, 1991, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 1229, 0, 1784, 1786, 1787, 1788,
	0, 0, 1356, 0, 1800, 1713, 1713, 1800, 1713, 1713,
	1413, 1413, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 0, 931, 588, 0, 1821, 0,
	0, 0, 0, 1822, 1704, 0, 1281, 1825, 1704, 0,
	0, 0, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 1692, 1413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1603, 1413, 0, 547, 551, 0, 1864,
	0, 0, 0, 1358, 0, 725, 0, 1363, 0, 1357,
	1874, 0, 0, 569, 1355, 1335, 0, 0, 0, 0,
	1361, 1800, 263, 1400, 48, 26, 27, 0, 646, 0,
	0, 0, 1888, 1359, 1360, 0, 1705, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 28, 0, 0,
	623, 0, 0, 1362, 1364, 0, 0, 0, 0, 634,
	530, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 530, 530, 530, 530, 530, 530, 530, 530, 0,
	0, 1536, 0, 0, 0, 530, 530, 0, 0, 0,
	0, 1924, 0, 0, 0, 0, 0, 0, 0, 0,
	1994, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 0, 0, 0, 1939, 0, 0, 0, 0, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 0,
	892, 893, 0, 894, 895, 896, 898, 897, 0, 889,
	649, 0, 0, 0, 0, 725, 0, 1956, 664, 647,
	1711, 0, 0, 0, 653, 652, 47, 0, 0, 0,
	1710, 0, 0, 0, 263, 0, 48, 26, 27, 0,
	0, 0, 1498, 0, 624, 0, 0, 0, 1705, 0,
	0, 0, 1465, 0, 0, 1504, 0, 0, 0, 28,
	589, 358, 0, 1477, 548, 0, 1093, 1513, 1514, 1515,
	0, 0, 1518, 1692, 0, 1706, 1707, 1709, 0, 0,
	1092, 1708, 0, 0, 0, 0, 1528, 1529, 1530, 0,
	1533, 0, 1489, 0, 344, 344, 344, 344, 344, 90,
	0, 665, 249, 0, 0, 0, 0, 0, 0, 689,
	1097, 970, 1960, 0, 0, 0, 0, 0, 344, 1091,
	0, 0, 0, 0, 273, 0, 90, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 1586, 0, 90, 0, 90, 0, 0,
	0, 0, 0, 90, 0, 0, 23, 24, 48, 26,
	27, 0, 1711, 0, 0, 646, 0, 0, 0, 849,
	850, 0, 1710, 1088, 1085, 1086, 42, 1084, 0, 0,
	0, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
	648, 0, 37, 0, 0, 0, 50, 1095, 1098, 0,
	0, 530, 0, 530, 0, 0, 0, 1706, 1707, 1709,
	0, 0, 0, 1708, 1631, 0, 917, 0, 0, 0,
	530, 0, 623, 0, 0, 926, 927, 0, 0, 0,
	0, 1604, 0, 0, 0, 0, 0, 0, 1644, 1645,
	1646, 0, 0, 0, 0, 0, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 0, 0, 0, 0,
	0, 30, 31, 33, 32, 35, 1675, 649, 0, 1122,
	0, 0, 0, 0, 0, 664, 647, 1090, 0, 0,
	0, 653, 652, 0, 90, 0, 0, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 0, 0, 0, 263,
	0, 48, 26, 27, 0, 0, 0, 984, 0, 0,
	1089, 0, 0, 1705, 0, 0, 0, 0, 1727, 1728,
	1729, 1730, 0, 0, 28, 0, 49, 0, 0, 0,
	0, 0, 263, 0, 48, 26, 27, 0, 0, 0,
	0, 38, 39, 0, 40, 41, 1705, 0, 0, 263,
	1094, 48, 26, 27, 0, 1171, 1172, 28, 665, 0,
	0, 0, 1687, 1705, 0, 1762, 1096, 0, 263, 0,
	48, 26, 27, 0, 28, 0, 0, 1957, 0, 0,
	0, 0, 1705, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 28, 0, 0, 0, 0, 0, 90,
	694, 90, 0, 0, 0, 0, 0, 0, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1815, 0, 0, 0, 1711, 1820, 0,
	1107, 1108, 0, 551, 0, 245, 0, 1710, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 1841, 0, 0, 0, 0,
	1711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1710, 0, 0, 0, 0, 0, 0, 1711, 0, 0,
	0, 0, 1706, 1707, 1709, 0, 0, 1710, 1708, 0,
	0, 230, 0, 0, 0, 0, 1711, 232, 0, 0,
	0, 1886, 0, 0, 238, 234, 1710, 0, 0, 0,
	0, 530, 0, 0, 0, 1706, 1707, 1709, 0, 1143,
	0, 1708, 0, 0, 0, 0, 0, 1880, 0, 0,
	0, 0, 1706, 1707, 1709, 1161, 236, 0, 1708, 0,
	240, 0, 0, 0, 1868, 0, 0, 0, 0, 0,
	0, 1706, 1707, 1709, 0, 0, 0, 1708, 0, 0,
	0, 0, 90, 0, 90, 0, 0, 90, 0, 0,
	90, 0, 0, 0, 814, 0, 0, 0, 0, 1384,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 1397, 1398,
	1399, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 0, 0,
	0, 1967, 0, 0, 49, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 233, 1441, 241, 242, 243, 244, 248, 618,
	0, 0, 0, 247, 246, 0, 0, 0, 0, 0,
	49, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	273, 273, 0, 1995, 1996, 932, 273, 0, 0, 0,
	932, 0, 0, 47, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 273, 273, 273, 0, 90, 0, 932, 90,
	90, 90, 90, 90, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 90, 0, 0, 344, 694, 0,
	0, 0, 0, 90, 90, 0, 0, 0, 1376, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1391, 1392, 0, 0, 1393, 0, 0,
	1395, 0, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 90, 0, 0, 0, 0, 0, 90,
	0, 90, 0, 0, 0, 0, 90, 0, 0, 90,
	0, 90, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 1384, 0, 0,
	1637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 1524, 0, 0, 0, 0,
	0, 0, 623, 1674, 0, 0, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 1574,
	1722, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1384, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 1250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1331,
	1332, 0, 0, 0, 0, 0, 0, 90, 0, 1673,
	0, 0, 0, 0, 1677, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 932,
	0, 0, 1893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1796,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1813, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 1865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1987, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 0,
	96, 914, 1250, 281, 0, 0, 0, 120, 277, 0,
	0, 0, 134, 227, 228, 322, 137, 0, 0, 181,
	147, 0, 0, 0, 0, 313, 314, 0, 1953, 0,
	0, 0, 1250, 90, 0, 50, 0, 0, 278, 301,
	280, 303, 304, 305, 306, 0, 0, 109, 302, 307,
	308, 309, 0, 0, 0, 0, 275, 293, 0, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 291, 271, 0, 0, 0, 334,
	0, 292, 0, 0, 288, 289, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 332, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 1250, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 336, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 1250, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 310, 323, 333,
	329, 330, 327, 328, 326, 325, 324, 335, 315, 316,
	317, 318, 320, 0, 129, 319, 95, 103, 136, 932,
	215, 0, 168, 122, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 331, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 465, 0, 426,
	478, 396, 414, 486, 416, 417, 452, 376, 435, 159,
	411, 394, 96, 399, 369, 406, 370, 397, 428, 120,
	395, 0, 467, 438, 134, 227, 228, 484, 137, 443,
	0, 181, 147, 0, 0, 430, 469, 433, 460, 425,
	453, 384, 442, 479, 412, 448, 480, 0, 0, 0,
	363, 0, 1554, 1555, 0, 0, 0, 0, 0, 109,
	0, 447, 474, 408, 489, 0, 451, 368, 445, 0,
	374, 377, 485, 472, 403, 404, 0, 0, 0, 0,
	0, 0, 0, 429, 434, 457, 422, 0, 1946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 400,
	0, 441, 0, 0, 0, 381, 375, 0, 427, 0,
	0, 0, 383, 0, 401, 458, 90, 365, 463, 470,
	424, 143, 208, 473, 421, 420, 166, 0, 112, 0,
	187, 124, 413, 135, 455, 487, 477, 431, 468, 398,
	407, 114, 405, 173, 160, 199, 440, 161, 171, 138,
	191, 167, 198, 475, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 373, 366, 402, 461, 464, 388,
	450, 378, 409, 456, 410, 432, 393, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	371, 0, 182, 201, 218, 219, 372, 392, 471, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 449, 174, 111, 200, 180, 0,
	387, 391, 385, 386, 436, 437, 481, 482, 483, 459,
	382, 0, 389, 390, 0, 466, 129, 439, 95, 103,
	136, 488, 215, 0, 168, 122, 202, 0, 0, 415,
	367, 419, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 175, 423, 418, 444, 446, 454, 462, 476, 465,
	108, 426, 478, 396, 414, 486, 416, 417, 452, 376,
	435, 159, 411, 394, 96, 399, 369, 406, 370, 397,
	428, 120, 395, 0, 467, 438, 134, 227, 228, 484,
	137, 443, 0, 181, 147, 0, 0, 430, 469, 433,
	460, 425, 453, 384, 442, 479, 412, 448, 480, 0,
	0, 0, 278, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 447, 474, 408, 489, 0, 451, 368,
	445, 0, 374, 377, 485, 472, 403, 404, 0, 0,
	0, 0, 0, 0, 0, 429, 434, 457, 422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	0, 400, 0, 441, 0, 0, 0, 381, 375, 0,
	427, 0, 0, 0, 383, 0, 401, 458, 0, 365,
	463, 470, 424, 143, 208, 473, 421, 420, 166, 0,
	112, 0, 187, 124, 413, 135, 455, 487, 477, 431,
	468, 398, 407, 114, 405, 173, 160, 199, 440, 161,
	171, 138, 191, 167, 198, 475, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 373, 366, 402, 461,
	464, 388, 450, 378, 409, 456, 410, 432, 393, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 371, 0, 182, 201, 218, 219, 372, 392,
	471, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 449, 174, 111, 200,
	180, 0, 387, 391, 385, 386, 436, 437, 481, 482,
	483, 459, 382, 0, 389, 390, 0, 466, 129, 439,
	95, 103, 136, 488, 215, 0, 168, 122, 202, 0,
	0, 415, 367, 419, 0, 0, 0, 0, 0, 0,
	0, 379, 380, 175, 423, 418, 444, 446, 454, 462,
	476, 465, 108, 426, 478, 396, 414, 486, 416, 417,
	452, 376, 435, 159, 411, 394, 96, 399, 369, 406,
	370, 397, 428, 120, 395, 0, 467, 438, 134, 227,
	228, 484, 137, 443, 0, 181, 147, 0, 0, 430,
	469, 433, 460, 425, 453, 384, 442, 479, 412, 448,
	480, 0, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 447, 474, 408, 489, 0,
	451, 368, 445, 0, 374, 377, 485, 472, 403, 404,
	1408, 0, 0, 0, 0, 0, 0, 429, 434, 457,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 441, 0, 0, 0, 381,
	375, 0, 427, 0, 0, 0, 383, 0, 401, 458,
	0, 365, 463, 470, 424, 143, 208, 473, 421, 420,
	166, 0, 112, 0, 187, 124, 413, 135, 455, 487,
	477, 431, 468, 398, 407, 114, 405, 173, 160, 199,
	440, 161, 171, 138, 191, 167, 198, 475, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 373, 366,
	402, 461, 464, 388, 450, 378, 409, 456, 410, 432,
	393, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 371, 0, 182, 201, 218, 219,
	372, 392, 471, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 449, 174,
	111, 200, 180, 0, 387, 391, 385, 386, 436, 437,
	481, 482, 483, 459, 382, 0, 389, 390, 0, 466,
	129, 439, 95, 103, 136, 488, 215, 0, 168, 122,
	202, 0, 0, 415, 367, 419, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 175, 423, 418, 444, 446,
	454, 462, 476, 465, 108, 426, 478, 396, 414, 486,
	416, 417, 452, 376, 435, 159, 411, 394, 96, 399,
	369, 406, 370, 397, 428, 120, 395, 0, 467, 438,
	134, 227, 228, 484, 137, 443, 0, 181, 147, 0,
	0, 430, 469, 433, 460, 425, 453, 384, 442, 479,
	412, 448, 480, 0, 0, 0, 278, 0, 93, 0,
	0, 0, 0, 0, 0, 109, 0, 447, 474, 408,
	489, 0, 451, 368, 445, 0, 374, 377, 485, 472,
	403, 404, 0, 0, 0, 0, 0, 0, 0, 429,
	434, 457, 422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 400, 0, 441, 0, 0,
	0, 381, 375, 0, 427, 0, 0, 0, 383, 0,
	401, 458, 0, 365, 463, 470, 424, 143, 208, 473,
	421, 420, 166, 0, 112, 0, 187, 124, 413, 135,
	455, 487, 477, 431, 468, 398, 407, 114, 405, 173,
	160, 199, 440, 161, 171, 138, 191, 167, 198, 475,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	373, 366, 402, 461, 464, 388, 450, 378, 409, 456,
	410, 432, 393, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 371, 0, 182, 201,
	218, 219, 372, 392, 471, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	449, 174, 111, 200, 180, 0, 387, 391, 385, 386,
	436, 437, 481, 482, 483, 459, 382, 0, 389, 390,
	0, 466, 129, 439, 95, 103, 136, 488, 215, 0,
	168, 122, 202, 0, 0, 415, 367, 419, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 175, 423, 418,
	444, 446, 454, 462, 476, 465, 108, 426, 478, 396,
	414, 486, 416, 417, 452, 376, 435, 159, 411, 394,
	96, 399, 369, 406, 370, 397, 428, 120, 395, 0,
	467, 438, 134, 227, 228, 484, 137, 443, 0, 181,
	147, 0, 0, 430, 469, 433, 460, 425, 453, 384,
	442, 479, 412, 448, 480, 0, 0, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 447,
	474, 408, 489, 0, 451, 368, 445, 0, 374, 377,
	485, 472, 403, 404, 0, 0, 0, 0, 0, 0,
	0, 429, 434, 457, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 400, 0, 441,
	0, 0, 0, 381, 375, 0, 427, 0, 0, 0,
	383, 0, 401, 458, 0, 365, 463, 470, 424, 143,
	208, 473, 421, 420, 166, 0, 112, 0, 187, 124,
	413, 135, 455, 487, 477, 431, 468, 398, 407, 114,
	405, 173, 160, 199, 440, 161, 171, 138, 191, 167,
	198, 475, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 373, 366, 402, 461, 464, 388, 450, 378,
	409, 456, 410, 432, 393, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 371, 0,
	182, 201, 218, 219, 372, 392, 471, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 449, 174, 111, 200, 180, 0, 387, 391,
	385, 386, 436, 437, 481, 482, 483, 459, 382, 0,
	389, 390, 0, 466, 129, 439, 95, 103, 136, 488,
	215, 0, 168, 122, 202, 0, 0, 415, 367, 419,
	0, 0, 0, 0, 0, 0, 0, 379, 380, 175,
	423, 418, 444, 446, 454, 462, 476, 465, 108, 426,
	478, 396, 414, 486, 416, 417, 452, 376, 435, 159,
	411, 394, 96, 399, 369, 406, 370, 397, 428, 120,
	395, 0, 467, 438, 134, 227, 228, 484, 137, 443,
	0, 181, 147, 0, 0, 430, 469, 433, 460, 425,
	453, 384, 442, 479, 412, 448, 480, 50, 0, 0,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 447, 474, 408, 489, 0, 451, 368, 445, 0,
	374, 377, 485, 472, 403, 404, 0, 0, 0, 0,
	0, 0, 0, 429, 434, 457, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 400,
	0, 441, 0, 0, 0, 381, 375, 0, 427, 0,
	0, 0, 383, 0, 401, 458, 0, 365, 463, 470,
	424, 143, 208, 473, 421, 420, 166, 0, 112, 0,
	187, 124, 413, 135, 455, 487, 477, 431, 468, 398,
	407, 114, 405, 173, 160, 199, 440, 161, 171, 138,
	191, 167, 198, 475, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 373, 366, 402, 461, 464, 388,
	450, 378, 409, 456, 410, 432, 393, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	371, 0, 182, 201, 218, 219, 372, 392, 471, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 449, 174, 111, 200, 180, 0,
	387, 391, 385, 386, 436, 437, 481, 482, 483, 459,
	382, 0, 389, 390, 0, 466, 129, 439, 95, 103,
	136, 488, 215, 0, 168, 122, 202, 0, 0, 415,
	367, 419, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 175, 423, 418, 444, 446, 454, 462, 476, 465,
	108, 426, 478, 396, 414, 486, 416, 417, 452, 376,
	435, 159, 411, 394, 96, 399, 369, 406, 370, 397,
	428, 120, 395, 0, 467, 438, 134, 227, 228, 484,
	137, 443, 0, 181, 147, 0, 0, 430, 469, 433,
	460, 425, 453, 384, 442, 479, 412, 448, 480, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 447, 474, 408, 489, 0, 451, 368,
	445, 0, 374, 377, 485, 472, 403, 404, 0, 0,
	0, 0, 0, 0, 0, 429, 434, 457, 422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 400, 0, 441, 0, 0, 0, 381, 375, 0,
	427, 0, 0, 0, 383, 0, 401, 458, 0, 365,
	463, 470, 424, 143, 208, 473, 421, 420, 166, 0,
	112, 0, 187, 124, 413, 135, 455, 487, 477, 431,
	468, 398, 407, 114, 405, 173, 160, 199, 440, 161,
	171, 138, 191, 167, 198, 475, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 373, 366, 402, 461,
	464, 388, 450, 378, 409, 456, 410, 432, 393, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 361,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 371, 0, 182, 201, 218, 219, 372, 392,
	471, 211, 212, 213, 214, 0, 0, 0, 362, 360,
	128, 178, 132, 139, 169, 216, 449, 174, 111, 200,
	180, 356, 387, 391, 385, 386, 436, 437, 481, 482,
	483, 459, 382, 0, 389, 390, 0, 466, 129, 439,
	95, 103, 136, 488, 215, 0, 168, 122, 202, 0,
	0, 415, 367, 419, 0, 0, 0, 0, 0, 0,
	0, 379, 380, 175, 423, 418, 444, 446, 454, 462,
	476, 465, 108, 426, 478, 396, 414, 486, 416, 417,
	452, 376, 435, 159, 411, 394, 96, 399, 369, 406,
	370, 397, 428, 120, 395, 0, 467, 438, 134, 227,
	228, 484, 137, 443, 0, 181, 147, 0, 0, 430,
	469, 433, 460, 425, 453, 384, 442, 479, 412, 448,
	480, 0, 0, 0, 91, 0, 93, 0, 0, 0,
	0, 0, 0, 109, 0, 447, 474, 408, 489, 0,
	451, 368, 445, 0, 374, 377, 485, 472, 403, 404,
	0, 0, 0, 0, 0, 0, 0, 429, 434, 457,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 441, 0, 0, 0, 381,
	375, 0, 427, 0, 0, 0, 383, 0, 401, 458,
	0, 365, 463, 470, 424, 143, 208, 473, 421, 420,
	166, 0, 112, 0, 187, 124, 413, 135, 455, 487,
	477, 431, 468, 398, 407, 114, 405, 173, 160, 199,
	440, 161, 171, 138, 191, 167, 198, 475, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 373, 366,
	402, 461, 464, 388, 450, 378, 409, 456, 410, 432,
	393, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 371, 0, 182, 201, 218, 219,
	372, 392, 471, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 449, 174,
	111, 200, 180, 0, 387, 391, 385, 386, 436, 437,
	481, 482, 483, 459, 382, 0, 389, 390, 0, 466,
	129, 439, 95, 103, 136, 488, 215, 0, 168, 122,
	202, 0, 0, 415, 367, 419, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 175, 423, 418, 444, 446,
	454, 462, 476, 465, 108, 426, 478, 396, 414, 486,
	416, 417, 452, 376, 435, 159, 411, 394, 96, 399,
	369, 406, 370, 397, 428, 120, 395, 0, 467, 438,
	134, 227, 228, 484, 137, 443, 0, 181, 147, 0,
	0, 430, 469, 433, 460, 425, 453, 384, 442, 479,
	412, 448, 480, 0, 0, 0, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 447, 474, 408,
	489, 0, 451, 368, 445, 0, 374, 377, 485, 472,
	403, 404, 0, 0, 0, 0, 0, 0, 0, 429,
	434, 457, 422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 400, 0, 441, 0, 0,
	0, 381, 375, 0, 427, 0, 0, 0, 383, 0,
	401, 458, 0, 365, 463, 470, 424, 143, 208, 473,
	421, 420, 166, 0, 112, 0, 187, 124, 413, 135,
	455, 487, 477, 431, 468, 398, 407, 114, 405, 173,
	160, 199, 440, 161, 171, 138, 191, 167, 198, 475,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	373, 366, 402, 461, 464, 388, 450, 378, 409, 456,
	410, 432, 393, 0, 0, 0, 0, 0, 97, 188,
	704, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 361, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 371, 0, 182, 201,
	218, 219, 372, 392, 471, 211, 212, 213, 214, 0,
	0, 0, 362, 360, 128, 178, 132, 139, 169, 216,
	449, 174, 111, 200, 180, 356, 387, 391, 385, 386,
	436, 437, 481, 482, 483, 459, 382, 0, 389, 390,
	0, 466, 129, 439, 95, 103, 136, 488, 215, 0,
	168, 122, 202, 0, 0, 415, 367, 419, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 175, 423, 418,
	444, 446, 454, 462, 476, 465, 108, 426, 478, 396,
	414, 486, 416, 417, 452, 376, 435, 159, 411, 394,
	96, 399, 369, 406, 370, 397, 428, 120, 395, 0,
	467, 438, 134, 227, 228, 484, 137, 443, 0, 181,
	147, 0, 0, 430, 469, 433, 460, 425, 453, 384,
	442, 479, 412, 448, 480, 0, 0, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 447,
	474, 408, 489, 0, 451, 368, 445, 0, 374, 377,
	485, 472, 403, 404, 0, 0, 0, 0, 0, 0,
	0, 429, 434, 457, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 0, 441,
	0, 0, 0, 381, 375, 0, 427, 0, 0, 0,
	383, 0, 401, 458, 0, 365, 463, 470, 424, 143,
	208, 473, 421, 420, 166, 0, 112, 0, 187, 124,
	413, 135, 455, 487, 477, 431, 468, 398, 407, 114,
	405, 173, 160, 199, 440, 161, 171, 138, 191, 167,
	198, 475, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 373, 366, 402, 461, 464, 388, 450, 378,
	409, 456, 410, 432, 393, 0, 0, 0, 0, 0,
	97, 188, 351, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 361, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 371, 0,
	182, 201, 218, 219, 372, 392, 471, 211, 212, 213,
	214, 0, 0, 0, 362, 360, 354, 353, 132, 139,
	169, 216, 449, 174, 111, 200, 180, 356, 387, 391,
	385, 386, 436, 437, 481, 482, 483, 459, 382, 0,
	389, 390, 0, 466, 129, 439, 95, 103, 136, 488,
	215, 0, 168, 122, 202, 0, 0, 415, 367, 419,
	0, 0, 0, 0, 0, 0, 0, 379, 380, 175,
	423, 418, 444, 446, 454, 462, 476, 465, 108, 426,
	478, 396, 414, 486, 416, 417, 452, 376, 435, 159,
	411, 394, 96, 399, 369, 406, 370, 397, 428, 120,
	395, 0, 467, 438, 134, 227, 228, 484, 137, 443,
	0, 181, 147, 0, 0, 430, 469, 433, 460, 425,
	453, 384, 442, 479, 412, 448, 480, 0, 0, 0,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 447, 474, 408, 489, 0, 451, 368, 445, 0,
	374, 377, 485, 472, 403, 404, 0, 0, 0, 0,
	0, 0, 0, 429, 434, 457, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 400,
	0, 441, 0, 0, 0, 381, 375, 0, 427, 0,
	0, 0, 383, 0, 401, 458, 0, 365, 463, 470,
	424, 143, 208, 473, 421, 420, 166, 0, 112, 0,
	187, 124, 413, 135, 455, 487, 477, 431, 468, 398,
	407, 114, 405, 173, 160, 199, 440, 161, 171, 138,
	191, 167, 198, 475, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 373, 366, 402, 461, 464, 388,
	450, 378, 409, 456, 410, 432, 393, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	371, 0, 182, 201, 218, 219, 372, 392, 471, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 449, 174, 111, 200, 180, 0,
	387, 391, 385, 386, 436, 437, 481, 482, 483, 459,
	382, 0, 389, 390, 0, 466, 129, 439, 95, 103,
	136, 488, 215, 0, 168, 122, 202, 0, 0, 415,
	367, 419, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 175, 423, 418, 444, 446, 454, 462, 159, 0,
	108, 96, 0, 0, 281, 0, 0, 0, 120, 277,
	0, 0, 0, 134, 227, 228, 322, 137, 0, 0,
	181, 147, 0, 0, 0, 0, 313, 314, 0, 0,
	0, 0, 0, 0, 982, 0, 50, 0, 0, 278,
	301, 280, 303, 304, 305, 306, 0, 0, 109, 302,
	307, 308, 309, 983, 0, 0, 0, 275, 293, 0,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 291, 0, 0, 0, 0,
	334, 0, 292, 0, 0, 288, 289, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 332, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 336, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 310, 323,
	333, 329, 330, 327, 328, 326, 325, 324, 335, 315,
	316, 317, 318, 320, 0, 129, 319, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 281, 0, 0, 0, 120, 277,
	175, 0, 0, 134, 227, 228, 322, 137, 331, 108,
	181, 147, 0, 0, 0, 0, 313, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 543, 278,
	301, 280, 303, 304, 305, 306, 0, 0, 109, 302,
	307, 308, 309, 0, 0, 0, 0, 275, 293, 0,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 291, 0, 0, 0, 0,
	334, 0, 292, 0, 0, 288, 289, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 332, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 336, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 310, 323,
	333, 329, 330, 327, 328, 326, 325, 324, 335, 315,
	316, 317, 318, 320, 0, 129, 319, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 281, 0, 0, 0, 120, 277,
	175, 0, 0, 134, 227, 228, 322, 137, 331, 108,
	181, 147, 0, 0, 0, 0, 313, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 278,
	301, 280, 303, 304, 305, 306, 0, 0, 109, 302,
	307, 308, 309, 0, 0, 0, 0, 275, 293, 0,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 291, 271, 0, 0, 0,
	334, 0, 292, 0, 0, 288, 289, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 332, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 336, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 310, 323,
	333, 329, 330, 327, 328, 326, 325, 324, 335, 315,
	316, 317, 318, 320, 0, 129, 319, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 159, 0, 0, 96, 0, 0, 281, 331, 108,
	0, 120, 277, 0, 0, 0, 134, 227, 228, 322,
	137, 0, 0, 181, 147, 0, 0, 0, 0, 313,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 278, 301, 280, 303, 304, 305, 306, 0,
	0, 109, 302, 307, 308, 309, 0, 0, 0, 0,
	275, 293, 0, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 288, 289,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 332, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 336, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 310, 323, 333, 329, 330, 327, 328, 326, 325,
	324, 335, 315, 316, 317, 318, 320, 0, 129, 319,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 281, 0, 0,
	0, 120, 277, 175, 0, 0, 134, 227, 228, 322,
	137, 331, 108, 181, 147, 0, 0, 0, 0, 313,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 278, 301, 280, 303, 304, 305, 306, 0,
	0, 109, 302, 307, 308, 309, 0, 0, 0, 0,
	275, 293, 0, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 288, 289,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 332, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 336, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 310, 323, 333, 329, 330, 327, 328, 326, 325,
	324, 335, 315, 316, 317, 318, 320, 0, 129, 319,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 322,
	137, 331, 108, 181, 147, 0, 0, 0, 0, 313,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 278, 301, 280, 303, 304, 305, 306, 0,
	0, 109, 302, 307, 308, 309, 0, 0, 0, 0,
	0, 293, 0, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 288, 289,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 332, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 1992, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 336, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 310, 323, 333, 329, 330, 327, 328, 326, 325,
	324, 335, 315, 316, 317, 318, 320, 0, 129, 319,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 281, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 322,
	137, 331, 108, 181, 147, 0, 0, 0, 0, 313,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 278, 301, 280, 303, 304, 305, 306, 0,
	0, 109, 302, 307, 308, 309, 0, 0, 0, 0,
	0, 293, 0, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 288, 289,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 332, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 336, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 310, 323, 333, 329, 330, 327, 328, 326, 325,
	324, 335, 315, 316, 317, 318, 320, 0, 129, 319,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 322,
	137, 331, 108, 181, 147, 0, 0, 0, 0, 313,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 278, 301, 280, 303, 304, 305, 306, 0,
	0, 109, 302, 307, 308, 309, 0, 0, 0, 0,
	0, 293, 0, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 288, 289,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 332, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 336, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 310, 323, 333, 329, 330, 327, 328, 326, 325,
	324, 335, 315, 316, 317, 318, 320, 0, 129, 319,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 331, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 278, 0, 1236, 1237, 1238, 0, 0, 0,
	0, 109, 1241, 1239, 308, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 1243, 1248, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 1245, 0, 1247, 1246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1235,
	0, 0, 278, 0, 1236, 1237, 1238, 0, 0, 0,
	0, 109, 1241, 1239, 308, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 1243, 1248, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 1245, 0, 1247, 1246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 1236, 1237, 1238, 0, 0, 0,
	0, 109, 1241, 1239, 308, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 1243, 1248, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 1245, 0, 1247, 1246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 751, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1718, 0, 363, 0, 1716, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1715, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 752, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 0,
	778, 779, 164, 780, 781, 782, 784, 783, 753, 754,
	755, 759, 757, 756, 758, 730, 732, 206, 728, 731,
	737, 733, 734, 735, 749, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 750, 760, 761, 762,
	763, 764, 765, 766, 767, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 729, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 301, 908, 303, 304, 305, 306, 0,
	0, 109, 302, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 751, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 752, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	1873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 0,
	778, 779, 164, 780, 781, 782, 784, 783, 753, 754,
	755, 759, 757, 756, 758, 730, 732, 206, 728, 731,
	737, 733, 734, 735, 749, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 750, 760, 761, 762,
	763, 764, 765, 766, 767, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 729, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 565, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 567, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 751, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 752, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 0,
	778, 779, 164, 780, 781, 782, 784, 783, 753, 754,
	755, 759, 757, 756, 758, 730, 732, 206, 728, 731,
	737, 733, 734, 735, 749, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 750, 760, 761, 762,
	763, 764, 765, 766, 767, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 729, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1718, 0, 363, 0, 1716, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1715, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 493, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 143, 208, 0, 0, 0, 1001, 0,
	1000, 0, 1002, 1003, 0, 135, 0, 0, 1004, 1007,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 1583,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 1582,
	204, 153, 158, 156, 203, 1584, 196, 146, 142, 0,
	101, 194, 144, 141, 1585, 906, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 902,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 23,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	1945, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 1414,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 693, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 695, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 23,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 0, 844, 0, 0, 845, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 804, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 714, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 713, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 693, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 695, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 691,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	671, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 346, 168, 122, 202, 0,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 175, 0, 0, 0, 134, 227, 228,
	0, 137, 108, 0, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	1414, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	1537, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 0, 93, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 695, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 589, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 567, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 493, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 108,
}

var yyPact = [...]int16{
	2430, -1000, -209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1537, 1581, -1000, -1000, -1000, -1000, -1000, -1000, 1356,
	939, 461, 492, 189, 17844, 490, 2666, 18154, -1000, 147,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1243, -1000, -1000,
	-1000, -1000, -1000, 1529, 1534, 1328, 1509, 1421, -1000, 8530,
	391, 15053, 17534, 7239, -1000, 20324, -153, 460, 439, 20634,
	381, 381, 20634, 20634, 18154, 487, 381, -1000, -31, 484,
	18154, -1000, 18154, 389, 1126, 389, 389, 389, 18154, -1000,
	575, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18154,
	1125, 1449, 293, 5871, 5871, 5871, 5871, 261, 5871, 28,
	1370, -1000, -1000, -1000, -1000, 5871, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 989, 1477, 9163, 9163,
	1537, -1000, 1243, -1000, -1000, -1000, 1457, -1000, -1000, 771,
	1562, -1000, 12263, 573, -1000, 9163, 294, 1263, -1000, -1000,
	-203, 1263, -1000, -1000, 504, -1000, -1000, -1000, 10093, 10093,
	10093, 10093, 10093, 10093, 10093, -1000, -1000, -1000, -1000, 71,
	936, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	567, -1000, 8853, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 9163, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
	1263, 2330, 1263, 1263, 1263, 1263, -1000, 17223, 1221, 1383,
	-1000, -1000, -1000, 1500, 13813, 16913, 18154, 1157, -1000, 1245,
	6897, 30, -1000, -1000, -1000, 690, 566, 16603, -1000, -1000,
	-1000, 1446, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1121, -1000, 12573, 12573, 481, -1000, -1000, 381, 381, 945,
	1104, 732, 1100, 1369, 430, 1496, 381, 18154, -1000, 16293,
	5871, 425, 18154, 1487, 1367, 18154, 1083, 1069, -1000, 6555,
	-1000, 5871, 5871, 5871, 5871, 5871, 5871, 5871, 5871, -1000,
	-1000, -1000, -1000, -1000, -1000, 5871, 5871, -1000, 46, -1000,
	18154, -1000, -1000, -1000, -1000, 1576, 618, 942, 565, 1258,
	-1000, 865, 1529, 989, 1421, 15983, 1380, -1000, -1000, 18154,
	-1000, 9163, 9163, 846, -1000, 20014, -1000, -1000, 4503, 625,
	10093, 775, 640, 10093, 10093, 10093, 10093, 10093, 10093, 10093,
	10093, 10093, 10093, 10093, 10093, 10093, 10093, 10093, 924, 2063,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1024, -1000, 505, -1000, 1243, 11643, 11643, 29,
	29, 29, 29, 29, 29, 19704, -1000, -234, 3759, -1000,
	7581, 989, 1109, 750, 8853, 8530, 8530, 9163, 9163, 10093,
	19084, 8530, 1502, 642, 750, 19084, -1000, 989, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 103, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8530, 8530, 8530, 8530,
	282, 18154, -1000, 19084, 15053, 15053, 15053, 15053, 15053, -1000,
	1407, 1405, -1000, 1406, 1392, 1415, 18154, -1000, 1115, 13813,
	613, 1263, -1000, 19394, -1000, -1000, 282, 1261, 15053, 18154,
	-1000, -1000, 6213, 1245, 30, 1229, -1000, -9, 16, 7910,
	7581, 581, -1000, -1000, -1000, -1000, 201, 13193, 82, -139,
	60, -1000, -1000, -1000, -1000, -1000, 1320, -1000, -1000, -1000,
	1320, 285, 1355, 1320, 1355, -1000, 1320, 1355, 100, 100,
	100, 100, 100, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1354, 1352, -1000, 1320, 1320, 1320, -1000, 1320, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1340, 299,
	1340, 1321, 1321, -1000, -1000, 82, 15673, 18154, 18154, -82,
	1021, 5871, 1483, 5871, 18154, 1548, 18154, -1000, -1000, -1000,
	12573, 18154, -1000, 2331, 18154, -1000, 18154, -1000, -1000, 18154,
	5871, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 703, -1000, -1000, -1000,
	-1000, 1426, 9163, 9163, 5187, 9163, -1000, -1000, -1000, 1477,
	-1000, 1502, 1522, -1000, 1435, 1434, 8530, -1000, -1000, 625,
	644, -1000, -1000, 941, -1000, -1000, -1000, -1000, 564, 1263,
	-1000, 1528, -1000, -1000, -1000, -1000, 775, 10093, 10093, 10093,
	751, 1528, 1992, 159, 444, 29, 24, 24, 107, 107,
	107, 107, 107, 99, 99, -1000, -1000, -1000, -1000, -79,
	-1000, 1320, 1340, 299, 1340, 1321, 1321, -1000, -1000, 989,
	101, -88, -1000, -1000, -1000, -1000, -1000, -1000, -203, 947,
	-1000, -1000, 932, 989, 8530, 1109, 1236, 12263, -1000, -1000,
	-1000, 9163, -1000, 989, 1091, 1091, 927, 897, 681, 1203,
	1219, -1000, 563, 1091, 8530, 702, -1000, 9163, 989, -1000,
	-1000, 1091, 989, 1091, 1091, 1134, 1263, -1000, 1241, -1000,
	687, 1383, 1349, 1366, 1443, -1000, -1000, -1000, -1000, 1399,
	-1000, 1393, -1000, -1000, -1000, -1000, -80, 473, 470, 432,
	20634, -1000, 1543, 15053, 1211, -1000, -1000, 1229, 30, -11,
	-1000, -1000, -1000, -1000, 750, 673, -1000, -1000, 1016, 7581,
	1224, 1439, -1000, -1000, -1000, -1000, -1000, -1000, 1346, 828,
	20634, 334, 471, 542, 380, 1006, -1000, -1000, -1000, 900,
	-1000, 20634, -1000, 1575, -1000, -1000, 333, -1000, 329, 710,
	944, 18154, 198, 1341, 10713, 915, -1000, -242, -1000, 58,
	-1000, -1000, 862, 100, 100, 1320, 100, 863, 100, 100,
	-1000, -1000, 581, 1444, 581, 581, 581, 581, 943, 943,
	-88, -88, -1000, -1000, -1000, 909, 1340, -1000, -1000, -1000,
	906, -1000, 1338, 18154, 20634, 1493, 1492, -1000, 7581, -1000,
	-1000, -1000, -1000, -1000, 1491, 1191, -1000, -1000, -1000, -1000,
	406, -1000, 1339, -1000, 813, 1216, 427, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 277, 495,
	-1000, 5871, -1000, 730, 18154, 18154, 1417, 750, 750, 555,
	-1000, -1000, 18154, -1000, -1000, -1000, -1000, 1213, -1000, -1000,
	-1000, 5529, 8530, -1000, 751, 1528, 429, -1000, 10093, 10093,
	119, -1000, -1000, -1000, 118, 117, 65, -1000, -203, -1000,
	1091, -1000, 8530, 750, -1000, -1000, -1000, 1932, 924, 1932,
	10093, 10093, 10093, 10093, 10093, 5187, -46, 1200, 695, -1000,
	9163, 948, -1000, -1000, -1000, -1000, -1000, 1365, 19084, 1263,
	-1000, 15363, 20634, 1537, 19084, 9163, 9163, -1000, -1000, 9163,
	1333, -1000, 9163, -1000, -1000, -1000, -1000, 1332, 1263, 1263,
	1263, 1061, -1000, 1537, 1211, -1000, -1000, -1000, -7, -8,
	-1000, 9163, -1000, 4845, -1000, 201, -1000, 18464, -1000, 1570,
	1525, 337, -10, -1000, 994, 977, -1000, 973, -1000, -1000,
	10, -1000, -184, 120, 13, -1000, -1000, 1263, -1000, 1331,
	1480, -1000, 1453, 901, -1000, 10403, -197, -1000, -1000, -203,
	-1000, -1000, -1000, 1263, -1000, 1330, 1325, -1000, 1319, 1263,
	526, -1000, -1000, -1000, -1000, -1000, 1164, 581, 581, 100,
	581, 1153, 1152, 581, 581, -1000, 638, -1000, -1000, -1000,
	-1000, 1087, -1000, 1081, -1000, -1000, 1220, -1000, 1067, 18154,
	20634, 1324, 1364, 1243, 1243, 1214, -1000, 669, 1517, 248,
	18154, 1548, 1548, 20634, -1000, 341, 20634, -1000, 20634, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 20634, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18154,
	-1000, -1000, -1000, -1000, -1000, 20634, 349, -1000, -1000, 937,
	9163, -1000, -1000, -1000, 7581, -1000, 1543, 15053, -1000, -1000,
	989, -1000, 10093, 1528, 1528, 52, 51, 50, -1000, 932,
	-1000, -1000, -1000, 989, 1320, 1320, -1000, 1320, 1321, -1000,
	-1000, 1320, 146, 1320, 144, 989, 989, 70, 392, 357,
	142, 196, -1000, 1263, -39, -1000, 750, 9163, -1000, 1471,
	1178, 1193, -1000, -1000, 8220, 989, 1063, 521, 1061, 1529,
	-1000, 750, 750, 750, 18774, 750, -180, 18774, 18774, 18774,
	14743, 20634, 1529, -1000, -1000, -1000, -1000, 750, 4161, -1000,
	7581, 1059, -1000, 298, 1320, 399, 399, -186, 310, 306,
	1263, -1000, -1000, -1000, -1000, -153, -1000, -1000, 710, -1000,
	1319, 9163, 18774, 112, -1000, 1210, 1151, 11023, -1000, 13503,
	-1000, 989, -1000, 818, -1000, 809, 1149, 7581, -1000, -1000,
	-1000, 581, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 100,
	929, 100, 899, -1000, 884, 1218, 1362, 14433, 18154, -1000,
	-1000, 7581, 4161, 410, 1519, -1000, -1000, 1515, -1000, 1185,
	1318, 20634, -1000, -1000, 336, -1000, 1307, -1000, -1000, -1000,
	-1000, 1479, 20634, -1000, -1000, 750, 1541, 1209, -1000, 1528,
	-1000, -1000, -1000, -1000, -1000, -1000, 281, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10093, 10093, -1000, 10093,
	10093, 10093, 989, 919, 750, 302, -1000, 1263, -1000, -1000,
	1195, 20634, 20634, -1000, -1000, 1054, -1000, -1000, 1052, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1050, 1050, 1050, 613,
	-1000, -1000, -1000, -1000, -1000, -1000, 1145, 18464, 1476, -1000,
	-1000, -1000, 766, -1000, -1000, 744, 236, 726, -1000, 20634,
	-153, 9163, -1000, 1263, 736, 1046, 9163, 1298, 883, -1000,
	1139, -1000, 101, -88, -1000, -1000, -1000, -1000, -1000, -1000,
	1263, -1000, 581, -1000, 581, 1137, 1131, 14433, 20634, 18154,
	1128, 1205, -1000, 297, 1293, -1000, -1000, 20634, -1000, -1000,
	-1000, -1000, -1000, 193, 2652, -1000, 12883, 1292, 1290, 18774,
	1263, 356, 1539, 1533, -1000, -1000, 70, 70, 70, 70,
	87, -1000, -1000, 1573, -1000, 1263, -1000, 1243, 517, -1000,
	20634, -1000, -1000, -180, -1000, -1000, -1000, -80, 1360, 1188,
	199, -1000, 969, 666, 898, 665, 664, 658, 652, 645,
	639, 633, -1000, -1000, -1000, 1566, -1000, -1000, -1000, 1549,
	1286, -1000, 1284, 736, 9163, 254, 1361, 962, -1000, 1116,
	1088, -1000, -1000, -1000, -1000, 1064, 1279, 1277, -188, 862,
	14433, 1136, -1000, 200, 2652, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1537, 20634, 20634, 20634, 20634, 403,
	9783, 9163, 1040, 11333, 12883, 12883, 11333, 12883, 12883, 18464,
	18464, 1039, 276, 291, -1000, 9163, 9163, -1000, -1000, -1000,
	-1000, 989, 207, -94, 19084, 1193, 989, 20634, -1000, -1000,
	-1000, -1000, 20634, -1000, -91, 1188, 20634, -1000, 852, -1000,
	-1000, 902, 842, 902, 902, 902, 902, 902, 399, 399,
	20634, 18464, 254, 736, -1000, -41, 1561, -104, 553, -1000,
	-1000, -188, 14433, 18464, 1543, 1276, 1014, -81, 20634, 9163,
	2633, -1000, 1529, 1187, 11953, -1000, -1000, -1000, -1000, 20634,
	1556, 1555, 1552, 1550, 2616, 294, 934, 160, -1000, -1000,
	11333, -1000, -1000, -1000, -1000, -1000, 1037, 1035, 945, 1028,
	-1000, 20634, 1273, 750, 1181, -1000, 1416, -62, -99, 1180,
	-1000, -1000, 1263, 1013, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 710, 710, 1005, 1002,
	-1000, 254, -1000, 399, 399, -1000, -1000, -1000, 192, 859,
	839, 822, 804, 80, -1000, 1532, 1543, 993, 1000, 1145,
	18774, -188, -1000, -207, -1000, 750, -1000, -1000, 2652, 1477,
	20634, 188, -1000, -1000, 1473, -1000, -1000, -1000, -1000, -1000,
	2652, 2652, 2652, -1000, 332, -82, -1000, 276, 1431, 18464,
	-1000, 1412, -1000, 20634, -1000, 1188, -1000, -1000, 344, 1145,
	-1000, -1000, -1000, 787, -1000, 778, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14123, 1145, 1543, 1145, 1360, 992, 1543,
	9163, -227, -1000, -1000, 12573, 1513, 20634, 2583, -1000, 138,
	2308, 163, -1000, 166, -1000, -1000, 271, 988, -86, 989,
	-1000, 18154, 1360, -1000, -1000, -1000, 515, 1360, 1145, -1000,
	-1000, -1000, 1145, 750, 694, 1243, -1000, -1000, -1000, 641,
	646, -1000, 176, -1000, 269, -1000, -97, -1000, 1272, -1000,
	7581, -1000, -1000, 1360, -1000, -1000, 377, 158, -1000, -1000,
	1263, -164, 20634, -1000, -1000, -1000, 2652, 9473, -1000, 984,
	2166, 70, 989, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1837, 16, 127, 1836, 1823, 1821, 1613, 1609, 1589,
	1587, 1820, 1819, 1817, 1816, 1815, 1814, 1812, 1809, 1807,
	1805, 1804, 1800, 1799, 1798, 1797, 1794, 1793, 883, 1792,
	1789, 1788, 106, 1783, 109, 1782, 1778, 69, 100, 76,
	77, 1887, 1776, 53, 118, 105, 1775, 84, 1774, 1767,
	157, 1766, 104, 1764, 1763, 1052, 1757, 1756, 33, 21,
	28, 43, 1753, 1751, 107, 74, 1750, 1749, 1748, 18,
	1746, 1745, 88, 44, 26, 36, 41, 1744, 140, 71,
	1743, 85, 1741, 1738, 1736, 1734, 24, 1732, 91, 42,
	19, 10, 1730, 7, 12, 102, 68, 45, 23, 126,
	103, 1728, 58, 101, 82, 1723, 1722, 995, 1721, 1720,
	1719, 1718, 1717, 1716, 791, 139, 1715, 1714, 1710, 78,
	0, 370, 65, 114, 1708, 73, 1707, 2344, 120, 92,
	46, 1706, 52, 237, 70, 1704, 1703, 67, 121, 5,
	119, 113, 1702, 108, 1701, 1698, 1697, 90, 94, 59,
	224, 31, 1695, 1693, 1692, 80, 93, 54, 87, 95,
	20, 1690, 1689, 1688, 56, 1687, 27, 29, 1, 86,
	1685, 1683, 1682, 1681, 37, 66, 1680, 50, 1679, 22,
	39, 9, 49, 8, 1677, 1674, 1671, 3, 1668, 40,
	1666, 4, 1665, 15, 1663, 1661, 1660, 57, 1659, 1657,
	1656, 14, 1655, 1653, 34, 13, 61, 47, 1652, 1650,
	72, 79, 55, 1649, 51, 6, 2, 30, 1648, 11,
	1647, 1646, 1644, 25, 32, 1643, 1641, 1640, 1625, 1623,
	1622, 48, 1621, 1618, 1699, 981, 1617, 1615, 116, 1611,
	1607, 1602, 1597, 603,
}

var yyR1 = [...]uint8{
	0, 232, 233, 233, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 236,
	236, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 220, 220, 219, 221, 221, 12, 12, 12, 12,
	12, 213, 213, 213, 213, 213, 13, 13, 216, 216,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	237, 237, 238, 238, 238, 238, 238, 238, 238, 211,
	211, 211, 212, 212, 212, 214, 214, 215, 215, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 218, 218,
	195, 195, 195, 196, 196, 196, 196, 196, 196, 198,
	198, 199, 199, 125, 125, 193, 193, 192, 191, 191,
	190, 190, 189, 200, 200, 20, 171, 172, 172, 172,
	172, 172, 172, 172, 159, 159, 139, 139, 139, 139,
	139, 139, 139, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 206,
	206, 206, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 208, 209, 202, 202, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	149, 149, 149, 149, 149, 149, 201, 201, 197, 197,
	197, 197, 197, 197, 197, 197, 143, 143, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 142, 142,
	142, 142, 142, 142, 142, 142, 144, 144, 144, 144,
	144, 144, 144, 144, 140, 140, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 158, 158, 147,
	147, 156, 156, 157, 157, 157, 148, 148, 148, 155,
	155, 155, 152, 152, 153, 153, 154, 154, 154, 150,
	150, 150, 151, 151, 151, 161, 182, 182, 182, 184,
	184, 185, 185, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 170, 170, 210, 210, 181, 181,
	181, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	169, 169, 179, 179, 180, 180, 177, 177, 177, 178,
	164, 164, 164, 164, 164, 165, 166, 166, 166, 166,
	162, 163, 204, 204, 204, 205, 205, 167, 167, 168,
	168, 175, 175, 175, 175, 239, 239, 173, 173, 174,
	174, 174, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 240, 240, 241, 241,
	241, 241, 241, 241, 241, 188, 186, 186, 187, 187,
	17, 18, 18, 18, 18, 18, 19, 19, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 112, 112, 109, 109, 110, 110, 111, 111,
	111, 113, 113, 113, 136, 136, 136, 23, 23, 25,
	25, 26, 27, 24, 24, 24, 24, 24, 242, 28,
	29, 29, 30, 30, 30, 34, 34, 34, 32, 32,
	33, 33, 39, 39, 38, 38, 40, 40, 40, 40,
	124, 124, 124, 123, 123, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 223, 223, 222, 222, 224, 224,
	224, 224, 224, 224, 57, 57, 93, 93, 93, 96,
	96, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 131, 131, 130, 130, 130, 129, 129, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 58, 58, 58, 58, 59, 59, 94, 94,
	41, 41, 41, 41, 41, 41, 41, 108, 108, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 71, 71, 71, 71, 71, 71, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 37, 37,
	72, 72, 72, 78, 73, 73, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 69, 69, 69, 69, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 243, 243, 70, 70, 70, 70, 35, 35, 35,
	35, 35, 134, 134, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 138, 82, 82, 36, 36,
	80, 80, 81, 83, 83, 79, 79, 79, 225, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 66,
	66, 66, 84, 84, 85, 85, 86, 86, 87, 87,
	88, 89, 89, 89, 90, 90, 90, 90, 91, 91,
	91, 63, 63, 63, 63, 63, 63, 92, 92, 92,
	92, 97, 97, 74, 74, 76, 76, 75, 77, 98,
	98, 102, 99, 99, 103, 103, 103, 103, 103, 101,
	101, 101, 126, 126, 126, 106, 106, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 121, 121,
	122, 122, 127, 127, 127, 128, 128, 226, 226, 226,
	227, 227, 227, 228, 228, 229, 230, 230, 231, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 234,
	235, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	7, 7, 5, 5, 5, 11, 11, 9, 5, 8,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 8, 8, 5, 8, 7, 4, 2,
	4, 6, 2, 1, 1, 2, 1, 1, 1, 3,
	3, 1, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 3,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 2, 2, 1, 1, 1, 3, 3, 2,
	1, 2, 1, 1, 1, 1, 4, 4, 4, 4,
	4, 1, 5, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 0, 2,
	5, 2, 3, 3, 2, 3, 2, 2, 3, 4,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 1,
	2, 5, 5, 8, 8, 13, 1, 1, 2, 2,
	10, 7, 0, 1, 1, 0, 3, 0, 1, 1,
	3, 0, 4, 1, 3, 2, 1, 1, 2, 1,
	1, 1, 6, 11, 13, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 4, 8, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 4, 5, 6, 4, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 3, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -232, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 31, -20,
	121, 122, 124, 123, 154, 125, 147, 52, 201, 202,
	204, 205, 26, 148, 149, 152, 153, -234, 8, 308,
	56, -233, 350, -86, 15, -30, 5, -28, -242, -28,
	-28, -28, -28, -28, -171, 56, -125, -200, 130, 163,
	300, 127, 143, 161, 162, 326, 128, 145, 75, -107,
	131, 133, 128, 128, 129, 131, 300, 127, 128, -55,
	-127, 59, -120, 61, 170, 317, 21, 201, 214, 215,
	206, 247, 235, 318, 168, 232, 236, 286, 349, 68,
	204, 295, 137, 174, 150, 227, 230, 229, 221, 218,
	28, 253, 324, 220, 140, 254, 258, 265, 287, 315,
	211, 212, 289, 251, 33, 142, 319, 37, 158, 290,
	256, 250, 245, 130, 249, 210, 244, 41, 224, 260,
	259, 261, 285, 238, 169, 264, 240, 222, 239, 18,
	153, 156, 255, 257, 219, 171, 135, 160, 323, 291,
	217, 157, 172, 152, 294, 340, 167, 205, 288, 213,
	297, 40, 271, 231, 208, 223, 209, 139, 202, 165,
	242, 159, 225, 226, 248, 207, 243, 203, 161, 154,
	296, 272, 325, 241, 237, 233, 234, 166, 131, 163,
	164, 278, 279, 280, 281, 321, 292, 228, 273, 274,
	176, 177, 178, 179, 180, 181, 182, 34, 35, 128,
	115, 236, 121, 276, 129, 33, 160, -136, 128, -109,
	164, 278, 279, 280, 281, 59, 288, 287, 282, -127,
	203, -132, -132, -132, -132, -132, -2, -90, 17, 16,
	-5, -3, -234, 6, 21, 22, -34, 42, 43, -29,
	-40, 106, -41, -127, -60, 77, -65, 29, 59, -120,
	61, 24, -64, -61, -79, -225, -77, -78, 115, 116,
	104, 105, 112, 78, 117, -69, -67, -68, -70, -228,
	-121, 60, 69, 62, 63, 64, 65, 70, 71, 72,
	298, -75, -234, 46, 47, 309, 310, 311, 312, 316,
	313, 80, 36, 299, 307, 306, 305, 303, 304, 301,
	302, 348, 134, 300, 110, 308, 262, -107, -43, -44,
	-45, -46, -57, -78, -234, -55, 11, -50, -55, -99,
	-135, 203, -103, 288, 287, -122, 298, -101, -121, -119,
	286, 236, 285, 59, -120, 126, 184, 329, 76, 23,
	25, 269, 275, 183, 79, 115, 16, 80, 190, 338,
	339, 114, 309, 121, 50, 301, 302, 299, 188, 311,
	312, 300, 276, 195, 20, 29, 10, 26, 148, 22,
	108, 123, 185, 83, 84, 151, 24, 149, 72, 191,
	193, 19, 53, 141, 11, 328, 13, 14, 342, 330,
	134, 133, 95, 341, 129, 48, 8, 117, 27, 92,
	44, 146, 194, 46, 93, 17, 303, 304, 32, 316,
	155, 110, 51, 38, 343, 77, 344, 70, 54, 293,
	189, 75, 15, 49, 345, 143, 192, 94, 124, 308,
	47, 186, 346, 127, 187, 6, 314, 31, 147, 45,
	128, 277, 82, 132, 71, 162, 5, 145, 9, 52,
	55, 305, 306, 307, 36, 81, 12, 144, 320, 73,
	-172, -159, -121, 61, -204, 338, 339, 131, 131, -121,
	-115, 134, -115, -121, -121, -55, 128, -115, 308, 128,
	-55, -55, -114, 134, 59, -114, -114, -114, -55, 118,
	-55, 59, 31, 300, 59, 160, 128, 161, 131, -133,
	-234, -122, -133, -133, -133, 165, 166, -133, -110, 283,
	54, -133, -235, 58, -91, 19, 32, -41, -127, -87,
	-88, -41, -86, -2, -28, 38, -32, 22, 67, 11,
	-124, 76, 75, 92, -123, 23, -121, 61, 118, -41,
	-62, 95, 77, 93, 94, 79, 101, 100, 111, 104,
	105, 106, 107, 108, 109, 110, 102, 103, 114, 348,
	85, 86, 87, 88, 89, 90, 91, 96, 97, 98,
	99, -108, -234, -197, 348, -78, -234, 119, 120, -65,
	-65, -65, -65, -65, -65, -65, -229, 263, -234, 61,
	118, -2, -73, -41, -234, -234, -234, -234, -234, -234,
	-234, -234, -234, -82, -41, -234, -243, -234, -243, -243,
	-243, -243, -243, -243, -243, -138, 115, 236, 150, 227,
	-141, -140, 242, 241, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 235, 318, -234, -234, -234, -234,
	-56, 27, -55, 31, 57, -51, -53, -52, -54, 44,
	48, 50, 45, 46, 47, 51, -131, 23, -43, -234,
	-130, 156, -129, 23, -127, 61, -55, -50, -236, 57,
	11, 55, 57, -99, 203, -100, -104, 289, 291, 85,
	118, -126, -121, 61, 29, 31, 58, 57, -160, -139,
	-143, -140, -145, -144, -146, -121, -141, -142, 235, 318,
	232, 236, 233, 238, 239, 240, 115, 237, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 241,
	253, 31, 150, 225, 226, 227, 230, 229, 231, 228,
	254, 255, 256, 257, 258, 259, 260, 261, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 217, 218,
	220, 221, 222, 224, 223, -160, 129, -115, -115, -193,
	55, 59, 77, 59, 54, -211, 54, 19, 183, 184,
	23, -115, -55, -55, 293, -133, 132, -55, 24, 54,
	-55, 59, 59, -128, -127, -119, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -112, 277, 284, -55,
	9, 95, 57, 18, 118, 57, -89, 25, 26, -90,
	-235, -34, -66, -121, 62, 65, -33, 45, -55, -41,
	-41, -71, 70, 77, 71, 72, -123, 106, -128, -122,
	-119, -65, -72, -75, -78, 66, 95, 93, 94, 79,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -134, 59, 61, -143, 226,
	-138, -141, 217, 218, 220, 221, 222, 224, 223, 59,
	236, 226, 266, 117, 242, 251, 252, -64, 61, -121,
	-64, -121, 351, -39, 22, -73, -38, -41, -40, -122,
	-235, 57, -235, -2, -38, -38, -41, -41, -79, -65,
	-79, -121, -127, -38, -32, -80, -81, 81, -79, -235,
	234, -38, -39, -38, -38, -95, 156, -55, -98, -102,
	-79, -44, -45, -45, -44, -45, 44, 44, 44, 49,
	44, 49, 44, -52, -127, -235, -58, 52, 133, 53,
	-234, -129, -95, 55, -43, -55, -103, -100, 57, 290,
	292, 293, 54, 73, -41, -122, -151, 115, 114, -175,
	-239, 321, 35, -159, -161, -164, -162, -163, -176, -165,
	137, 135, 139, 140, 145, -169, 129, 146, 70, 77,
	-206, 137, -208, 54, 269, 275, 135, 146, 145, 349,
	68, 138, 328, 330, 29, 30, -154, 351, 263, -152,
	272, -147, 56, -147, -147, 234, -148, 56, -147, -148,
	-147, -148, -150, 236, -150, -150, -150, -150, 56, 56,
	-147, -147, -147, -147, -156, 56, 219, -156, -156, -157,
	56, -157, -121, 54, 200, -55, -55, -191, 320, -192,
	59, -133, 24, -133, -55, -214, -212, 8, 9, 10,
	-55, -139, -55, -116, 126, 123, 124, -188, 122, 269,
	236, 68, 29, 15, 309, 156, 325, 59, 157, -55,
	-55, -55, -133, -111, 11, 95, 40, -41, -41, -128,
	-88, -91, -106, 19, 11, 36, 36, -38, 70, 71,
	72, 118, -234, -72, -65, -65, -65, -37, 151, 76,
	320, -235, 234, -155, 320, 321, -230, -231, 61, -235,
	-38, -235, 57, -41, -235, -235, -235, 57, 55, 23,
	57, 11, 57, 57, 11, 118, -235, -38, -83, -81,
	83, -41, -235, -235, -235, -235, -235, -63, 31, 36,
	-2, -234, -234, -59, 57, 12, 85, -48, -47, 54,
	55, -49, 54, -47, 44, 44, -223, 320, 129, 129,
	129, -96, -121, -59, -43, -59, -104, -105, 294, 291,
	297, 85, 59, -173, -122, 57, 34, 56, -205, 54,
	77, -167, -121, 146, -169, -169, 59, -169, 59, 129,
	59, 70, 19, -121, 9, 146, 146, -205, 61, -55,
	-202, 329, 16, 56, -207, 56, 61, 62, 63, 70,
	-149, 69, -61, 264, -69, 299, 302, 301, 265, -121,
	-127, -209, 62, 352, -153, 273, 62, -150, -150, -147,
	-150, 62, 74, -150, -150, -151, 31, -151, -151, -151,
	-151, -158, 61, -158, -155, -155, 62, -156, 62, 54,
	55, -55, -121, 23, 23, -190, -189, -122, -195, 23,
	54, 57, -211, 55, -132, -125, 137, -241, 163, 136,
	141, 140, 59, 135, 139, 156, -194, 163, 136, 137,
	141, 140, 59, 129, 146, 135, 139, 156, 145, -117,
	-118, 132, 23, 129, 146, 156, 126, -133, -113, 93,
	12, -127, -127, 41, 118, -55, -42, 11, 106, -122,
	-39, -37, 76, -65, -65, 225, 225, 225, 352, 57,
	-197, -235, -40, -137, 115, 232, 150, 227, 221, 251,
	252, 238, 271, 225, 272, -134, -137, -65, -65, -65,
	-65, -65, -122, 317, -86, 84, -41, 82, -97, 54,
	-98, -74, -76, -75, -234, -2, -92, -121, -96, -86,
	-102, -41, -41, -41, 56, -41, 56, -234, -234, -234,
	-235, 57, -86, -59, 291, 295, 296, -41, 85, -122,
	-175, -180, -177, -121, 146, 10, 9, 19, 141, 135,
	349, 59, 59, 59, -204, 145, 340, -206, 349, -149,
	265, -234, 56, 23, 29, 62, -207, 56, -197, 348,
	-197, -234, -147, 56, -147, 56, 56, 118, 58, -151,
	-151, -150, -151, 58, 58, -151, -151, 59, 115, 58,
	57, 58, 57, 58, 57, -55, -121, 56, 54, -2,
	-2, 57, 85, -196, 19, 171, 172, -55, -212, -214,
	-121, -240, 129, 146, -121, -132, -121, -132, -121, -55,
	-132, -121, 137, -164, 61, -41, -59, -43, -235, -65,
	274, 274, 274, -231, -235, -147, -147, -147, -157, -147,
	212, -147, 212, -235, -235, -235, 19, 57, -235, 57,
	19, -234, -36, 314, -41, 28, -97, 57, -235, -235,
	-235, 57, 118, -235, -90, -93, -121, 146, -222, -224,
	342, 343, 344, 345, 346, 347, -93, -93, -93, -130,
	-121, -90, -174, -122, 61, 62, 58, 57, -147, -178,
	267, -147, -166, 167, 168, 31, 169, -166, 340, 146,
	146, -234, -204, -205, -41, -93, 56, 330, 57, 58,
	-207, -121, 236, 226, 242, 251, -235, 58, 58, 58,
	-122, -151, -150, 61, -150, 62, 62, 56, 55, 54,
	-179, -180, -69, -121, -55, -189, -174, 132, 21, 6,
	8, 9, 10, 19, 23, -237, 56, -121, 145, 56,
	27, -121, -84, 13, -150, 59, -65, -65, -65, -65,
	-65, -235, 61, 146, -76, 36, -2, -234, -121, -121,
	57, 58, 58, 57, -235, -235, -235, -58, -182, -184,
	320, -183, 55, 142, 68, 176, 177, 178, 179, 180,
	181, 182, -177, -89, -205, 54, 70, 170, -205, 54,
	-167, -121, -204, -41, -234, -235, 58, -41, 56, 62,
	58, -151, -151, 58, 58, -179, -121, -55, 58, 56,
	56, -168, -121, 185, -215, -217, -7, -9, -8, -11,
	-10, -12, -13, -14, -3, 20, 189, 190, 195, 191,
	144, 134, -238, -121, 104, 85, 61, -159, 57, 56,
	56, -93, -234, 135, -85, 14, 16, -235, -235, -235,
	-235, -35, 95, 320, 9, -74, -2, 118, -121, -224,
	-223, -181, 54, -183, 320, 56, 322, 59, -170, 85,
	61, 85, 85, 85, 85, 85, 85, 85, 9, 10,
	56, 56, -235, -41, -201, 169, 54, 58, -203, 58,
	58, 58, 56, 56, -94, 341, -179, -198, 57, 55,
	186, -217, -86, -220, -121, -219, -121, -121, -121, -213,
	38, 192, 193, 194, -60, -65, -41, -60, 58, -238,
	-121, -238, -238, -238, -238, -238, -180, -180, 58, -186,
	-187, 156, 146, -41, -73, -235, 318, 51, 323, -98,
	-235, -121, -121, -185, -183, -121, 62, -210, 54, 73,
	62, -210, -210, -210, -210, -210, -166, -166, -168, -180,
	-201, -235, 315, 10, 9, 326, 327, 58, 202, 332,
	333, 155, 334, 169, 335, 336, -94, -179, -180, -59,
	56, 58, -199, 320, -121, -41, -218, -217, 201, -90,
	57, -221, -139, 187, -121, 11, 11, 11, 11, -217,
	201, 82, 201, 58, 58, -193, -235, 57, -121, 56,
	41, 319, 324, -234, 58, 57, -205, -205, 58, 58,
	-201, -166, -166, 320, 62, 16, 62, 62, 62, 62,
	333, 155, 335, 16, -59, 58, 58, -182, -93, -94,
	349, -217, -91, -219, -121, 188, 27, -216, -217, -215,
	-216, -226, 196, 77, -191, -187, 36, -180, 41, -121,
	-183, 138, -182, 62, 62, 337, -127, -182, -59, -182,
	-181, 58, -59, -41, 350, 19, -121, 84, -217, 350,
	84, -227, 197, 196, 158, 58, 320, -235, -55, -181,
	118, -181, -182, -182, 84, -2, 84, 83, 199, 198,
	159, 323, 56, -122, -181, 134, 201, -234, 324, -168,
	-216, -65, 155, 58, 84, -235, -235,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 776, 0, 508, 508, 508, 508, 508, 508, 0,
	-2, 831, 0, 0, 0, 0, -2, 498, 499, 0,
	501, 502, 1131, 1131, 1131, 1131, 1131, 0, 33, 34,
	1129, 1, 3, 784, 0, 0, 512, 515, 510, 863,
	831, 0, 0, 0, 84, 157, 392, 0, 0, 0,
	829, 829, 0, 0, 0, 0, 829, 144, 0, 0,
	0, 832, 0, 827, 0, 827, 827, 827, 0, 457,
	590, 852, 853, 854, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 0,
	0, 0, 0, 1132, 1132, 1132, 1132, 0, 1132, 486,
	475, 477, 478, 479, 480, 1132, 495, 496, 485, 497,
	500, 503, 504, 505, 506, 507, 27, 788, 863, 863,
	776, 29, 0, 508, 513, 514, 518, 516, 517, 509,
	0, 526, 530, 0, 600, 863, 605, 607, -2, -2,
	-2, 0, 646, 647, 648, 649, 650, 651, 863, 863,
	863, 863, 863, 863, 863, 678, 679, 680, 681, 0,
	755, 762, 763, 764, 765, 766, 767, 768, 609, 610,
	0, 808, 863, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 711, 711, 711, 711, 711, 711, 711,
	711, 0, 0, 0, 0, 0, 864, 0, 0, 537,
	539, 540, 541, 571, 0, 573, 0, 0, 41, 45,
	0, 1097, 812, -2, -2, 0, 0, 0, 850, 851,
	-2, 1006, -2, 848, 849, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	0, 158, 172, 172, 0, 393, 394, 829, 829, 145,
	0, 0, 0, 0, 0, 0, 829, 0, 154, 0,
	1132, 0, 0, 0, 0, 0, 0, 0, 456, 0,
	458, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 467,
	1133, 1134, 468, 469, 470, 1132, 1132, 472, 0, 487,
	0, 481, 28, 1130, 22, 0, 0, 785, 0, 777,
	778, 781, 784, 27, 515, 0, 520, 519, 511, 0,
	527, 863, 863, 0, 531, 0, 533, 534, 0, 603,
	863, 0, 0, 863, 863, 863, 863, 863, 863, 863,
	863, 863, 863, 863, 863, 863, 863, 863, 0, 0,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 606, 0, 760, 0, 620, 0, 0, 0, 669,
	670, 671, 672, 673, 674, 675, 682, 0, -2, 761,
	0, 27, 0, 644, 863, 863, 863, 863, 863, 863,
	0, 863, 518, 0, 747, 0, 702, 0, 703, 704,
	705, 706, 707, 708, 709, 710, 738, 0, 740, 741,
	742, 743, 744, 745, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 274, 275, 863, -2, 863, 863,
	43, 0, 589, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 0, 0, 0, 572, 0, 0,
	592, 1061, 574, 0, 576, 577, -2, 0, 0, 0,
	39, 40, 0, 46, 1097, 48, 73, 0, 0, 863,
	0, 332, 822, 823, 824, 820, 401, 0, 164, 326,
	322, 167, 168, 169, 170, 171, 309, 247, -2, -2,
	-2, -2, -2, -2, -2, -2, 309, -2, -2, -2,
	-2, -2, 329, -2, -2, -2, -2, -2, 295, -2,
	1021, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 165, 0, 0, 0, 148,
	0, 1132, 0, 1132, 0, 0, 0, 109, 110, 111,
	172, 0, 155, 0, 0, 423, 0, 451, 828, 0,
	1132, 454, 455, 591, 855, 856, 459, 460, 461, 462,
	463, 464, 465, 466, 471, 474, 488, 482, 483, 476,
	789, 0, 863, 863, 0, 863, 780, 782, 783, 788,
	30, 518, 0, 769, 0, 0, 863, 521, 25, 601,
	602, 604, 621, 0, 623, 625, 532, 528, 0, 756,
	-2, 611, 612, 640, 641, 642, 0, 863, 863, 863,
	638, 616, 0, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 666, 722, 723, 667, 0,
	677, 309, 311, 311, 311, 313, 313, 264, 265, 0,
	0, 319, 241, 242, 243, 244, 245, 664, 238, 0,
	665, 676, 0, 0, 863, 0, 523, 530, 524, 758,
	643, 863, 807, 27, 0, 0, 0, 0, 648, 0,
	0, 755, 0, 0, 863, 753, 750, 863, 0, 712,
	739, 0, 0, 0, 0, 0, 0, 588, 596, 809,
	0, 538, 567, 569, 0, 564, 579, 580, 582, 0,
	584, 0, 586, 587, 542, 543, 544, 0, 0, 0,
	0, 575, 596, 0, 596, 42, 813, 47, 0, 0,
	76, 77, 814, 815, 816, 0, 818, 333, 0, 156,
	403, 0, 406, 159, 160, 161, 162, 163, 0, 395,
	-2, 1066, 1087, 1024, 0, 0, 370, 371, 174, 0,
	176, 0, 178, 0, 180, 181, 0, 183, 185, 395,
	0, 0, 0, 0, 0, 0, 173, 0, 328, 324,
	323, 246, 0, 329, 329, 309, 329, 0, 329, 329,
	283, 284, 332, 0, 332, 332, 332, 332, 0, 0,
	319, 319, 269, 271, 258, 0, 311, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 0, 92, 0, 146,
	147, 93, 830, 94, 130, 0, 115, 112, 113, 114,
	0, 98, 0, 1131, 143, 0, 843, 424, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 0, 0,
	450, 1132, 453, 491, 0, 0, 0, 786, 787, 0,
	779, 23, 0, 825, 826, 770, 771, 535, 622, 624,
	626, 0, -2, 613, 638, 617, 0, 614, 863, 863,
	0, 608, 239, 240, 0, 0, 0, 866, 238, 683,
	0, 686, 863, 645, -2, 687, 688, 0, 0, 0,
	863, 863, 863, 863, 863, 0, 0, 776, 0, 751,
	863, 0, 701, 713, 714, 715, 716, 801, 0, 0,
	-2, 0, 0, 776, 0, 863, 863, 561, 568, 863,
	0, 562, 863, 563, 583, 585, 554, 0, 0, 0,
	0, 0, 559, 776, 596, 38, 74, 75, 0, 0,
	81, 863, 334, 0, 407, 401, 405, 0, 380, 0,
	0, 0, 398, 361, 0, 0, 364, 0, 366, -2,
	392, 175, 0, 0, 0, 182, 184, 0, 188, 189,
	0, 214, 0, 0, 199, 0, -2, 203, 204, 238,
	206, 207, 208, 1055, 211, 309, 309, 234, 1027, 0,
	0, 212, 213, 327, 166, 325, 0, 332, 332, 329,
	332, 0, 0, 332, 332, 285, 0, 286, 287, 288,
	289, 0, 307, 0, 267, 268, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 149, 150, 0, 133, 0,
	0, 0, 0, 0, 412, 0, 0, 1131, 0, 438,
	439, 440, 441, 442, 443, 444, 1131, 0, 425, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 0,
	1131, 844, 845, 846, 847, 0, 0, 452, 473, 0,
	863, 489, 490, 790, 0, 24, 596, 0, 529, 757,
	0, 615, 863, 639, 618, 0, 0, 0, 865, 0,
	868, 684, 525, 0, 309, 309, 727, 309, 313, 730,
	731, 309, 733, 309, 736, 0, 0, 0, 0, 0,
	0, 0, 756, 0, 748, 700, 754, 863, 31, 0,
	801, 791, 803, 805, 863, 27, 0, 797, 0, 784,
	810, 597, 811, 565, 0, 570, 0, 0, 0, 0,
	573, 0, 784, 37, 78, 79, 80, 817, 0, 408,
	404, 0, 374, 309, 309, 0, 0, 0, 0, 0,
	0, 362, 363, 365, 368, 392, 198, 177, 395, 179,
	0, 863, 0, 0, 215, 0, 0, 0, 202, 0,
	205, 0, 230, 0, 232, 0, 0, 0, 310, 276,
	277, 332, 278, 317, 318, 279, 280, 330, 331, 329,
	0, 329, 0, 314, 0, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 0, 131, 132, 0, 116, 0,
	100, 0, 436, 437, 0, 417, 0, 418, 420, 421,
	422, 0, 397, 416, 492, 493, 772, 536, 685, 619,
	668, 320, 321, 867, 689, 724, 329, 728, 729, 732,
	734, 735, 737, 691, 690, 692, 863, 863, 695, 863,
	863, 863, 0, 0, 752, 0, 32, 0, 806, -2,
	0, 0, 0, 44, 35, 0, 556, 557, 0, 546,
	548, 549, 550, 551, 552, 553, 0, 0, 0, 592,
	560, 36, 402, 409, 410, 411, 336, 0, 781, 378,
	379, 377, 395, 386, 387, 0, 0, 395, 396, 397,
	392, 863, 369, 0, 0, 0, 863, 195, 0, 200,
	0, 210, 1006, 319, 243, 244, 209, 231, 233, 235,
	0, 282, 332, 308, 332, 0, 0, 0, 0, 0,
	0, 372, 373, 309, 0, 151, 152, 0, 134, 135,
	136, 137, 138, 0, 0, 99, 102, 0, 0, 0,
	0, 398, 774, 0, 725, 726, 0, 0, 0, 0,
	717, 699, 749, 0, 804, 0, -2, 0, 799, 798,
	0, 566, 545, 0, 593, 594, 595, 544, 358, 337,
	0, 339, 0, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 375, 376, 381, 0, 388, 389, 382, 0,
	0, 398, 0, 0, 863, 236, 190, 0, 216, 0,
	0, 297, 298, 312, 315, 0, 0, 0, 598, 1129,
	0, 139, 399, 0, 97, 117, 119, 120, 121, 122,
	123, 124, 125, 126, 776, 0, 0, 0, 0, 61,
	863, 863, 0, -2, 102, 102, -2, 102, 102, 0,
	0, 0, 0, 0, 26, 863, 863, 694, 693, 696,
	697, 0, 0, 0, 0, 794, 27, 0, 558, 547,
	555, 335, 0, 340, 0, 0, 0, 343, 0, 355,
	345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 186, 0, 0, 0, 0, 197,
	201, 598, 0, 0, 596, 0, 0, 141, 0, 863,
	0, 118, 784, 49, -2, 51, 56, 57, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 101, 103,
	-2, 104, 105, 106, 107, 108, 0, 0, 145, 0,
	446, 0, 0, 775, 773, 698, 0, 0, 0, 802,
	-2, 800, 359, 0, 341, 346, 344, 347, 356, 357,
	348, 349, 350, 351, 352, 353, 395, 395, 0, 0,
	391, 236, 237, 0, 0, 193, 194, 196, 0, 0,
	0, 0, 0, 0, 227, 0, 596, 0, 0, 336,
	0, 598, 95, 0, 400, 140, 96, 128, 0, 788,
	0, 0, 53, 55, 59, 62, 63, 64, 65, 66,
	0, 0, 0, 413, 857, 148, 445, 0, 0, 0,
	718, 0, 721, 0, 338, 0, 383, 384, 0, 336,
	187, 191, 192, 0, 218, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 336, 596, 336, 358, 0, 596,
	863, 0, 127, 52, 172, 0, 0, 0, 68, 0,
	0, 860, 858, 0, 419, 447, 0, 0, 719, 0,
	342, 0, 358, 217, 219, 228, 0, 358, 336, 88,
	86, 599, 336, 142, 0, 0, 60, 67, 69, 0,
	71, 415, 0, 859, 0, 414, 0, 360, 0, 390,
	0, 85, 89, 358, 129, -2, 0, 0, 861, 862,
	0, 0, 0, 229, 87, 70, 0, 863, 720, 0,
	0, 0, 0, 385, 72, 448, 449,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 109, 101, 3,
	56, 58, 106, 104, 57, 105, 118, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 350,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 351, 3, 352, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:388
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:393
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:394
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:398
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:421
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:429
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:433
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:446
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:452
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:456
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:462
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:466
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:473
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:485
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:497
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:501
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:507
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:513
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:517
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:521
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:527
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:531
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:535
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:540
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:544
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:550
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:554
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:558
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:562
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:568
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:572
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:585
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:589
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:595
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:600
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:604
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:617
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:624
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:631
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:639
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:649
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:653
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:665
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:671
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:678
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:688
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:692
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:699
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:708
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:716
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:727
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:731
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:737
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:741
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:745
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:751
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:755
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:759
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:763
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:769
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:773
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:779
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:784
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:804
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:824
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:845
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:861
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:877
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:885
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:893
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:901
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:905
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:909
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:921
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 97:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:932
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:943
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:954
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:959
		{
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:960
		{
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:964
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:967
		{
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:968
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:969
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:970
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:974
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:978
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:982
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:988
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:992
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:996
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1002
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1006
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1012
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1016
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1022
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1033
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1045
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1052
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1056
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1060
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1065
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1069
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1073
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1077
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1081
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1085
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1090
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1094
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1099
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1103
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1108
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1112
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1117
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1121
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1127
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1132
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1137
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1143
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1148
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1154
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1159
		{
			yyVAL.bytes = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1169
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1176
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1182
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1186
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1191
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1195
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1199
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1203
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1207
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1213
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1218
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1224
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1235
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1240
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1246
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1259
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1264
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1269
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1274
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1280
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1285
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1290
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1295
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1300
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1305
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1310
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1315
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1320
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1329
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1339
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1344
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1349
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1356
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1363
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1371
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1376
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1382
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1388
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1394
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1400
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1407
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1411
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1415
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1421
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1425
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1429
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1433
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1437
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1441
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1445
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1449
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1453
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1457
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1463
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1469
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1475
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1479
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1484
		{
			yyVAL.sequence = &Sequence{}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1488
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1493
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1498
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1503
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1508
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1513
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1518
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1523
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1528
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1533
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1538
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1543
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1548
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1555
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1559
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1563
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1567
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1571
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1575
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1580
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1584
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1589
		{
			yyVAL.bytes = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1602
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1607
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1874
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1879
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1884
		{
			yyVAL.optVal = nil
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1888
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1893
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1897
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1905
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1909
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1915
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1923
		{
			yyVAL.optVal = nil
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1927
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1931
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1945
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1950
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1954
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1959
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1963
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1968
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1972
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1976
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1981
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1985
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1989
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1994
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1998
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2002
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2008
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2013
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2017
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2021
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2027
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2031
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2037
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2041
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2047
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2051
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2056
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2060
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2064
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2068
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2072
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2076
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2080
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2084
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2088
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2094
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2098
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2104
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2108
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2114
		{
			yyVAL.indexPartition = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2118
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2122
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2148
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2152
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2156
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2160
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2176
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2181
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2187
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2191
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2197
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2202
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2206
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2216
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2221
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2228
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 383:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2235
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 384:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2242
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 385:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2251
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2263
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2271
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2275
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 390:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2281
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2292
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2302
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2306
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2310
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2316
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2320
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2325
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2332
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2336
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2343
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2347
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2353
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2357
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2362
		{
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2363
		{
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2367
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2371
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2377
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2381
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2385
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2391
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2395
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 414:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2409
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 415:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2423
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2442
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 417:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2451
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 418:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2455
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 419:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2459
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2472
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2482
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2487
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2492
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2496
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2528
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2534
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2538
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2544
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 449:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2548
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2554
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2560
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2568
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2573
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2581
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2585
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2591
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2595
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2600
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2647
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2651
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2655
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2663
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2673
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2697
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2707
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2713
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2723
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2727
		{
			yyVAL.str = "extended "
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2733
		{
			yyVAL.str = ""
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2737
		{
			yyVAL.str = "full "
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2743
		{
			yyVAL.str = ""
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2747
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2751
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2757
		{
			yyVAL.showFilter = nil
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2761
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2765
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2771
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2775
		{
			yyVAL.str = SessionStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2779
		{
			yyVAL.str = GlobalStr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2785
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2789
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2795
		{
			yyVAL.statement = &Begin{}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2799
		{
			yyVAL.statement = &Begin{}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2805
		{
			yyVAL.statement = &Commit{}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2811
		{
			yyVAL.statement = &Rollback{}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2817
		{
			yyVAL.statement = &OtherRead{}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2821
		{
			yyVAL.statement = &OtherRead{}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2825
		{
			yyVAL.statement = &OtherRead{}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2829
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2833
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2838
		{
			setAllowComments(yylex, true)
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2842
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2848
		{
			yyVAL.bytes2 = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2852
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2858
		{
			yyVAL.str = UnionStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2862
		{
			yyVAL.str = UnionAllStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2866
		{
			yyVAL.str = UnionDistinctStr
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2871
		{
			yyVAL.str = ""
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2875
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2879
		{
			yyVAL.str = SQLCacheStr
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2884
		{
			yyVAL.str = ""
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2888
		{
			yyVAL.str = DistinctStr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2893
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2897
		{
			yyVAL.str = StraightJoinHint
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2902
		{
			yyVAL.selectExprs = nil
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2906
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2912
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2916
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2922
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2926
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2930
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2934
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2939
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2943
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2947
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2959
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2963
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2969
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2973
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2983
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2987
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2991
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2996
		{
			yyVAL.strs = []string{}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3000
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3006
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3010
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3016
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3042
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 555:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3046
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3052
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3057
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3061
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3067
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3071
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3084
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3088
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3092
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3096
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3102
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3104
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3108
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3114
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3116
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3119
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3121
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3124
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3128
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3132
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3139
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3145
		{
			yyVAL.str = JoinStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3149
		{
			yyVAL.str = JoinStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3153
		{
			yyVAL.str = JoinStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3159
		{
			yyVAL.str = StraightJoinStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3165
		{
			yyVAL.str = LeftJoinStr
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3169
		{
			yyVAL.str = LeftJoinStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3173
		{
			yyVAL.str = RightJoinStr
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3177
		{
			yyVAL.str = RightJoinStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3183
		{
			yyVAL.str = NaturalJoinStr
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3187
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3197
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3201
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3207
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3211
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3216
		{
			yyVAL.indexHints = nil
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3220
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3224
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3228
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3233
		{
			yyVAL.expr = nil
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3237
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3242
		{
			yyVAL.columns = nil
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3246
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3252
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3256
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3260
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3264
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3268
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3272
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3276
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3282
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3286
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3292
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3296
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3302
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3306
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3310
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3314
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3318
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3322
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3326
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3330
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3334
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3338
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3344
		{
			yyVAL.str = IsNullStr
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3348
		{
			yyVAL.str = IsNotNullStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3352
		{
			yyVAL.str = IsTrueStr
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3356
		{
			yyVAL.str = IsNotTrueStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3360
		{
			yyVAL.str = IsFalseStr
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3364
		{
			yyVAL.str = IsNotFalseStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3370
		{
			yyVAL.str = EqualStr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3374
		{
			yyVAL.str = LessThanStr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3378
		{
			yyVAL.str = GreaterThanStr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3382
		{
			yyVAL.str = LessEqualStr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3386
		{
			yyVAL.str = GreaterEqualStr
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3390
		{
			yyVAL.str = NotEqualStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3394
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3398
		{
			yyVAL.str = PosixRegexStr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3402
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3406
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3410
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3415
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3419
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3425
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3429
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3433
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3439
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3445
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3449
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3455
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3459
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3463
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3467
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3471
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3475
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3483
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3487
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3491
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3495
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3499
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3503
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3507
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3511
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3515
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3519
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3523
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3527
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3531
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3535
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3539
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3543
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3547
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3551
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3555
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3563
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3577
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3581
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3585
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3593
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3601
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3609
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3619
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3623
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 685:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3627
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3631
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3649
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 690:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3653
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 691:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3657
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 692:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3661
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 693:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3665
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 694:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3669
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 695:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3673
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 696:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3677
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 697:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3681
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 698:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3685
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 699:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3689
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3693
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3697
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3707
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3711
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3719
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3729
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3734
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3743
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3761
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3775
		{
			yyVAL.str = ""
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3779
		{
			yyVAL.str = BooleanModeStr
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3783
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 720:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3787
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3791
		{
			yyVAL.str = QueryExpansionStr
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3797
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3845
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3849
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3861
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3875
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3883
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3887
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3891
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3895
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3900
		{
			yyVAL.expr = nil
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3904
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3909
		{
			yyVAL.str = string("")
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3913
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3919
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3923
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3929
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3934
		{
			yyVAL.expr = nil
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3938
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3944
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3948
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3952
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3958
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3964
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3968
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3973
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3978
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3982
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3986
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3990
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3994
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3998
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4002
		{
			yyVAL.expr = &NullVal{}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4008
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4017
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4021
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4026
		{
			yyVAL.exprs = nil
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4030
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4035
		{
			yyVAL.expr = nil
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4039
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4044
		{
			yyVAL.orderBy = nil
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4048
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4054
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4058
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4064
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4069
		{
			yyVAL.str = AscScr
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4073
		{
			yyVAL.str = AscScr
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4077
		{
			yyVAL.str = DescScr
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4082
		{
			yyVAL.limit = nil
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4086
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4090
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4094
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4099
		{
			yyVAL.str = ""
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4103
		{
			yyVAL.str = ForUpdateStr
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4107
		{
			yyVAL.str = ShareModeStr
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4120
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4124
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4128
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4133
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4137
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4141
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4148
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4152
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4156
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4160
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4165
		{
			yyVAL.updateExprs = nil
		}
	case 802:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4169
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4175
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4179
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4185
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4189
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4195
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4201
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4211
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4215
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4221
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4227
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4231
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4237
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4241
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4245
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 817:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4250
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4254
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4261
		{
			yyVAL.bytes = []byte("charset")
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4268
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4272
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4276
		{
			yyVAL.expr = &Default{}
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4285
		{
			yyVAL.byt = 0
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4287
		{
			yyVAL.byt = 1
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4290
		{
			yyVAL.empty = struct{}{}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4292
		{
			yyVAL.empty = struct{}{}
		}
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4295
		{
			yyVAL.str = ""
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4297
		{
			yyVAL.str = IgnoreStr
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4301
		{
			yyVAL.empty = struct{}{}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4303
		{
			yyVAL.empty = struct{}{}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4305
		{
			yyVAL.empty = struct{}{}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4307
		{
			yyVAL.empty = struct{}{}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4309
		{
			yyVAL.empty = struct{}{}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4311
		{
			yyVAL.empty = struct{}{}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4313
		{
			yyVAL.empty = struct{}{}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4315
		{
			yyVAL.empty = struct{}{}
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4317
		{
			yyVAL.empty = struct{}{}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4319
		{
			yyVAL.empty = struct{}{}
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4322
		{
			yyVAL.empty = struct{}{}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4324
		{
			yyVAL.empty = struct{}{}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4326
		{
			yyVAL.empty = struct{}{}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4330
		{
			yyVAL.empty = struct{}{}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4332
		{
			yyVAL.empty = struct{}{}
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4336
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4340
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4347
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4353
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4357
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4362
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4369
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4375
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4379
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4383
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4389
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4393
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4397
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4403
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4407
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4414
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4421
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4425
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4432
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4718
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4727
		{
			decNesting(yylex)
		}
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4732
		{
			forceEOF(yylex)
		}
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4737
		{
			forceEOF(yylex)
		}
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4741
		{
			forceEOF(yylex)
		}
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4745
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
