// Code generated by goyacc -o parser.go .\parser.y. DO NOT EDIT.

//line .\parser.y:18
package parser

import __yyfmt__ "fmt"

//line .\parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line .\parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const MAX = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const POSIX_REGEX = 57431
const POSIX_REGEX_CI = 57432
const POSIX_NOT_REGEX = 57433
const POSIX_NOT_REGEX_CI = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const INTERVAL = 57443
const JSON_EXTRACT_OP = 57444
const JSON_UNQUOTE_EXTRACT_OP = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const SCHEMA = 57452
const TABLE = 57453
const INDEX = 57454
const MATERIALIZED = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const PRIMARY = 57460
const COLUMN = 57461
const CONSTRAINT = 57462
const REFERENCES = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const FOREIGN = 57466
const KEY_BLOCK_SIZE = 57467
const POLICY = 57468
const WHILE = 57469
const UNIQUE = 57470
const KEY = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const MAXVALUE = 57480
const PARTITION = 57481
const REORGANIZE = 57482
const LESS = 57483
const THAN = 57484
const PROCEDURE = 57485
const TRIGGER = 57486
const TYPE = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const RESTRICT = 57492
const CASCADE = 57493
const NO = 57494
const ACTION = 57495
const PERMISSIVE = 57496
const RESTRICTIVE = 57497
const PUBLIC = 57498
const CURRENT_USER = 57499
const SESSION_USER = 57500
const PAD_INDEX = 57501
const FILLFACTOR = 57502
const IGNORE_DUP_KEY = 57503
const STATISTICS_NORECOMPUTE = 57504
const STATISTICS_INCREMENTAL = 57505
const ALLOW_ROW_LOCKS = 57506
const ALLOW_PAGE_LOCKS = 57507
const BEFORE = 57508
const AFTER = 57509
const EACH = 57510
const ROW = 57511
const SCROLL = 57512
const CURSOR = 57513
const OPEN = 57514
const CLOSE = 57515
const FETCH = 57516
const PRIOR = 57517
const FIRST = 57518
const LAST = 57519
const DEALLOCATE = 57520
const DEFERRABLE = 57521
const INITIALLY = 57522
const IMMEDIATE = 57523
const DEFERRED = 57524
const CONCURRENTLY = 57525
const SQL = 57526
const SECURITY = 57527
const BEGIN = 57528
const START = 57529
const TRANSACTION = 57530
const COMMIT = 57531
const ROLLBACK = 57532
const BIT = 57533
const TINYINT = 57534
const SMALLINT = 57535
const SMALLSERIAL = 57536
const MEDIUMINT = 57537
const INT = 57538
const INTEGER = 57539
const SERIAL = 57540
const BIGINT = 57541
const BIGSERIAL = 57542
const INTNUM = 57543
const REAL = 57544
const DOUBLE = 57545
const PRECISION = 57546
const FLOAT_TYPE = 57547
const DECIMAL = 57548
const NUMERIC = 57549
const SMALLMONEY = 57550
const MONEY = 57551
const TIME = 57552
const TIMESTAMP = 57553
const DATETIME = 57554
const YEAR = 57555
const DATETIMEOFFSET = 57556
const DATETIME2 = 57557
const SMALLDATETIME = 57558
const CHAR = 57559
const VARCHAR = 57560
const VARYING = 57561
const BOOL = 57562
const CHARACTER = 57563
const VARBINARY = 57564
const NCHAR = 57565
const NVARCHAR = 57566
const NTEXT = 57567
const UUID = 57568
const TEXT = 57569
const TINYTEXT = 57570
const MEDIUMTEXT = 57571
const LONGTEXT = 57572
const CITEXT = 57573
const BLOB = 57574
const TINYBLOB = 57575
const MEDIUMBLOB = 57576
const LONGBLOB = 57577
const JSON = 57578
const JSONB = 57579
const ENUM = 57580
const GEOMETRY = 57581
const POINT = 57582
const LINESTRING = 57583
const POLYGON = 57584
const GEOMETRYCOLLECTION = 57585
const MULTIPOINT = 57586
const MULTILINESTRING = 57587
const MULTIPOLYGON = 57588
const VARIADIC = 57589
const ARRAY = 57590
const NOW = 57591
const GETDATE = 57592
const BPCHAR = 57593
const TEXT_PATTERN_OPS = 57594
const NULLX = 57595
const AUTO_INCREMENT = 57596
const APPROXNUM = 57597
const SIGNED = 57598
const UNSIGNED = 57599
const ZEROFILL = 57600
const ZONE = 57601
const AUTOINCREMENT = 57602
const DATABASES = 57603
const TABLES = 57604
const VITESS_KEYSPACES = 57605
const VITESS_SHARDS = 57606
const VITESS_TABLETS = 57607
const VSCHEMA_TABLES = 57608
const EXTENDED = 57609
const FULL = 57610
const PROCESSLIST = 57611
const NAMES = 57612
const CHARSET = 57613
const GLOBAL = 57614
const SESSION = 57615
const ISOLATION = 57616
const LEVEL = 57617
const READ = 57618
const WRITE = 57619
const ONLY = 57620
const REPEATABLE = 57621
const COMMITTED = 57622
const UNCOMMITTED = 57623
const SERIALIZABLE = 57624
const NEW = 57625
const CURRENT_TIMESTAMP = 57626
const DATABASE = 57627
const CURRENT_DATE = 57628
const CURRENT_TIME = 57629
const LOCALTIME = 57630
const LOCALTIMESTAMP = 57631
const UTC_DATE = 57632
const UTC_TIME = 57633
const UTC_TIMESTAMP = 57634
const REPLACE = 57635
const CONVERT = 57636
const CAST = 57637
const SUBSTR = 57638
const SUBSTRING = 57639
const GROUP_CONCAT = 57640
const SEPARATOR = 57641
const INHERIT = 57642
const LEAD = 57643
const LAG = 57644
const MATCH = 57645
const AGAINST = 57646
const BOOLEAN = 57647
const LANGUAGE = 57648
const WITH = 57649
const WITHOUT = 57650
const PARSER = 57651
const QUERY = 57652
const EXPANSION = 57653
const UNUSED = 57654
const VIRTUAL = 57655
const STORED = 57656
const GENERATED = 57657
const ALWAYS = 57658
const IDENTITY = 57659
const SEQUENCE = 57660
const INCREMENT = 57661
const MINVALUE = 57662
const CACHE = 57663
const CYCLE = 57664
const OWNED = 57665
const NONE = 57666
const CLUSTERED = 57667
const NONCLUSTERED = 57668
const REPLICATION = 57669
const COLUMNSTORE = 57670
const INCLUDE = 57671
const HOLDLOCK = 57672
const NOLOCK = 57673
const NOWAIT = 57674
const PAGLOCK = 57675
const ROWLOCK = 57676
const TABLELOCK = 57677
const DEFINER = 57678
const INVOKER = 57679
const TYPECAST = 57680
const CHECK = 57681
const OVER = 57682

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	129, 401,
	-2, 159,
	-1, 36,
	165, 509,
	166, 509,
	-2, 499,
	-1, 286,
	118, 878,
	-2, 874,
	-1, 287,
	118, 879,
	-2, 875,
	-1, 288,
	118, 880,
	-2, 244,
	-1, 329,
	265, 889,
	-2, 767,
	-1, 361,
	85, 1107,
	-2, 86,
	-1, 362,
	85, 1057,
	-2, 87,
	-1, 368,
	85, 1036,
	-2, 845,
	-1, 370,
	85, 1081,
	-2, 847,
	-1, 633,
	265, 889,
	-2, 537,
	-1, 682,
	265, 889,
	-2, 537,
	-1, 711,
	55, 41,
	57, 41,
	-2, 43,
	-1, 743,
	115, 1031,
	248, 1031,
	254, 1031,
	-2, 280,
	-1, 744,
	115, 1032,
	248, 1032,
	254, 1032,
	-2, 281,
	-1, 745,
	248, 1034,
	254, 1034,
	-2, 315,
	-1, 746,
	248, 1035,
	254, 1035,
	-2, 315,
	-1, 747,
	248, 1136,
	254, 1136,
	-2, 322,
	-1, 748,
	248, 1082,
	254, 1082,
	-2, 315,
	-1, 749,
	248, 1087,
	254, 1087,
	-2, 322,
	-1, 750,
	115, 1085,
	248, 1085,
	254, 1085,
	-2, 287,
	-1, 752,
	115, 1135,
	248, 1135,
	254, 1135,
	-2, 322,
	-1, 753,
	248, 1121,
	254, 1121,
	-2, 335,
	-1, 754,
	248, 1127,
	254, 1127,
	-2, 335,
	-1, 755,
	248, 1075,
	254, 1075,
	-2, 335,
	-1, 756,
	248, 1071,
	254, 1071,
	-2, 335,
	-1, 758,
	115, 1030,
	248, 1030,
	254, 1030,
	-2, 296,
	-1, 759,
	115, 1125,
	248, 1125,
	254, 1125,
	-2, 297,
	-1, 760,
	115, 1073,
	248, 1073,
	254, 1073,
	-2, 298,
	-1, 761,
	115, 1070,
	248, 1070,
	254, 1070,
	-2, 299,
	-1, 762,
	115, 1062,
	248, 1062,
	254, 1062,
	-2, 300,
	-1, 764,
	115, 1134,
	248, 1134,
	254, 1134,
	-2, 302,
	-1, 767,
	115, 1043,
	248, 1043,
	254, 1043,
	-2, 272,
	-1, 768,
	115, 1123,
	248, 1123,
	254, 1123,
	-2, 315,
	-1, 769,
	115, 1124,
	248, 1124,
	254, 1124,
	-2, 315,
	-1, 770,
	115, 1044,
	248, 1044,
	254, 1044,
	-2, 315,
	-1, 771,
	115, 1045,
	248, 1045,
	254, 1045,
	-2, 315,
	-1, 772,
	115, 1046,
	248, 1046,
	254, 1046,
	-2, 315,
	-1, 773,
	115, 1114,
	248, 1114,
	254, 1114,
	-2, 278,
	-1, 774,
	115, 1148,
	248, 1148,
	254, 1148,
	-2, 279,
	-1, 775,
	115, 1054,
	248, 1054,
	254, 1054,
	-2, 305,
	-1, 776,
	115, 1091,
	248, 1091,
	254, 1091,
	-2, 306,
	-1, 777,
	115, 1069,
	248, 1069,
	254, 1069,
	-2, 307,
	-1, 778,
	115, 1092,
	248, 1092,
	254, 1092,
	-2, 308,
	-1, 779,
	115, 1055,
	248, 1055,
	254, 1055,
	-2, 309,
	-1, 780,
	115, 1079,
	248, 1079,
	254, 1079,
	-2, 310,
	-1, 781,
	115, 1078,
	248, 1078,
	254, 1078,
	-2, 311,
	-1, 782,
	115, 1080,
	248, 1080,
	254, 1080,
	-2, 312,
	-1, 783,
	115, 1029,
	248, 1029,
	254, 1029,
	-2, 254,
	-1, 784,
	115, 1126,
	248, 1126,
	254, 1126,
	-2, 255,
	-1, 785,
	115, 1115,
	248, 1115,
	254, 1115,
	-2, 256,
	-1, 786,
	115, 1117,
	248, 1117,
	254, 1117,
	-2, 257,
	-1, 787,
	115, 1074,
	248, 1074,
	254, 1074,
	-2, 258,
	-1, 788,
	115, 1059,
	248, 1059,
	254, 1059,
	-2, 259,
	-1, 789,
	115, 1060,
	248, 1060,
	254, 1060,
	-2, 260,
	-1, 790,
	115, 1108,
	248, 1108,
	254, 1108,
	-2, 261,
	-1, 791,
	115, 1027,
	248, 1027,
	254, 1027,
	-2, 262,
	-1, 792,
	115, 1028,
	248, 1028,
	254, 1028,
	-2, 263,
	-1, 793,
	115, 1099,
	248, 1099,
	254, 1099,
	-2, 317,
	-1, 794,
	115, 1048,
	248, 1048,
	254, 1048,
	-2, 317,
	-1, 795,
	115, 1052,
	248, 1052,
	254, 1052,
	-2, 317,
	-1, 796,
	115, 1047,
	248, 1047,
	254, 1047,
	-2, 319,
	-1, 797,
	115, 1086,
	248, 1086,
	254, 1086,
	-2, 319,
	-1, 798,
	115, 1077,
	248, 1077,
	254, 1077,
	-2, 270,
	-1, 799,
	115, 1116,
	248, 1116,
	254, 1116,
	-2, 271,
	-1, 880,
	118, 882,
	-2, 877,
	-1, 1021,
	141, 411,
	-2, 1041,
	-1, 1150,
	265, 889,
	-2, 537,
	-1, 1173,
	5, 28,
	-2, 663,
	-1, 1199,
	5, 27,
	-2, 818,
	-1, 1248,
	59, 376,
	-2, 373,
	-1, 1265,
	118, 880,
	-2, 244,
	-1, 1511,
	5, 27,
	-2, 95,
	-1, 1513,
	5, 27,
	-2, 97,
	-1, 1573,
	5, 28,
	-2, 819,
	-1, 1648,
	5, 27,
	-2, 96,
	-1, 1684,
	5, 27,
	-2, 821,
	-1, 1762,
	58, 108,
	-2, 178,
	-1, 1765,
	58, 108,
	-2, 178,
	-1, 1838,
	188, 54,
	-2, 178,
	-1, 1854,
	58, 108,
	-2, 177,
	-1, 1878,
	5, 28,
	-2, 822,
	-1, 2032,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 21013

var yyAct = [...]int16{
	372, 1696, 1988, 1740, 1506, 734, 1743, 1699, 1871, 1095,
	1794, 559, 1864, 1839, 809, 265, 636, 3, 1736, 1237,
	1817, 292, 282, 637, 969, 733, 1215, 1583, 319, 1579,
	1606, 1416, 1202, 1459, 856, 96, 1853, 1240, 96, 1447,
	987, 53, 1505, 1417, 1063, 1317, 703, 1596, 705, 1413,
	295, 303, 1165, 1263, 1016, 291, 1103, 1885, 1104, 1269,
	287, 1031, 96, 96, 264, 618, 1010, 1081, 970, 1220,
	367, 1388, 1207, 905, 1076, 937, 96, 21, 933, 1007,
	1155, 544, 1161, 815, 1026, 96, 721, 96, 956, 1300,
	565, 1766, 546, 96, 882, 360, 720, 692, 259, 966,
	571, 741, 348, 707, 963, 579, 290, 1057, 346, 274,
	1282, 1989, 351, 736, 347, 735, 1382, 660, 1049, 512,
	1137, 932, 357, 271, 2013, 48, 26, 27, 52, 1454,
	1387, 1981, 619, 269, 1052, 278, 1476, 1754, 1564, 1092,
	1093, 1045, 260, 261, 262, 263, 1737, 520, 28, 1612,
	587, 1460, 590, 1461, 1462, 603, 363, 502, 605, 606,
	607, 608, 609, 610, 611, 1463, 588, 589, 586, 612,
	613, 614, 615, 592, 591, 601, 602, 594, 595, 596,
	597, 598, 599, 600, 593, 593, 355, 603, 603, 521,
	522, 1620, 514, 2038, 1785, 1903, 1904, 519, 1261, 592,
	591, 601, 602, 594, 595, 596, 597, 598, 599, 600,
	593, 2044, 1048, 603, 1952, 1876, 1798, 1971, 1799, 592,
	591, 601, 602, 594, 595, 596, 597, 598, 599, 600,
	593, 1162, 1163, 603, 1013, 1045, 1046, 1964, 96, 2025,
	594, 595, 596, 597, 598, 599, 600, 593, 1096, 284,
	603, 1760, 1584, 1585, 1586, 1587, 1588, 1589, 1922, 1216,
	1034, 1759, 1158, 1951, 1408, 1875, 1900, 287, 287, 1567,
	523, 91, 87, 88, 1041, 89, 1029, 596, 597, 598,
	599, 600, 593, 1030, 287, 603, 1905, 568, 1228, 1440,
	1441, 1227, 1001, 1002, 1229, 1439, 1000, 287, 287, 287,
	287, 287, 287, 287, 554, 1545, 1755, 1756, 1758, 722,
	567, 723, 1757, 1563, 558, 847, 1544, 1051, 1543, 1284,
	1645, 287, 848, 632, 547, 548, 549, 1064, 552, 558,
	287, 1053, 1160, 960, 1380, 556, 1379, 539, 1673, 1053,
	620, 1037, 1378, 1032, 1042, 1556, 96, 1554, 1461, 1462,
	1455, 1039, 1038, 96, 96, 96, 592, 591, 601, 602,
	594, 595, 596, 597, 598, 599, 600, 593, 1467, 1077,
	603, 592, 591, 601, 602, 594, 595, 596, 597, 598,
	599, 600, 593, 1909, 258, 603, 601, 602, 594, 595,
	596, 597, 598, 599, 600, 593, 604, 1911, 603, 1970,
	2042, 1972, 1274, 351, 1276, 1275, 541, 1941, 507, 543,
	807, 2036, 2035, 1561, 2021, 2022, 1834, 1986, 1994, 1381,
	1742, 1560, 1609, 1786, 1518, 1519, 308, 49, 604, 604,
	1715, 1818, 1906, 2037, 923, 550, 551, 1865, 540, 542,
	2023, 665, 1358, 967, 817, 1866, 90, 1681, 817, 1614,
	1613, 363, 1255, 666, 604, 1525, 592, 591, 601, 602,
	594, 595, 596, 597, 598, 599, 600, 593, 1465, 1621,
	603, 1027, 1526, 1254, 604, 2018, 1242, 1035, 509, 816,
	1662, 718, 2003, 1036, 1453, 1535, 1799, 1247, 1028, 1772,
	366, 604, 503, 2041, 1844, 988, 990, 511, 513, 1963,
	515, 516, 592, 591, 601, 602, 594, 595, 596, 597,
	598, 599, 600, 593, 528, 1260, 603, 1064, 85, 1056,
	96, 84, 1219, 85, 1012, 96, 604, 1651, 96, 826,
	800, 96, 806, 1604, 1078, 96, 1874, 1993, 1043, 651,
	1044, 712, 510, 1218, 1604, 921, 624, 625, 626, 627,
	628, 629, 630, 1217, 524, 920, 96, 1248, 1607, 1608,
	1610, 924, 1040, 506, 1907, 1908, 1910, 1912, 1913, 505,
	925, 926, 1355, 518, 1028, 96, 989, 287, 287, 237,
	538, 86, 2029, 859, 287, 922, 287, 1359, 1245, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 1790, 835, 1576, 825, 818, 819,
	1484, 604, 818, 819, 1367, 883, 1184, 54, 836, 837,
	838, 839, 840, 841, 842, 843, 604, 805, 1180, 1149,
	808, 854, 844, 845, 287, 725, 57, 884, 821, 604,
	287, 287, 287, 287, 287, 287, 287, 287, 1845, 1846,
	1847, 287, 622, 623, 880, 833, 943, 936, 1027, 635,
	558, 59, 60, 61, 62, 63, 948, 950, 366, 366,
	366, 366, 958, 366, 1179, 1028, 879, 583, 1356, 861,
	366, 1354, 287, 287, 287, 287, 876, 96, 534, 287,
	96, 96, 96, 96, 96, 1357, 1009, 1008, 1494, 1132,
	851, 578, 96, 1363, 878, 96, 911, 581, 576, 96,
	971, 604, 1810, 1809, 96, 96, 1808, 889, 666, 1807,
	908, 943, 910, 853, 578, 287, 1806, 1805, 939, 927,
	930, 887, 888, 886, 1804, 1802, 622, 623, 935, 1515,
	351, 351, 351, 351, 351, 944, 945, 1230, 954, 577,
	576, 953, 1205, 2033, 1495, 351, 1940, 604, 1671, 2031,
	995, 962, 852, 724, 351, 1410, 578, 2034, 592, 591,
	601, 602, 594, 595, 596, 597, 598, 599, 600, 593,
	577, 576, 603, 1133, 1362, 366, 961, 957, 964, 965,
	1239, 1717, 727, 973, 974, 1700, 976, 578, 984, 1065,
	1066, 1067, 1068, 96, 972, 1713, 96, 975, 1702, 96,
	363, 993, 992, 997, 1239, 96, 998, 96, 1006, 1156,
	577, 576, 96, 812, 1014, 96, 1109, 96, 1239, 957,
	96, 1189, 1146, 1147, 1148, 881, 1238, 578, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 287, 287, 287, 287, 1060, 527, 1239,
	1062, 872, 874, 875, 1177, 1083, 1176, 287, 873, 1079,
	1080, 1139, 653, 654, 655, 656, 657, 658, 659, 558,
	1054, 1055, 1701, 1059, 577, 576, 1061, 1178, 287, 287,
	287, 573, 1714, 1099, 949, 1101, 577, 576, 1632, 2006,
	1251, 578, 1285, 1071, 1072, 1073, 1074, 1075, 569, 857,
	858, 1820, 1130, 578, 2005, 883, 1703, 1704, 1705, 1706,
	1707, 1708, 1709, 1631, 1886, 880, 1090, 1285, 577, 576,
	740, 740, 801, 804, 50, 287, 1965, 884, 1291, 577,
	576, 1290, 287, 1887, 885, 578, 1138, 879, 530, 531,
	532, 1250, 366, 1969, 1335, 287, 578, 1803, 287, 577,
	576, 1968, 1967, 366, 366, 366, 366, 366, 366, 366,
	366, 1145, 1888, 577, 576, 1884, 578, 366, 366, 1285,
	1412, 1151, 1966, 1199, 1083, 1727, 1640, 1375, 1079, 1080,
	578, 1639, 1472, 1307, 906, 96, 907, 863, 694, 697,
	698, 699, 695, 1305, 696, 700, 1281, 581, 1208, 1209,
	366, 592, 591, 601, 602, 594, 595, 596, 597, 598,
	599, 600, 593, 604, 50, 603, 1222, 1680, 1224, 634,
	1336, 1332, 1327, 1637, 1337, 1334, 1333, 1166, 1537, 1168,
	1331, 1223, 1301, 96, 1188, 351, 287, 1257, 1212, 929,
	929, 1338, 634, 83, 1832, 2049, 558, 931, 1330, 1186,
	1256, 1800, 366, 54, 1698, 1601, 2024, 1688, 1978, 1601,
	1959, 1915, 951, 1832, 1958, 1955, 1954, 951, 1946, 558,
	1601, 1943, 1601, 1942, 1852, 96, 1225, 1601, 1916, 96,
	1458, 96, 1688, 1862, 1688, 1739, 1829, 1273, 1457, 1286,
	1287, 1271, 1289, 1233, 1292, 1293, 558, 1823, 1243, 1244,
	1246, 1688, 1724, 1822, 345, 951, 1688, 558, 1691, 1690,
	1688, 1689, 1601, 1600, 1436, 558, 557, 1575, 558, 1501,
	1500, 1497, 1498, 96, 96, 1497, 1496, 1152, 1153, 1154,
	1456, 96, 1249, 1294, 366, 1296, 1297, 1298, 1299, 1169,
	558, 287, 366, 1306, 1303, 1304, 1231, 287, 287, 503,
	1302, 941, 558, 1658, 1098, 689, 558, 1328, 919, 832,
	287, 23, 831, 813, 811, 732, 731, 50, 536, 529,
	287, 287, 287, 287, 287, 287, 1833, 1733, 1832, 1318,
	287, 1288, 1323, 1732, 1731, 1728, 1197, 1322, 287, 1121,
	1644, 1198, 715, 1633, 287, 287, 287, 1623, 1491, 287,
	1325, 1360, 287, 1120, 1490, 1414, 1485, 1420, 1203, 971,
	54, 50, 1415, 23, 1204, 971, 1203, 1418, 1409, 1373,
	1087, 287, 1383, 1374, 1370, 994, 1949, 714, 366, 1181,
	366, 1446, 1372, 1125, 1424, 1385, 716, 740, 714, 1204,
	1401, 1400, 1119, 1683, 1183, 880, 1438, 366, 1321, 23,
	941, 1322, 1169, 1700, 1437, 287, 604, 1929, 1571, 689,
	689, 1423, 1425, 50, 271, 1601, 1702, 1407, 688, 1622,
	1169, 366, 592, 591, 601, 602, 594, 595, 596, 597,
	598, 599, 600, 593, 1203, 1514, 603, 1503, 1502, 810,
	1182, 1445, 1499, 1234, 689, 999, 1116, 1113, 1114, 50,
	1112, 287, 96, 1466, 1464, 1169, 1273, 717, 1473, 855,
	1271, 2039, 96, 1948, 50, 1444, 1828, 1814, 1813, 1769,
	1511, 1475, 1513, 1488, 1477, 1768, 1735, 1734, 1726, 1663,
	1123, 1126, 1660, 320, 47, 694, 697, 698, 699, 695,
	1701, 696, 700, 96, 1646, 1483, 1053, 1214, 1082, 1510,
	1482, 1480, 1507, 1469, 287, 581, 1486, 1487, 1431, 1489,
	1429, 96, 1492, 1493, 1310, 1077, 287, 1262, 1236, 1070,
	1522, 1521, 1208, 1209, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 47, 1084, 1085, 2000, 1069, 1058, 65, 1324, 270,
	1795, 1819, 1539, 1504, 1414, 352, 1376, 1377, 1311, 1479,
	1481, 1345, 1211, 287, 1536, 1088, 829, 1540, 1221, 814,
	287, 351, 1118, 555, 983, 1213, 698, 699, 1528, 1402,
	1403, 1404, 1405, 1406, 981, 1546, 96, 366, 1530, 982,
	1578, 979, 1134, 867, 978, 977, 980, 1950, 1241, 275,
	276, 1366, 1533, 1595, 572, 1117, 1997, 1144, 1143, 1252,
	1372, 1552, 1590, 1591, 1592, 1570, 560, 1235, 1295, 287,
	570, 730, 1278, 537, 1471, 287, 1569, 1987, 1664, 561,
	1100, 1346, 1611, 828, 1593, 1617, 1512, 1348, 1341, 1342,
	1470, 1349, 1344, 1343, 1616, 1122, 1320, 1351, 1347, 1619,
	857, 858, 1315, 287, 1313, 96, 820, 1653, 1350, 1654,
	1655, 1656, 1309, 1124, 702, 1340, 272, 273, 572, 2014,
	266, 1657, 1652, 366, 1549, 1550, 1273, 1551, 1624, 1648,
	1271, 1553, 1797, 1555, 1142, 1517, 1597, 604, 1233, 1452,
	1647, 1636, 1141, 1638, 1973, 1641, 1779, 1775, 267, 54,
	1774, 1667, 1204, 1937, 1507, 1936, 366, 1105, 1106, 1107,
	1649, 287, 287, 1650, 287, 287, 287, 1935, 1635, 1934,
	1902, 1901, 1451, 1450, 1811, 574, 366, 1634, 1812, 1787,
	1253, 850, 56, 1602, 1605, 545, 545, 545, 545, 1670,
	545, 1684, 1749, 8, 58, 1672, 1329, 545, 1746, 7,
	1418, 1747, 6, 1745, 5, 1524, 1011, 1318, 1597, 1659,
	713, 366, 51, 1, 47, 1682, 287, 67, 66, 1870,
	1669, 287, 1386, 508, 951, 1542, 1712, 1422, 1221, 617,
	951, 1716, 1091, 621, 1695, 1164, 631, 1711, 307, 2020,
	1992, 1710, 293, 1602, 1582, 1930, 1837, 287, 1720, 1925,
	1843, 1718, 633, 1280, 1033, 1821, 1259, 68, 1921, 366,
	1831, 1516, 1319, 1448, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 1339, 650, 652, 652, 652, 652, 652,
	652, 652, 652, 1097, 681, 682, 683, 684, 1316, 1738,
	1115, 1278, 1863, 1770, 1881, 860, 704, 1761, 1507, 1697,
	1603, 1019, 1789, 1232, 501, 1796, 64, 1801, 1020, 1018,
	1017, 1777, 1418, 1015, 1047, 1788, 1729, 1283, 1730, 1792,
	1050, 739, 1793, 287, 737, 738, 742, 245, 358, 701,
	726, 1326, 575, 1353, 1352, 287, 1753, 1508, 1111, 1361,
	1826, 846, 1131, 553, 247, 616, 1140, 1226, 365, 1421,
	564, 1523, 1824, 1773, 1527, 1666, 1187, 1529, 648, 955,
	287, 287, 294, 940, 942, 871, 306, 1531, 305, 1827,
	1744, 304, 1830, 1860, 1861, 287, 287, 1825, 862, 959,
	287, 1196, 1848, 1851, 585, 1534, 1507, 350, 287, 685,
	693, 800, 691, 690, 366, 1836, 1210, 1206, 349, 1868,
	1855, 1856, 1857, 1858, 1859, 1369, 1882, 1566, 1784, 971,
	1674, 1675, 1877, 1676, 1677, 1678, 866, 1896, 25, 1897,
	55, 1753, 277, 19, 18, 17, 20, 16, 15, 1917,
	986, 14, 1920, 29, 287, 13, 1898, 12, 11, 10,
	9, 1752, 1894, 1895, 1931, 1751, 1750, 1748, 1919, 4,
	268, 22, 1928, 2, 0, 1835, 1580, 1914, 1918, 1580,
	1580, 1580, 0, 1594, 1889, 1890, 1891, 1892, 1893, 545,
	366, 0, 366, 0, 0, 0, 0, 1944, 0, 0,
	545, 545, 545, 545, 545, 545, 545, 545, 0, 0,
	0, 0, 0, 0, 545, 545, 1580, 0, 0, 0,
	0, 1278, 0, 1625, 0, 0, 0, 0, 0, 0,
	0, 366, 1753, 0, 1956, 1957, 1974, 0, 1976, 0,
	1960, 353, 0, 0, 0, 0, 1753, 0, 1977, 1508,
	1642, 1980, 1961, 1962, 0, 0, 280, 1580, 0, 0,
	1983, 366, 366, 1984, 1991, 0, 1926, 1990, 1975, 0,
	287, 1661, 1979, 1998, 1995, 0, 93, 0, 1999, 1996,
	1938, 2004, 1665, 2002, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 2010, 0, 0,
	0, 2011, 287, 639, 356, 2009, 0, 0, 0, 0,
	0, 1931, 0, 0, 0, 0, 0, 517, 0, 0,
	0, 0, 1686, 1687, 96, 1753, 525, 0, 526, 1849,
	0, 0, 0, 0, 533, 2028, 0, 1753, 1753, 1753,
	0, 0, 2030, 0, 0, 0, 0, 0, 1448, 0,
	0, 2032, 0, 352, 352, 352, 352, 352, 0, 1982,
	1719, 0, 0, 2045, 287, 2046, 1159, 0, 704, 0,
	991, 0, 1744, 0, 0, 0, 0, 352, 0, 0,
	1167, 0, 1170, 1171, 0, 0, 1753, 0, 1753, 1753,
	1173, 1174, 1175, 1508, 0, 0, 0, 0, 1741, 0,
	1185, 0, 0, 0, 0, 1191, 0, 1762, 1192, 1193,
	1580, 1194, 1195, 0, 0, 0, 0, 0, 0, 0,
	2017, 0, 1835, 2017, 1157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1791, 0, 0, 0, 0,
	1753, 0, 2040, 0, 1753, 563, 0, 0, 592, 591,
	601, 602, 594, 595, 596, 597, 598, 599, 600, 593,
	0, 0, 603, 591, 601, 602, 594, 595, 596, 597,
	598, 599, 600, 593, 0, 545, 603, 545, 2017, 535,
	94, 1508, 1448, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 545, 0, 0, 0, 0, 0,
	0, 1838, 1840, 1841, 1842, 281, 0, 94, 94, 1854,
	1762, 1762, 1854, 1762, 1762, 1448, 1448, 0, 0, 0,
	0, 94, 0, 562, 566, 0, 0, 0, 0, 0,
	94, 0, 94, 0, 951, 0, 0, 1879, 94, 0,
	584, 0, 1880, 1150, 0, 0, 1883, 0, 592, 591,
	601, 602, 594, 595, 596, 597, 598, 599, 600, 593,
	1741, 1448, 603, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 1580, 0, 638, 0, 1923,
	0, 0, 0, 0, 0, 740, 649, 687, 0, 0,
	1933, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 1854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1947, 2047, 661, 1384, 0, 0, 0, 0,
	0, 72, 77, 0, 69, 0, 0, 0, 0, 0,
	1200, 1201, 0, 0, 0, 0, 0, 73, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 663,
	0, 661, 0, 0, 0, 74, 75, 70, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	1389, 0, 0, 0, 0, 0, 1985, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 663, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	2001, 0, 0, 604, 0, 1391, 0, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 604, 912, 913,
	0, 914, 915, 916, 918, 917, 0, 909, 664, 0,
	0, 0, 740, 0, 2015, 0, 679, 662, 0, 0,
	0, 0, 668, 667, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 0, 0, 271, 0, 48, 26,
	27, 822, 0, 0, 0, 664, 823, 0, 0, 827,
	1754, 0, 830, 679, 662, 0, 366, 0, 1393, 668,
	667, 28, 1398, 0, 1392, 0, 1741, 0, 0, 1390,
	0, 94, 0, 545, 0, 1396, 71, 849, 94, 709,
	94, 0, 0, 604, 0, 0, 0, 0, 1394, 1395,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	1541, 680, 0, 0, 76, 0, 0, 0, 1397, 1399,
	0, 0, 0, 869, 870, 1548, 78, 79, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 1557, 1558, 1559,
	0, 0, 1562, 0, 0, 0, 0, 0, 680, 0,
	0, 0, 1419, 0, 47, 0, 1572, 1573, 1574, 0,
	1577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 1433, 1434, 1760, 0, 0, 0, 0, 0,
	938, 0, 0, 0, 1759, 0, 638, 0, 0, 946,
	947, 0, 0, 0, 0, 271, 0, 48, 26, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1754,
	1468, 0, 0, 0, 0, 1630, 0, 0, 968, 0,
	28, 0, 0, 0, 0, 0, 1478, 0, 0, 1755,
	1756, 1758, 633, 0, 0, 1757, 0, 0, 0, 0,
	0, 0, 0, 1939, 0, 0, 996, 271, 0, 48,
	26, 27, 0, 0, 0, 94, 0, 0, 0, 0,
	94, 1754, 0, 94, 0, 0, 94, 47, 0, 47,
	834, 1005, 28, 2050, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1668, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 271, 0, 48, 26, 27,
	0, 0, 0, 1679, 0, 0, 0, 0, 0, 1754,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	28, 0, 0, 1760, 352, 2019, 0, 1692, 1693, 1694,
	0, 0, 0, 1759, 1086, 0, 0, 1089, 0, 0,
	1094, 1547, 0, 0, 0, 0, 1102, 0, 1108, 0,
	49, 0, 0, 1110, 0, 1723, 1127, 0, 1128, 0,
	0, 1129, 1565, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 2016, 0, 1760, 281, 281, 1755, 1756,
	1758, 952, 281, 0, 1757, 1759, 952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1135,
	1136, 0, 566, 0, 0, 0, 1776, 1778, 0, 1615,
	0, 1780, 1781, 1782, 1783, 0, 0, 281, 281, 281,
	281, 0, 94, 1760, 952, 94, 94, 94, 94, 94,
	1755, 1756, 1758, 1759, 0, 0, 1757, 985, 0, 0,
	94, 0, 0, 0, 709, 0, 0, 0, 0, 94,
	94, 0, 0, 0, 0, 0, 0, 0, 1815, 0,
	0, 0, 633, 0, 0, 0, 47, 23, 24, 48,
	26, 27, 0, 0, 0, 0, 0, 0, 1755, 1756,
	1758, 0, 0, 0, 1757, 0, 0, 42, 1172, 0,
	0, 271, 28, 48, 26, 27, 0, 0, 271, 49,
	48, 26, 27, 0, 1190, 1754, 0, 0, 0, 0,
	0, 0, 1754, 37, 1869, 0, 28, 50, 0, 0,
	0, 1873, 0, 28, 0, 1419, 1878, 0, 1685, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 94, 0, 0, 94, 0, 0, 0, 0, 0,
	94, 49, 94, 1899, 0, 0, 0, 94, 0, 0,
	94, 0, 94, 0, 0, 94, 0, 0, 0, 0,
	0, 1722, 0, 0, 1258, 0, 0, 0, 0, 0,
	0, 0, 30, 31, 33, 32, 35, 0, 1150, 0,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	1945, 0, 281, 0, 0, 0, 0, 0, 36, 43,
	44, 0, 0, 45, 46, 34, 1308, 0, 1771, 1760,
	1312, 0, 1314, 0, 0, 0, 1760, 0, 0, 1759,
	0, 0, 243, 0, 0, 0, 1759, 1419, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 38, 39, 0, 40, 41, 0,
	281, 0, 1368, 0, 1755, 1756, 1758, 0, 0, 0,
	1757, 1755, 1756, 1758, 0, 0, 0, 1757, 1927, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
	240, 0, 0, 0, 0, 0, 0, 246, 242, 0,
	94, 0, 0, 0, 0, 0, 1411, 0, 2026, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 1427, 0, 0, 1428, 0, 0, 1430, 244,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 1442, 94, 0,
	0, 1279, 0, 0, 2051, 2052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 94, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 1953, 0, 0, 239, 0, 0,
	0, 0, 0, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 1365,
	0, 0, 0, 0, 0, 0, 94, 241, 0, 249,
	250, 251, 252, 256, 1532, 0, 281, 0, 255, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	1538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1568,
	0, 0, 0, 0, 0, 0, 638, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2043, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1279, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1721, 0, 0, 0, 0, 1725, 0, 0,
	0, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 766, 0, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 0, 1279, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1767, 0, 371, 0, 1765, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 1816,
	0, 0, 0, 0, 0, 0, 0, 0, 1764, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1850, 751, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1867, 638, 147, 214, 0, 1872, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 767, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	1924, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 0, 793, 794, 168, 795, 796, 797, 799, 798,
	768, 769, 770, 774, 772, 771, 773, 745, 747, 212,
	743, 746, 752, 748, 749, 750, 764, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 765, 775,
	776, 777, 778, 779, 780, 781, 782, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	1279, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 1872, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 744, 140, 0, 221, 0,
	172, 126, 208, 952, 0, 0, 0, 0, 2012, 0,
	0, 0, 0, 0, 0, 2027, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 487, 476,
	0, 435, 489, 405, 423, 497, 425, 426, 462, 384,
	445, 163, 420, 402, 100, 408, 377, 415, 378, 406,
	437, 124, 403, 0, 478, 448, 138, 233, 234, 495,
	141, 453, 0, 187, 151, 0, 0, 440, 480, 443,
	471, 434, 463, 392, 452, 490, 421, 458, 491, 0,
	0, 0, 371, 0, 1598, 1599, 0, 0, 0, 0,
	0, 113, 0, 457, 485, 417, 500, 0, 461, 376,
	455, 0, 382, 385, 496, 483, 412, 413, 0, 0,
	0, 0, 0, 0, 0, 439, 444, 468, 431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2008,
	0, 409, 0, 451, 0, 0, 0, 389, 383, 0,
	436, 0, 0, 0, 391, 0, 410, 469, 0, 373,
	474, 481, 433, 147, 214, 484, 430, 429, 170, 94,
	116, 0, 193, 128, 422, 139, 466, 498, 488, 441,
	479, 407, 416, 118, 414, 177, 164, 205, 450, 464,
	175, 142, 197, 171, 204, 486, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 381, 374, 411, 472,
	475, 396, 460, 386, 418, 467, 419, 442, 401, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 379, 0, 188, 207, 224, 225,
	380, 400, 482, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 459, 178,
	115, 206, 184, 0, 395, 399, 393, 394, 446, 447,
	492, 493, 494, 470, 390, 0, 397, 398, 0, 477,
	133, 235, 236, 449, 99, 107, 140, 499, 221, 0,
	172, 126, 208, 0, 0, 424, 375, 428, 0, 0,
	0, 0, 0, 0, 0, 387, 388, 179, 0, 432,
	427, 454, 456, 465, 473, 0, 404, 438, 0, 112,
	487, 476, 0, 435, 489, 405, 423, 497, 425, 426,
	462, 384, 445, 163, 420, 402, 100, 408, 377, 415,
	378, 406, 437, 124, 403, 0, 478, 448, 138, 233,
	234, 495, 141, 453, 0, 187, 151, 0, 0, 440,
	480, 443, 471, 434, 463, 392, 452, 490, 421, 458,
	491, 0, 0, 0, 286, 0, 97, 0, 0, 0,
	0, 0, 0, 113, 0, 457, 485, 417, 500, 0,
	461, 376, 455, 0, 382, 385, 496, 483, 412, 413,
	0, 0, 0, 0, 0, 0, 0, 439, 444, 468,
	431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 409, 0, 451, 0, 0, 0, 389,
	383, 0, 436, 0, 0, 0, 391, 0, 410, 469,
	0, 373, 474, 481, 433, 147, 214, 484, 430, 429,
	170, 0, 116, 0, 193, 128, 422, 139, 466, 498,
	488, 441, 479, 407, 416, 118, 414, 177, 164, 205,
	450, 464, 175, 142, 197, 171, 204, 486, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 381, 374,
	411, 472, 475, 396, 460, 386, 418, 467, 419, 442,
	401, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 379, 0, 188, 207,
	224, 225, 380, 400, 482, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	459, 178, 115, 206, 184, 0, 395, 399, 393, 394,
	446, 447, 492, 493, 494, 470, 390, 0, 397, 398,
	0, 477, 133, 235, 236, 449, 99, 107, 140, 499,
	221, 0, 172, 126, 208, 0, 0, 424, 375, 428,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 179,
	0, 432, 427, 454, 456, 465, 473, 0, 404, 438,
	0, 112, 487, 476, 0, 435, 489, 405, 423, 497,
	425, 426, 462, 384, 445, 163, 420, 402, 100, 408,
	377, 415, 378, 406, 437, 124, 403, 0, 478, 448,
	138, 233, 234, 495, 141, 453, 0, 187, 151, 0,
	0, 440, 480, 443, 471, 434, 463, 392, 452, 490,
	421, 458, 491, 0, 0, 0, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 457, 485, 417,
	500, 0, 461, 376, 455, 0, 382, 385, 496, 483,
	412, 413, 1443, 0, 0, 0, 0, 0, 0, 439,
	444, 468, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 409, 0, 451, 0, 0,
	0, 389, 383, 0, 436, 0, 0, 0, 391, 0,
	410, 469, 0, 373, 474, 481, 433, 147, 214, 484,
	430, 429, 170, 0, 116, 0, 193, 128, 422, 139,
	466, 498, 488, 441, 479, 407, 416, 118, 414, 177,
	164, 205, 450, 464, 175, 142, 197, 171, 204, 486,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	381, 374, 411, 472, 475, 396, 460, 386, 418, 467,
	419, 442, 401, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 379, 0,
	188, 207, 224, 225, 380, 400, 482, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 459, 178, 115, 206, 184, 0, 395, 399,
	393, 394, 446, 447, 492, 493, 494, 470, 390, 0,
	397, 398, 0, 477, 133, 235, 236, 449, 99, 107,
	140, 499, 221, 0, 172, 126, 208, 0, 0, 424,
	375, 428, 0, 0, 0, 0, 0, 0, 0, 387,
	388, 179, 0, 432, 427, 454, 456, 465, 473, 0,
	404, 438, 0, 112, 487, 476, 0, 435, 489, 405,
	423, 497, 425, 426, 462, 384, 445, 163, 420, 402,
	100, 408, 377, 415, 378, 406, 437, 124, 403, 0,
	478, 448, 138, 233, 234, 495, 141, 453, 0, 187,
	151, 0, 0, 440, 480, 443, 471, 434, 463, 392,
	452, 490, 421, 458, 491, 0, 0, 0, 286, 0,
	97, 0, 0, 0, 0, 0, 0, 113, 0, 457,
	485, 417, 500, 0, 461, 376, 455, 0, 382, 385,
	496, 483, 412, 413, 0, 0, 0, 0, 0, 0,
	0, 439, 444, 468, 431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 409, 0, 451,
	0, 0, 0, 389, 383, 0, 436, 0, 0, 0,
	391, 0, 410, 469, 0, 373, 474, 481, 433, 147,
	214, 484, 430, 429, 170, 0, 116, 0, 193, 128,
	422, 139, 466, 498, 488, 441, 479, 407, 416, 118,
	414, 177, 164, 205, 450, 464, 175, 142, 197, 171,
	204, 486, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 381, 374, 411, 472, 475, 396, 460, 386,
	418, 467, 419, 442, 401, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	379, 0, 188, 207, 224, 225, 380, 400, 482, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 459, 178, 115, 206, 184, 0,
	395, 399, 393, 394, 446, 447, 492, 493, 494, 470,
	390, 0, 397, 398, 0, 477, 133, 235, 236, 449,
	99, 107, 140, 499, 221, 0, 172, 126, 208, 0,
	0, 424, 375, 428, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 179, 0, 432, 427, 454, 456, 465,
	473, 0, 404, 438, 0, 112, 487, 476, 0, 435,
	489, 405, 423, 497, 425, 426, 462, 384, 445, 163,
	420, 402, 100, 408, 377, 415, 378, 406, 437, 124,
	403, 0, 478, 448, 138, 233, 234, 495, 141, 453,
	0, 187, 151, 0, 0, 440, 480, 443, 471, 434,
	463, 392, 452, 490, 421, 458, 491, 0, 0, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 457, 485, 417, 500, 0, 461, 376, 455, 0,
	382, 385, 496, 483, 412, 413, 0, 0, 0, 0,
	0, 0, 0, 439, 444, 468, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1371, 0, 409,
	0, 451, 0, 0, 0, 389, 383, 0, 436, 0,
	0, 0, 391, 0, 410, 469, 0, 373, 474, 481,
	433, 147, 214, 484, 430, 429, 170, 0, 116, 0,
	193, 128, 422, 139, 466, 498, 488, 441, 479, 407,
	416, 118, 414, 177, 164, 205, 450, 464, 175, 142,
	197, 171, 204, 486, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 381, 374, 411, 472, 475, 396,
	460, 386, 418, 467, 419, 442, 401, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 379, 0, 188, 207, 224, 225, 380, 400,
	482, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 459, 178, 115, 206,
	184, 0, 395, 399, 393, 394, 446, 447, 492, 493,
	494, 470, 390, 0, 397, 398, 0, 477, 133, 235,
	236, 449, 99, 107, 140, 499, 221, 0, 172, 126,
	208, 0, 0, 424, 375, 428, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 179, 0, 432, 427, 454,
	456, 465, 473, 0, 404, 438, 0, 112, 487, 476,
	0, 435, 489, 405, 423, 497, 425, 426, 462, 384,
	445, 163, 420, 402, 100, 408, 377, 415, 378, 406,
	437, 124, 403, 0, 478, 448, 138, 233, 234, 495,
	141, 453, 0, 187, 151, 0, 0, 440, 480, 443,
	471, 434, 463, 392, 452, 490, 421, 458, 491, 50,
	0, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 457, 485, 417, 500, 0, 461, 376,
	455, 0, 382, 385, 496, 483, 412, 413, 0, 0,
	0, 0, 0, 0, 0, 439, 444, 468, 431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 409, 0, 451, 0, 0, 0, 389, 383, 0,
	436, 0, 0, 0, 391, 0, 410, 469, 0, 373,
	474, 481, 433, 147, 214, 484, 430, 429, 170, 0,
	116, 0, 193, 128, 422, 139, 466, 498, 488, 441,
	479, 407, 416, 118, 414, 177, 164, 205, 450, 464,
	175, 142, 197, 171, 204, 486, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 381, 374, 411, 472,
	475, 396, 460, 386, 418, 467, 419, 442, 401, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 379, 0, 188, 207, 224, 225,
	380, 400, 482, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 459, 178,
	115, 206, 184, 0, 395, 399, 393, 394, 446, 447,
	492, 493, 494, 470, 390, 0, 397, 398, 0, 477,
	133, 235, 236, 449, 99, 107, 140, 499, 221, 0,
	172, 126, 208, 0, 0, 424, 375, 428, 0, 0,
	0, 0, 0, 0, 0, 387, 388, 179, 0, 432,
	427, 454, 456, 465, 473, 0, 404, 438, 0, 112,
	487, 476, 0, 435, 489, 405, 423, 497, 425, 426,
	462, 384, 445, 163, 420, 402, 100, 408, 377, 415,
	378, 406, 437, 124, 403, 0, 478, 448, 138, 233,
	234, 495, 141, 453, 0, 187, 151, 0, 0, 440,
	480, 443, 471, 434, 463, 392, 452, 490, 421, 458,
	491, 0, 0, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 457, 485, 417, 500, 0,
	461, 376, 455, 0, 382, 385, 496, 483, 412, 413,
	0, 0, 0, 0, 0, 0, 0, 439, 444, 468,
	431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 409, 0, 451, 0, 0, 0, 389,
	383, 0, 436, 0, 0, 0, 391, 0, 410, 469,
	0, 373, 474, 481, 433, 147, 214, 484, 430, 429,
	170, 0, 116, 0, 193, 128, 422, 139, 466, 498,
	488, 441, 479, 407, 416, 118, 414, 177, 164, 205,
	450, 464, 175, 142, 197, 171, 204, 486, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 381, 374,
	411, 472, 475, 396, 460, 386, 418, 467, 419, 442,
	401, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 369, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 379, 0, 188, 207,
	224, 225, 380, 400, 482, 217, 218, 219, 220, 0,
	0, 0, 370, 368, 132, 182, 136, 143, 173, 222,
	459, 178, 115, 206, 184, 364, 395, 399, 393, 394,
	446, 447, 492, 493, 494, 470, 390, 0, 397, 398,
	0, 477, 133, 235, 236, 449, 99, 107, 140, 499,
	221, 0, 172, 126, 208, 0, 0, 424, 375, 428,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 179,
	0, 432, 427, 454, 456, 465, 473, 0, 404, 438,
	0, 112, 487, 476, 0, 435, 489, 405, 423, 497,
	425, 426, 462, 384, 445, 163, 420, 402, 100, 408,
	377, 415, 378, 406, 437, 124, 403, 0, 478, 448,
	138, 233, 234, 495, 141, 453, 0, 187, 151, 0,
	0, 440, 480, 443, 471, 434, 463, 392, 452, 490,
	421, 458, 491, 0, 0, 0, 95, 0, 97, 0,
	0, 0, 0, 0, 0, 113, 0, 457, 485, 417,
	500, 0, 461, 376, 455, 0, 382, 385, 496, 483,
	412, 413, 0, 0, 0, 0, 0, 0, 0, 439,
	444, 468, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 409, 0, 451, 0, 0,
	0, 389, 383, 0, 436, 0, 0, 0, 391, 0,
	410, 469, 0, 373, 474, 481, 433, 147, 214, 484,
	430, 429, 170, 0, 116, 0, 193, 128, 422, 139,
	466, 498, 488, 441, 479, 407, 416, 118, 414, 177,
	164, 205, 450, 464, 175, 142, 197, 171, 204, 486,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	381, 374, 411, 472, 475, 396, 460, 386, 418, 467,
	419, 442, 401, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 379, 0,
	188, 207, 224, 225, 380, 400, 482, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 459, 178, 115, 206, 184, 0, 395, 399,
	393, 394, 446, 447, 492, 493, 494, 470, 390, 0,
	397, 398, 0, 477, 133, 235, 236, 449, 99, 107,
	140, 499, 221, 0, 172, 126, 208, 0, 0, 424,
	375, 428, 0, 0, 0, 0, 0, 0, 0, 387,
	388, 179, 0, 432, 427, 454, 456, 465, 473, 0,
	404, 438, 0, 112, 487, 476, 0, 435, 489, 405,
	423, 497, 425, 426, 462, 384, 445, 163, 420, 402,
	100, 408, 377, 415, 378, 406, 437, 124, 403, 0,
	478, 448, 138, 233, 234, 495, 141, 453, 0, 187,
	151, 0, 0, 440, 480, 443, 471, 434, 463, 392,
	452, 490, 421, 458, 491, 0, 0, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 457,
	485, 417, 500, 0, 461, 376, 455, 0, 382, 385,
	496, 483, 412, 413, 0, 0, 0, 0, 0, 0,
	0, 439, 444, 468, 431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 409, 0, 451,
	0, 0, 0, 389, 383, 0, 436, 0, 0, 0,
	391, 0, 410, 469, 0, 373, 474, 481, 433, 147,
	214, 484, 430, 429, 170, 0, 116, 0, 193, 128,
	422, 139, 466, 498, 488, 441, 479, 407, 416, 118,
	414, 177, 164, 205, 450, 464, 175, 142, 197, 171,
	204, 486, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 381, 374, 411, 472, 475, 396, 460, 386,
	418, 467, 419, 442, 401, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 719, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 369, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	379, 0, 188, 207, 224, 225, 380, 400, 482, 217,
	218, 219, 220, 0, 0, 0, 370, 368, 132, 182,
	136, 143, 173, 222, 459, 178, 115, 206, 184, 364,
	395, 399, 393, 394, 446, 447, 492, 493, 494, 470,
	390, 0, 397, 398, 0, 477, 133, 235, 236, 449,
	99, 107, 140, 499, 221, 0, 172, 126, 208, 0,
	0, 424, 375, 428, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 179, 0, 432, 427, 454, 456, 465,
	473, 0, 404, 438, 0, 112, 487, 476, 0, 435,
	489, 405, 423, 497, 425, 426, 462, 384, 445, 163,
	420, 402, 100, 408, 377, 415, 378, 406, 437, 124,
	403, 0, 478, 448, 138, 233, 234, 495, 141, 453,
	0, 187, 151, 0, 0, 440, 480, 443, 471, 434,
	463, 392, 452, 490, 421, 458, 491, 0, 0, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 457, 485, 417, 500, 0, 461, 376, 455, 0,
	382, 385, 496, 483, 412, 413, 0, 0, 0, 0,
	0, 0, 0, 439, 444, 468, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 409,
	0, 451, 0, 0, 0, 389, 383, 0, 436, 0,
	0, 0, 391, 0, 410, 469, 0, 373, 474, 481,
	433, 147, 214, 484, 430, 429, 170, 0, 116, 0,
	193, 128, 422, 139, 466, 498, 488, 441, 479, 407,
	416, 118, 414, 177, 164, 205, 450, 464, 175, 142,
	197, 171, 204, 486, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 381, 374, 411, 472, 475, 396,
	460, 386, 418, 467, 419, 442, 401, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 359, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 369,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 379, 0, 188, 207, 224, 225, 380, 400,
	482, 217, 218, 219, 220, 0, 0, 0, 370, 368,
	362, 361, 136, 143, 173, 222, 459, 178, 115, 206,
	184, 364, 395, 399, 393, 394, 446, 447, 492, 493,
	494, 470, 390, 0, 397, 398, 0, 477, 133, 235,
	236, 449, 99, 107, 140, 499, 221, 0, 172, 126,
	208, 0, 0, 424, 375, 428, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 179, 0, 432, 427, 454,
	456, 465, 473, 0, 404, 438, 0, 112, 487, 476,
	0, 435, 489, 405, 423, 497, 425, 426, 462, 384,
	445, 163, 420, 402, 100, 408, 377, 415, 378, 406,
	437, 124, 403, 0, 478, 448, 138, 233, 234, 495,
	141, 453, 0, 187, 151, 0, 0, 440, 480, 443,
	471, 434, 463, 392, 452, 490, 421, 458, 491, 0,
	0, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 457, 485, 417, 500, 0, 461, 376,
	455, 0, 382, 385, 496, 483, 412, 413, 0, 0,
	0, 0, 0, 0, 0, 439, 444, 468, 431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 409, 0, 451, 0, 0, 0, 389, 383, 0,
	436, 0, 0, 0, 391, 0, 410, 469, 0, 373,
	474, 481, 433, 147, 214, 484, 430, 429, 170, 0,
	116, 0, 193, 128, 422, 139, 466, 498, 488, 441,
	479, 407, 416, 118, 414, 177, 164, 205, 450, 464,
	175, 142, 197, 171, 204, 486, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 381, 374, 411, 472,
	475, 396, 460, 386, 418, 467, 419, 442, 401, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 379, 0, 188, 207, 224, 225,
	380, 400, 482, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 459, 178,
	115, 206, 184, 0, 395, 399, 393, 394, 446, 447,
	492, 493, 494, 470, 390, 0, 397, 398, 0, 477,
	133, 235, 236, 449, 99, 107, 140, 499, 221, 0,
	172, 126, 208, 0, 0, 424, 375, 428, 0, 0,
	0, 0, 0, 0, 0, 387, 388, 179, 0, 432,
	427, 454, 456, 465, 473, 163, 404, 438, 100, 112,
	0, 289, 0, 0, 0, 124, 285, 0, 0, 0,
	138, 233, 234, 330, 141, 0, 0, 187, 151, 0,
	0, 0, 0, 321, 322, 0, 0, 0, 0, 0,
	0, 1003, 0, 50, 0, 0, 286, 309, 288, 311,
	312, 313, 314, 0, 0, 113, 310, 315, 316, 317,
	1004, 0, 0, 0, 283, 301, 0, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 299, 0, 0, 0, 0, 342, 0, 300,
	0, 0, 296, 297, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 340, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 344, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 318, 331, 341,
	337, 338, 335, 336, 334, 333, 332, 343, 323, 324,
	325, 326, 328, 0, 133, 235, 236, 327, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 934, 0, 289, 0, 0, 0, 124, 285, 0,
	0, 179, 138, 233, 234, 330, 141, 0, 0, 187,
	151, 0, 339, 112, 0, 321, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 286, 309,
	288, 311, 312, 313, 314, 0, 0, 113, 310, 315,
	316, 317, 0, 0, 0, 0, 283, 301, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 299, 279, 0, 0, 0, 342,
	0, 300, 0, 0, 296, 297, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 340, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 344, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 318,
	331, 341, 337, 338, 335, 336, 334, 333, 332, 343,
	323, 324, 325, 326, 328, 0, 133, 235, 236, 327,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 289, 0, 0, 0, 124,
	285, 0, 0, 179, 138, 233, 234, 330, 141, 0,
	0, 187, 151, 0, 339, 112, 0, 321, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 558,
	286, 309, 288, 311, 312, 313, 314, 0, 0, 113,
	310, 315, 316, 317, 0, 0, 0, 0, 283, 301,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 342, 0, 300, 0, 0, 296, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 340, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 344, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 318, 331, 341, 337, 338, 335, 336, 334, 333,
	332, 343, 323, 324, 325, 326, 328, 0, 133, 235,
	236, 327, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 289, 0, 0,
	0, 124, 285, 0, 0, 179, 138, 233, 234, 330,
	141, 0, 0, 187, 151, 0, 339, 112, 0, 321,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 286, 309, 288, 311, 312, 313, 314, 0,
	0, 113, 310, 315, 316, 317, 0, 0, 0, 0,
	283, 301, 0, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 279,
	0, 0, 0, 342, 0, 300, 0, 0, 296, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 340, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 344, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 318, 331, 341, 337, 338, 335, 336,
	334, 333, 332, 343, 323, 324, 325, 326, 328, 0,
	133, 235, 236, 327, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 163, 0, 179, 100, 0,
	0, 289, 0, 0, 0, 124, 285, 0, 339, 112,
	138, 233, 234, 330, 141, 0, 0, 187, 151, 0,
	0, 0, 0, 321, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 286, 309, 288, 311,
	312, 313, 314, 0, 0, 113, 310, 315, 316, 317,
	0, 0, 0, 0, 283, 301, 0, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 299, 0, 0, 0, 0, 342, 0, 300,
	0, 0, 296, 297, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 340, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 344, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 318, 331, 341,
	337, 338, 335, 336, 334, 333, 332, 343, 323, 324,
	325, 326, 328, 0, 133, 235, 236, 327, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 289, 0, 0, 0, 124, 285, 0,
	0, 179, 138, 233, 234, 330, 141, 0, 0, 187,
	151, 0, 339, 112, 0, 321, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 286, 309,
	288, 311, 312, 313, 314, 0, 0, 113, 310, 315,
	316, 317, 0, 0, 0, 0, 283, 301, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 299, 0, 0, 0, 0, 342,
	0, 300, 0, 0, 296, 297, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 340, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 344, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 318,
	331, 341, 337, 338, 335, 336, 334, 333, 332, 343,
	323, 324, 325, 326, 328, 0, 133, 235, 236, 327,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 179, 138, 233, 234, 330, 141, 0,
	0, 187, 151, 0, 339, 112, 0, 321, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	286, 309, 288, 311, 312, 313, 314, 0, 0, 113,
	310, 315, 316, 317, 0, 0, 0, 0, 0, 301,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 342, 0, 300, 0, 0, 296, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 340, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 2048, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 344, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 318, 331, 341, 337, 338, 335, 336, 334, 333,
	332, 343, 323, 324, 325, 326, 328, 0, 133, 235,
	236, 327, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 289, 0, 0,
	0, 124, 0, 0, 0, 179, 138, 233, 234, 330,
	141, 0, 0, 187, 151, 0, 339, 112, 0, 321,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 286, 309, 288, 311, 312, 313, 314, 0,
	0, 113, 310, 315, 316, 317, 0, 0, 0, 0,
	0, 301, 0, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 0,
	0, 0, 0, 342, 0, 300, 0, 0, 296, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 340, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 344, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 318, 331, 341, 337, 338, 335, 336,
	334, 333, 332, 343, 323, 324, 325, 326, 328, 0,
	133, 235, 236, 327, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 330, 141, 0, 0, 187, 151, 0, 339, 112,
	0, 321, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 286, 309, 288, 311, 312, 313,
	314, 0, 0, 113, 310, 315, 316, 317, 0, 0,
	0, 0, 0, 301, 0, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	299, 0, 0, 0, 0, 342, 0, 300, 0, 0,
	296, 297, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 340,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 344,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 318, 331, 341, 337, 338,
	335, 336, 334, 333, 332, 343, 323, 324, 325, 326,
	328, 0, 133, 235, 236, 327, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	339, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1474, 0, 0, 286, 0, 1265, 1266,
	1267, 0, 0, 0, 0, 113, 1270, 1268, 316, 317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 1272, 1277, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 1274, 0,
	1276, 1275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 286, 0,
	1265, 1266, 1267, 0, 0, 0, 0, 113, 1270, 1268,
	316, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 1272, 1277, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	1274, 0, 1276, 1275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 1265, 1266, 1267, 0, 0, 0, 0, 113,
	1270, 1268, 316, 317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 1272, 1277, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 1274, 0, 1276, 1275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 179, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 309, 928, 311, 312, 313, 314, 0,
	0, 113, 310, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 766, 179, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 767, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 1932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 0, 793, 794, 168, 795, 796, 797,
	799, 798, 768, 769, 770, 774, 772, 771, 773, 745,
	747, 212, 743, 746, 752, 748, 749, 750, 764, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	765, 775, 776, 777, 778, 779, 780, 781, 782, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 744, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	580, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 371, 0, 582, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 577, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	766, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 767,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 0, 793, 794,
	168, 795, 796, 797, 799, 798, 768, 769, 770, 774,
	772, 771, 773, 745, 747, 212, 743, 746, 752, 748,
	749, 750, 764, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 765, 775, 776, 777, 778, 779,
	780, 781, 782, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 744, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1767, 0,
	371, 0, 1765, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1764, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 179, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 0, 504, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1027, 147, 214, 0, 0, 0, 1022, 0,
	1021, 0, 1023, 1024, 0, 139, 0, 0, 1025, 1028,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 1627, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 1626, 210, 157, 162, 160, 209, 1628,
	202, 150, 146, 0, 105, 200, 148, 145, 1629, 926,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 922, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 23, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 0, 0, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 179,
	0, 0, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 95, 0,
	97, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 97, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 2007, 0, 0, 179, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 97, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 1449,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 708, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 710, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 95, 0, 97, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 23, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 0, 0, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 179, 0, 0, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 179, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 0, 0, 864, 0, 0, 865, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 97, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	824, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 802, 0, 0, 0, 0, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 803, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 729, 0,
	0, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 371, 0,
	728, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 708, 0, 0, 0, 0, 124,
	0, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 710, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 706, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	686, 124, 0, 0, 0, 179, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 97, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 354, 221, 0,
	172, 126, 208, 0, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 179, 0, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 97, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 0, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	179, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 97,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 235, 236, 0, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 163, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 179, 138, 233, 234, 0, 141, 0, 0,
	187, 151, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 97, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 1449, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 179, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 0, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	1581, 0, 0, 0, 118, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 97, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 0, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	179, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 710,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 235, 236, 0, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 163, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 179, 138, 233, 234, 0, 141, 0, 0,
	187, 151, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 604, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 0, 582, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 179, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 0, 504, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 0, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 0, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112,
}

var yyPact = [...]int16{
	2851, -1000, -230, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1534, 1577, -1000, -1000, -1000, -1000, -1000, -1000, 1341,
	2174, 390, 453, 144, 17848, 451, 2989, 18160, -1000, 179,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1253, -1000, -1000,
	-1000, -1000, -1000, 1503, 1532, 1268, 1495, 1407, -1000, 8783,
	385, 15037, 17536, 7161, -1000, 20344, 440, 434, 277, 411,
	20656, 364, 364, 20656, 20656, 18160, 445, 364, -1000, -198,
	-153, -1000, -40, 426, 18160, -1000, 18160, 380, 1120, 380,
	380, 380, 18160, -1000, 570, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18160, 1119, 1442,
	278, 5753, 5753, 5753, 5753, 270, 5753, 19, 1369, -1000,
	-1000, -1000, -1000, 5753, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 998, 1447, 9419, 9419, 1534, -1000,
	1253, -1000, -1000, -1000, 1432, -1000, -1000, 824, 1564, -1000,
	12227, 559, -1000, 9419, 73, 1121, -1000, -1000, -223, 1121,
	-1000, -1000, 533, -1000, -1000, -1000, 10355, 10355, 10355, 10355,
	10355, 10355, 10355, -1000, -1000, -1000, -1000, 58, 968, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 541, -1000,
	9107, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 9419,
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 2216,
	1121, 1121, 1121, 1121, -1000, 17223, 1247, 1301, -1000, -1000,
	-1000, 1491, 13789, 16911, 18160, 1191, -1000, 1260, 6809, 18,
	-1000, -1000, -1000, 678, 517, 16599, -1000, -1000, -1000, 1440,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1118, -1000, 12539, 12539, 16287, 20656, 364, 401, 208,
	364, 1244, 1115, 746, 1114, 1365, 425, 1483, 364, 18160,
	-1000, -1000, -1000, -1000, 15975, 5753, 397, 18160, 1459, 1362,
	18160, 1113, 1110, -1000, 6457, -1000, 5753, 5753, 5753, 5753,
	5753, 5753, 5753, 5753, -1000, -1000, -1000, -1000, -1000, -1000,
	5753, 5753, -1000, 36, -1000, 18160, -1000, -1000, -1000, -1000,
	1572, 605, 705, 513, 1262, -1000, 884, 1503, 998, 1407,
	15663, 1398, -1000, -1000, 18160, -1000, 9419, 9419, 791, -1000,
	20032, -1000, -1000, 4345, 609, 10355, 878, 638, 10355, 10355,
	10355, 10355, 10355, 10355, 10355, 10355, 10355, 10355, 10355, 10355,
	10355, 10355, 10355, 935, 2179, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1109, -1000, 317,
	-1000, 1253, 11603, 11603, 41, 41, 41, 41, 41, 41,
	19720, -1000, -238, 8159, -1000, 7513, 998, 1104, 745, 9107,
	8783, 8783, 9419, 9419, 10355, 19096, 8783, 1496, 706, 745,
	19096, -1000, 998, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 97, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 8783, 8783, 8783, 8783, 287, 18160, -1000, 19096, 15037,
	15037, 15037, 15037, 15037, -1000, 1401, 1400, -1000, 1397, 1390,
	1380, 18160, -1000, 1108, 13789, 443, 1121, -1000, 19408, -1000,
	-1000, 287, 1180, 15037, 18160, -1000, -1000, 6105, 1260, 18,
	1248, -1000, 4, -2, 7847, 7513, 582, -1000, -1000, -1000,
	-1000, 199, 13163, 206, -147, 43, -1000, -1000, -1000, -1000,
	-1000, 1300, -1000, -1000, -1000, 1300, 283, 1340, 1300, 1340,
	-1000, 1300, 1340, 89, 89, 89, 89, 89, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1339, 1323, -1000, 1300, 1300,
	1300, 1300, 1300, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1319, 313, 1319, 1302, 1302, -1000, -1000,
	206, 1338, 18160, 20656, 1361, 18160, 364, -214, 18160, -76,
	1105, 5753, 1456, 5753, 18160, 1549, 18160, -1000, -1000, -1000,
	12539, 18160, -1000, 1184, 18160, -1000, 18160, -1000, -1000, 18160,
	5753, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 688, -1000, -1000, -1000,
	-1000, 1402, 9419, 9419, 5049, 9419, -1000, -1000, -1000, 1447,
	-1000, 1496, 1523, -1000, 1422, 1421, 8783, -1000, -1000, 609,
	632, -1000, -1000, 762, -1000, -1000, -1000, -1000, 511, 1121,
	-1000, 2128, -1000, -1000, -1000, -1000, 878, 10355, 10355, 10355,
	668, 2128, 2028, 284, 2042, 41, 171, 171, 74, 74,
	74, 74, 74, 136, 136, -1000, -1000, -1000, -1000, -62,
	-1000, 1300, 1319, 313, 1319, 1302, 1302, -1000, -1000, 998,
	96, -93, -1000, -1000, -1000, -1000, -1000, -1000, -223, 991,
	-1000, -1000, 976, 998, 8783, 1092, 1104, -1000, 12227, -1000,
	-1000, 9419, -1000, 998, 1092, 1092, 809, 864, 617, 1182,
	1243, -1000, 498, 1092, 8783, 748, -1000, 9419, 998, -1000,
	-1000, 1092, 998, 1258, 1092, 1092, 1165, 1121, -1000, 1237,
	-1000, 667, 1301, 1328, 1358, 954, -1000, -1000, -1000, -1000,
	1381, -1000, 1313, -1000, -1000, -1000, -1000, -65, 424, 414,
	393, 20656, -1000, 1540, 15037, 1212, -1000, -1000, 1248, 18,
	-5, -1000, -1000, -1000, -1000, 745, 662, -1000, -1000, 1097,
	7513, 1246, 1433, -1000, -1000, -1000, -1000, -1000, -1000, 1322,
	782, 20656, 330, 342, 529, 428, 1083, -1000, -1000, -1000,
	881, -1000, 20656, -1000, 1571, -1000, -1000, 327, -1000, 306,
	713, 986, 18160, 182, 1321, 10979, 944, -1000, -250, -1000,
	44, -1000, -1000, 917, 89, 89, 1300, 89, 879, 89,
	89, -1000, -1000, 582, 1437, 582, 582, 582, 582, 981,
	981, -93, -93, -1000, -1000, -1000, -1000, 941, 1319, -1000,
	-1000, -1000, 931, -1000, 18160, 20656, 1318, 1354, 18160, 1481,
	18160, -1000, -1000, -1000, 1479, -1000, 7513, -1000, -1000, -1000,
	-1000, -1000, 1473, 1204, -1000, -1000, -1000, -1000, 429, -1000,
	1343, -1000, 895, 1352, 549, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 286, 461, -1000, 5753,
	-1000, 691, 18160, 18160, 1410, 745, 745, 496, -1000, -1000,
	18160, -1000, -1000, -1000, -1000, 1223, -1000, -1000, -1000, 5401,
	8783, -1000, 668, 2128, 911, -1000, 10355, 10355, 115, -1000,
	-1000, -1000, 109, 107, 59, -1000, -223, -1000, 1092, 8783,
	-227, -1000, 745, -1000, -1000, -1000, 2235, 935, 2235, 10355,
	10355, 10355, 10355, 10355, 5049, -57, 1205, 681, -1000, 9419,
	898, -1000, -1000, -1000, -1000, -1000, 1350, 19096, 1121, -1000,
	15351, 20656, 1534, 19096, 9419, 9419, -1000, -1000, 9419, 1314,
	-1000, 9419, -1000, -1000, -1000, -1000, 1312, 1121, 1121, 1121,
	1067, -1000, 1534, 1212, -1000, -1000, -1000, 2, -8, -1000,
	9419, -1000, 4697, -1000, 199, -1000, 18472, -1000, 1563, 1520,
	343, -6, -1000, 1081, 1039, -1000, 1031, -1000, -1000, 6,
	-1000, -179, 112, 101, -1000, -1000, 1121, -1000, 1307, 1467,
	-1000, 1445, 930, -1000, 10667, -219, -1000, -1000, -223, -1000,
	-1000, -1000, 1121, -1000, 1305, 1304, -1000, 1299, 1121, 492,
	-1000, -1000, -1000, -1000, -1000, 1158, 582, 582, 89, 582,
	1156, 1150, 582, 582, -1000, 639, -1000, -1000, -1000, -1000,
	1078, -1000, 1074, -1000, -1000, 1245, -1000, 1072, 1242, 1349,
	14413, 18160, 1303, 1253, 1463, 1253, 1238, -1000, 654, 1516,
	253, 18160, 1549, 1549, 20656, -1000, 326, 20656, -1000, -1000,
	20656, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20656, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 18160, -1000, -1000, -1000, -1000, -1000, 20656, 348,
	-1000, -1000, 977, 9419, -1000, -1000, -1000, 7513, -1000, 1540,
	15037, -1000, -1000, 998, -1000, 10355, 2128, 2128, 42, 40,
	29, -1000, 976, -1000, -1000, -1000, -1000, 1121, 998, 1300,
	1300, -1000, 1300, 1302, -1000, -1000, 1300, 133, 1300, 131,
	998, 998, 271, 402, 356, 256, 119, -1000, 1121, -47,
	-1000, 745, 9419, -1000, 1448, 1161, 1211, -1000, -1000, 8471,
	998, 1070, 488, 1067, 1503, -1000, 745, 745, 745, 18784,
	745, -95, 18784, 18784, 18784, 14725, 20656, 1503, -1000, -1000,
	-1000, -1000, 745, 3993, -1000, 7513, 1065, -1000, 275, 1300,
	391, 391, -195, 304, 303, 1121, -1000, -1000, -1000, -1000,
	-189, -1000, -1000, -1000, -1000, 713, -1000, 1299, 9419, 18784,
	135, -1000, 1222, 1149, 11291, -1000, 13475, -1000, 998, -1000,
	865, -1000, 840, 1145, 7513, -1000, -1000, -1000, 582, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 89, 972, 89, 929,
	-1000, 924, 14413, 20656, 18160, 1142, 1218, -1000, 264, 1298,
	18784, -1000, 1253, -1000, 7513, 3993, 395, 1501, -1000, -1000,
	1502, -1000, 1140, 1286, 20656, -1000, -1000, 335, -1000, 1283,
	-1000, -1000, -1000, -1000, 1451, 20656, -1000, -1000, 745, 1538,
	1213, -1000, 2128, -1000, -1000, -1000, -1000, 602, -1000, -1000,
	279, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10355, 10355, -1000, 10355, 10355, 10355, 998, 966, 745, 301,
	-1000, 1121, -1000, -1000, 1217, 20656, 20656, -1000, -1000, 1063,
	-1000, -1000, 1061, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1059, 1059, 1059, 443, -1000, -1000, -1000, -1000, -1000, -1000,
	740, 18472, 1475, -1000, -1000, -1000, 751, -1000, -1000, 822,
	260, 737, -1000, 20656, -189, 9419, -1000, 1121, 821, 1054,
	9419, 1282, 923, -1000, 1137, -1000, 96, -93, -1000, -1000,
	-1000, -1000, -1000, -1000, 1121, -1000, 582, -1000, 582, 1136,
	1135, 1129, 1281, 1280, -200, 917, 14413, 1037, -1000, -1000,
	-1000, 20656, -1000, -1000, -1000, -1000, -1000, 235, 2882, -1000,
	12851, 1279, 1273, 18784, 1121, 354, 1536, 1531, -1000, 1048,
	998, 1530, -1000, -1000, 271, 271, 271, 271, 99, -1000,
	-1000, 1570, -1000, 1121, -1000, 1253, 486, -1000, 20656, -1000,
	-1000, -95, -1000, -1000, -1000, -65, 1346, 1208, 160, -1000,
	1002, 650, 896, 649, 642, 641, 634, 631, 628, 627,
	-1000, -1000, -1000, 1565, -1000, -1000, -1000, 1568, 1272, -1000,
	1271, 821, 9419, 262, 1347, 853, -1000, 1055, 1049, -1000,
	-1000, -1000, -1000, -200, 14413, 18472, 1540, 1270, 1038, 1540,
	1131, -1000, 230, 2882, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1534, 20656, 20656, 20656, 20656, 456, 10043,
	9419, 1026, 3583, 12851, 12851, 3583, 12851, 12851, 18472, 18472,
	1035, 281, 299, -1000, 9419, 9419, -1000, 998, -1000, 9419,
	-1000, -1000, -1000, -1000, 998, 214, -112, 19096, 1211, 998,
	20656, -1000, -1000, -1000, -1000, 20656, -1000, -108, 1208, 20656,
	-1000, 913, -1000, -1000, 870, 910, 870, 870, 870, 870,
	870, 391, 391, 20656, 18472, 262, 821, -1000, -51, 1561,
	-135, 228, -1000, -1000, 1540, 1013, 1030, 740, 18784, -200,
	740, -66, 20656, 9419, 2875, -1000, 1503, 1210, 11915, -1000,
	-1000, -1000, -1000, 20656, 1558, 1556, 1544, 1542, 2430, 73,
	674, 204, -1000, -1000, 3583, -1000, -1000, -1000, -1000, -1000,
	1025, 1023, 1244, 1021, -1000, 20656, 1267, 745, 1203, -1000,
	1179, -1000, 745, -1000, 1406, -60, -114, 1169, -1000, -1000,
	1121, 1018, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 713, 713, 1016, 1012, -1000, 262,
	-1000, 391, 391, -1000, -1000, -1000, 175, 920, 900, 899,
	891, 62, -1000, 1528, 740, 1540, 740, 1346, 1010, 1540,
	1346, -1000, -225, -1000, 745, -1000, -1000, 2882, 1447, 20656,
	229, -1000, -1000, 1450, -1000, -1000, -1000, -1000, -1000, 2882,
	2882, 2882, -1000, 341, -76, -1000, 281, 1420, 18472, 9419,
	-1000, 1353, -1000, 20656, -1000, 1208, -1000, -1000, 344, 740,
	-1000, -1000, -1000, 852, -1000, 837, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14101, 1346, 740, -1000, -1000, -1000, 740,
	-1000, 9419, -234, -1000, -1000, 12539, 1500, 20656, 2679, -1000,
	117, 2631, 217, -1000, 219, -1000, -1000, 282, 1008, -1000,
	-85, 998, -1000, 18160, 1346, -1000, -1000, -1000, 464, -1000,
	-1000, 1346, 745, 675, 1253, -1000, -1000, -1000, 669, 684,
	-1000, 213, -1000, 274, -1000, -134, -1000, 1265, -1000, 7513,
	-1000, -1000, -1000, 359, 197, -1000, -1000, 1121, -117, 20656,
	-1000, -1000, 2882, 9731, -1000, 997, 2579, 271, 998, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1853, 16, 77, 1851, 1850, 1849, 1603, 1601, 1598,
	1592, 1847, 1846, 1845, 1841, 1840, 1839, 1838, 1837, 1835,
	1833, 1831, 1828, 1827, 1826, 1825, 1824, 1823, 636, 1822,
	1820, 1818, 100, 1816, 109, 1808, 1807, 80, 104, 78,
	75, 1936, 1805, 46, 114, 102, 1798, 72, 1797, 1796,
	186, 1793, 97, 1792, 1790, 1921, 1789, 1787, 40, 32,
	22, 55, 1784, 1781, 106, 249, 1778, 1771, 1768, 51,
	1766, 1765, 94, 23, 31, 28, 43, 1762, 50, 21,
	1759, 88, 1758, 1756, 1755, 1753, 41, 1750, 90, 34,
	15, 11, 1749, 29, 18, 99, 69, 49, 24, 122,
	96, 1748, 68, 95, 86, 1747, 1746, 1053, 1745, 1744,
	1743, 1742, 1741, 1739, 858, 119, 1738, 1734, 1733, 70,
	0, 426, 92, 105, 1732, 1731, 1730, 2125, 120, 103,
	48, 1729, 98, 81, 73, 1728, 1727, 71, 117, 5,
	113, 101, 1726, 115, 1725, 1724, 1721, 134, 107, 59,
	44, 79, 1720, 1717, 1714, 82, 74, 67, 89, 91,
	25, 1713, 1710, 1709, 54, 1708, 30, 37, 3, 84,
	1707, 1706, 1704, 1703, 47, 66, 1701, 39, 1700, 42,
	4, 10, 1, 7, 1699, 1694, 1692, 12, 1690, 45,
	1688, 9, 1683, 14, 1673, 1662, 1661, 65, 1660, 1658,
	1657, 20, 1656, 1655, 33, 19, 61, 53, 1654, 1653,
	57, 83, 58, 1650, 56, 6, 2, 111, 1649, 13,
	1646, 1645, 1644, 26, 27, 1642, 1640, 1639, 1638, 1636,
	1635, 52, 1632, 1623, 1622, 1620, 1619, 8, 1618, 1617,
	1613, 1612, 1343, 1126, 1610, 1609, 36, 1606, 1605, 1596,
	1594, 539,
}

var yyR1 = [...]uint8{
	0, 240, 241, 241, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 244,
	244, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 220, 220, 219, 221, 221, 12, 12, 12, 12,
	12, 213, 213, 213, 213, 213, 13, 13, 216, 216,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 233, 233, 232, 232, 135, 135, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 245, 245, 246, 246,
	246, 246, 246, 246, 246, 211, 211, 211, 212, 212,
	212, 214, 214, 215, 215, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 218, 218, 195, 195, 195, 196,
	196, 196, 196, 196, 196, 198, 198, 199, 199, 125,
	125, 193, 193, 192, 191, 191, 190, 190, 189, 200,
	200, 20, 171, 172, 172, 172, 172, 172, 172, 172,
	159, 159, 139, 139, 139, 139, 139, 139, 139, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 206, 206, 206, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 208, 209,
	202, 202, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 149, 149, 149, 149,
	149, 149, 201, 201, 197, 197, 197, 197, 197, 197,
	197, 197, 143, 143, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 142, 142, 142, 142, 142, 142,
	142, 142, 144, 144, 144, 144, 144, 144, 144, 144,
	140, 140, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 146, 146, 146, 146, 146,
	146, 146, 146, 158, 158, 147, 147, 156, 156, 157,
	157, 157, 148, 148, 148, 155, 155, 155, 152, 152,
	153, 153, 154, 154, 154, 150, 150, 150, 151, 151,
	151, 161, 182, 182, 182, 184, 184, 185, 185, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	170, 170, 210, 210, 181, 181, 181, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 169, 169, 179, 179,
	180, 180, 177, 177, 177, 178, 164, 164, 164, 164,
	164, 165, 166, 166, 166, 166, 162, 163, 204, 204,
	204, 238, 238, 238, 238, 238, 238, 239, 239, 205,
	205, 167, 167, 168, 168, 175, 175, 175, 175, 247,
	247, 173, 173, 174, 174, 174, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 248, 248, 249, 249, 249, 249, 249, 249, 249,
	188, 186, 186, 187, 187, 17, 18, 18, 18, 18,
	18, 19, 19, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 112, 112, 109,
	109, 110, 110, 111, 111, 111, 113, 113, 113, 136,
	136, 136, 23, 23, 25, 25, 26, 27, 24, 24,
	24, 24, 24, 250, 28, 29, 29, 30, 30, 30,
	34, 34, 34, 32, 32, 33, 33, 39, 39, 38,
	38, 40, 40, 40, 40, 124, 124, 124, 123, 123,
	234, 234, 234, 234, 234, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 223, 223, 222, 222, 224, 224,
	224, 224, 224, 224, 57, 57, 93, 93, 93, 96,
	96, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 131, 131, 130, 130, 130, 129, 129, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 58, 58, 58, 58, 59, 59, 94, 94,
	41, 41, 41, 41, 41, 41, 41, 108, 108, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 71, 71, 71, 71, 71, 71, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 37, 37,
	72, 72, 72, 78, 73, 73, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 69, 69, 69, 69, 69, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 251, 251, 70, 70, 70, 70, 35, 35,
	35, 35, 35, 134, 134, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 82, 82, 36,
	36, 80, 80, 81, 83, 83, 79, 79, 79, 225,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	66, 66, 66, 84, 84, 85, 85, 235, 235, 236,
	236, 237, 86, 86, 87, 87, 88, 89, 89, 89,
	90, 90, 90, 90, 91, 91, 91, 63, 63, 63,
	63, 63, 63, 92, 92, 92, 92, 97, 97, 74,
	74, 76, 76, 75, 77, 98, 98, 102, 99, 99,
	103, 103, 103, 103, 103, 101, 101, 101, 126, 126,
	126, 106, 106, 114, 114, 115, 115, 107, 107, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 117,
	117, 117, 118, 118, 121, 121, 122, 122, 127, 127,
	127, 128, 128, 226, 226, 226, 227, 227, 227, 228,
	228, 229, 230, 230, 231, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 242, 243, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 0, 3, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 7, 8, 7, 5, 5,
	5, 11, 11, 9, 5, 8, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	2, 2, 3, 1, 1, 1, 1, 1, 0, 2,
	2, 3, 2, 4, 2, 4, 2, 2, 3, 2,
	3, 2, 7, 9, 3, 3, 6, 9, 9, 8,
	8, 5, 8, 7, 4, 2, 4, 6, 2, 1,
	1, 2, 1, 1, 1, 3, 3, 1, 2, 1,
	1, 2, 0, 4, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 2, 4, 6, 2, 3, 2, 3,
	1, 3, 0, 2, 0, 3, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 2, 2, 2,
	1, 1, 1, 3, 3, 2, 2, 2, 1, 1,
	1, 1, 4, 4, 4, 4, 4, 1, 5, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 3, 3, 0, 1,
	0, 1, 0, 2, 1, 0, 3, 3, 0, 1,
	2, 6, 0, 1, 4, 1, 2, 1, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 0, 2, 5, 2, 3, 3,
	2, 3, 2, 2, 3, 4, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 5, 5, 8,
	8, 13, 1, 1, 2, 2, 10, 7, 0, 1,
	1, 0, 1, 1, 1, 2, 2, 1, 2, 0,
	3, 0, 1, 1, 3, 0, 4, 1, 3, 2,
	1, 1, 2, 1, 1, 1, 6, 11, 13, 13,
	6, 7, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 6, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 3, 4, 4, 5, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 0, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 4, 8, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 2, 4, 5, 5, 6, 4, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 3,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 1, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 5, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 2, 0,
	1, 4, 1, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -240, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 31, -20,
	121, 122, 124, 123, 154, 125, 147, 52, 203, 204,
	206, 207, 26, 148, 149, 152, 153, -242, 8, 310,
	56, -241, 358, -86, 15, -30, 5, -28, -250, -28,
	-28, -28, -28, -28, -171, 56, -238, -239, -200, 130,
	163, 302, 127, 143, 161, 162, 330, 128, 342, 343,
	145, 345, 75, -107, 131, 133, 128, 128, 129, 131,
	302, 127, 128, -55, -127, 59, -120, 61, 170, 321,
	21, 203, 216, 217, 208, 249, 237, 322, 168, 234,
	238, 288, 356, 68, 206, 297, 137, 174, 150, 229,
	232, 231, 223, 220, 28, 255, 328, 222, 140, 256,
	260, 267, 289, 317, 213, 214, 291, 253, 33, 142,
	323, 37, 158, 292, 258, 252, 247, 130, 251, 212,
	246, 41, 226, 262, 261, 263, 287, 240, 169, 266,
	242, 224, 241, 18, 153, 156, 257, 259, 221, 171,
	135, 160, 327, 293, 219, 157, 172, 152, 296, 344,
	167, 207, 290, 215, 299, 202, 201, 40, 273, 233,
	210, 225, 211, 139, 204, 165, 244, 159, 227, 228,
	250, 209, 245, 205, 161, 154, 298, 274, 329, 243,
	239, 235, 236, 166, 131, 163, 164, 280, 281, 282,
	283, 325, 294, 230, 275, 276, 176, 177, 178, 179,
	180, 181, 182, 34, 35, 318, 319, 128, 115, 238,
	121, 278, 129, 33, 160, -136, 128, -109, 164, 280,
	281, 282, 283, 59, 290, 289, 284, -127, 205, -132,
	-132, -132, -132, -132, -2, -90, 17, 16, -5, -3,
	-242, 6, 21, 22, -34, 42, 43, -29, -40, 106,
	-41, -127, -60, 77, -65, 29, 59, -120, 61, 24,
	-64, -61, -79, -225, -77, -78, 115, 116, 104, 105,
	112, 78, 117, -69, -67, -68, -70, -228, -121, 60,
	69, 62, 63, 64, 65, 70, 71, 72, 300, -75,
	-242, 46, 47, 311, 312, 313, 314, 320, 315, 80,
	36, 301, 309, 308, 307, 305, 306, 303, 304, 355,
	134, 302, 110, 310, 264, -107, -43, -44, -45, -46,
	-57, -78, -242, -55, 11, -50, -55, -99, -135, 205,
	-103, 290, 289, -122, 300, -101, -121, -119, 288, 238,
	287, 59, -120, 126, 184, 333, 76, 23, 25, 271,
	277, 183, 79, 115, 16, 80, 190, 342, 343, 114,
	311, 121, 50, 303, 304, 301, 188, 313, 314, 302,
	278, 195, 20, 29, 353, 10, 26, 148, 22, 108,
	123, 185, 83, 84, 151, 24, 149, 72, 191, 193,
	19, 53, 141, 11, 332, 13, 14, 347, 334, 134,
	133, 95, 346, 129, 48, 8, 117, 27, 354, 92,
	44, 146, 194, 46, 93, 17, 305, 306, 32, 320,
	155, 110, 51, 38, 348, 77, 349, 70, 54, 295,
	189, 75, 15, 49, 156, 350, 143, 192, 94, 124,
	310, 47, 186, 351, 127, 187, 6, 316, 31, 147,
	45, 128, 279, 82, 132, 71, 162, 5, 145, 9,
	52, 55, 307, 308, 309, 36, 81, 12, 144, 324,
	73, -172, -159, -121, 61, 129, 129, 131, -233, 201,
	131, -121, -115, 134, -115, -121, -121, -55, 128, -115,
	345, 342, 343, 310, 128, -55, -55, -114, 134, 59,
	-114, -114, -114, -55, 118, -55, 59, 31, 302, 59,
	160, 128, 161, 131, -133, -242, -122, -133, -133, -133,
	165, 166, -133, -110, 285, 54, -133, -243, 58, -91,
	19, 32, -41, -127, -87, -88, -41, -86, -2, -28,
	38, -32, 22, 67, 11, -124, 76, 75, 92, -123,
	23, -121, 61, 118, -41, -62, 95, 77, 93, 94,
	79, 101, 100, 111, 104, 105, 106, 107, 108, 109,
	110, 102, 103, 114, 355, 85, 86, 87, 88, 89,
	90, 91, 96, 97, 98, 99, -108, -242, -197, 355,
	-78, -242, 119, 120, -65, -65, -65, -65, -65, -65,
	-65, -229, 265, -242, 61, 118, -2, -73, -41, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -82, -41,
	-242, -251, -242, -251, -251, -251, -251, -251, -251, -251,
	-138, 115, 238, 150, 229, -141, -140, 244, 243, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 237,
	322, -242, -242, -242, -242, -56, 27, -55, 31, 57,
	-51, -53, -52, -54, 44, 48, 50, 45, 46, 47,
	51, -131, 23, -43, -242, -130, 156, -129, 23, -127,
	61, -55, -50, -244, 57, 11, 55, 57, -99, 205,
	-100, -104, 291, 293, 85, 118, -126, -121, 61, 29,
	31, 58, 57, -160, -139, -143, -140, -145, -144, -146,
	-121, -141, -142, 237, 322, 234, 238, 235, 240, 241,
	242, 115, 239, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 243, 255, 31, 150, 227, 228,
	229, 232, 231, 233, 230, 256, 257, 258, 259, 260,
	261, 262, 263, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 222, 223, 224, 226, 225,
	-160, -121, 54, 200, -121, -115, 131, 202, -115, -193,
	55, 59, 77, 59, 54, -211, 54, 19, 183, 184,
	23, -115, -55, -55, 295, -133, 132, -55, 24, 54,
	-55, 59, 59, -128, -127, -119, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -112, 279, 286, -55,
	9, 95, 57, 18, 118, 57, -89, 25, 26, -90,
	-243, -34, -66, -121, 62, 65, -33, 45, -55, -41,
	-41, -71, 70, 77, 71, 72, -123, 106, -128, -122,
	-119, -65, -72, -75, -78, 66, 95, 93, 94, 79,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -134, 59, 61, -143, 228,
	-138, -141, 219, 220, 222, 223, 224, 226, 225, 59,
	238, 228, 268, 117, 244, 253, 254, -64, 61, -121,
	-64, -121, 359, -39, 22, -38, -73, -40, -41, -122,
	-243, 57, -243, -2, -38, -38, -41, -41, -79, -65,
	-79, -121, -127, -38, -32, -80, -81, 81, -79, -243,
	236, -38, -39, -38, -38, -38, -95, 156, -55, -98,
	-102, -79, -44, -45, -45, -44, -45, 44, 44, 44,
	49, 44, 49, 44, -52, -127, -243, -58, 52, 133,
	53, -242, -129, -95, 55, -43, -55, -103, -100, 57,
	292, 294, 295, 54, 73, -41, -122, -151, 115, 114,
	-175, -247, 325, 35, -159, -161, -164, -162, -163, -176,
	-165, 137, 135, 139, 140, 145, -169, 129, 146, 70,
	77, -206, 137, -208, 54, 271, 277, 135, 146, 145,
	356, 68, 138, 332, 334, 29, 30, -154, 359, 265,
	-152, 274, -147, 56, -147, -147, 236, -148, 56, -147,
	-148, -147, -148, -150, 238, -150, -150, -150, -150, 56,
	56, -147, -147, -147, -147, -147, -156, 56, 221, -156,
	-156, -157, 56, -157, 54, 55, -55, -121, 54, -55,
	-115, -232, 353, 354, -55, -191, 324, -192, 59, -133,
	24, -133, -55, -214, -212, 8, 9, 10, -55, -139,
	-55, -116, 126, 123, 124, -188, 122, 271, 238, 68,
	29, 15, 311, 156, 329, 59, 157, -55, -55, -55,
	-133, -111, 11, 95, 40, -41, -41, -128, -88, -91,
	-106, 19, 11, 36, 36, -38, 70, 71, 72, 118,
	-242, -72, -65, -65, -65, -37, 151, 76, 324, -243,
	236, -155, 324, 325, -230, -231, 61, -243, -38, 57,
	-243, -243, -41, -243, -243, -243, 57, 55, 23, 57,
	11, 57, 57, 11, 118, -243, -38, -83, -81, 83,
	-41, -243, -243, -243, -243, -243, -63, 31, 36, -2,
	-242, -242, -59, 57, 12, 85, -48, -47, 54, 55,
	-49, 54, -47, 44, 44, -223, 324, 129, 129, 129,
	-96, -121, -59, -43, -59, -104, -105, 296, 293, 299,
	85, 59, -173, -122, 57, 34, 56, -205, 54, 77,
	-167, -121, 146, -169, -169, 59, -169, 59, 129, 59,
	70, 19, -121, 9, 146, 146, -205, 61, -55, -202,
	333, 16, 56, -207, 56, 61, 62, 63, 70, -149,
	69, -61, 266, -69, 301, 304, 303, 267, -121, -127,
	-209, 62, 360, -153, 275, 62, -150, -150, -147, -150,
	62, 59, -150, -150, -151, 31, -151, -151, -151, -151,
	-158, 61, -158, -155, -155, 62, -156, 62, -55, -121,
	56, 54, -55, 23, -55, 23, -190, -189, -122, -195,
	23, 54, 57, -211, 55, -132, -125, 137, -164, -249,
	163, 145, 136, 141, 140, 59, 135, 139, 156, -194,
	163, 136, 137, 141, 140, 59, 129, 146, 135, 139,
	156, 145, -117, -118, 132, 23, 129, 146, 156, 126,
	-133, -113, 93, 12, -127, -127, 41, 118, -55, -42,
	11, 106, -122, -39, -37, 76, -65, -65, 227, 227,
	227, 360, 57, -197, -243, -40, -234, 357, -137, 115,
	234, 150, 229, 223, 253, 254, 240, 273, 227, 274,
	-134, -137, -65, -65, -65, -65, -65, -122, 321, -86,
	84, -41, 82, -97, 54, -98, -74, -76, -75, -242,
	-2, -92, -121, -96, -86, -102, -41, -41, -41, 56,
	-41, 56, -242, -242, -242, -243, 57, -86, -59, 293,
	297, 298, -41, 85, -122, -175, -180, -177, -121, 146,
	10, 9, 19, 141, 135, 356, 59, 59, 59, -204,
	145, 342, 343, 344, -206, 356, -149, 267, -242, 56,
	23, 29, 62, -207, 56, -197, 355, -197, -242, -147,
	56, -147, 56, 56, 118, 58, -151, -151, -150, -151,
	58, 58, -151, -151, 59, 115, 58, 57, 58, 57,
	58, 57, 56, 55, 54, -179, -180, -69, -121, -55,
	56, -2, 23, -2, 57, 85, -196, 19, 171, 172,
	-55, -212, -214, -121, -248, 129, 146, -121, -132, -121,
	-132, -121, -55, -132, -121, 137, -164, 61, -41, -59,
	-43, -243, -65, 276, 276, 276, -231, -242, -243, -147,
	-147, -147, -157, -147, 214, -147, 214, -243, -243, -243,
	19, 57, -243, 57, 19, -242, -36, 316, -41, 28,
	-97, 57, -243, -243, -243, 57, 118, -243, -90, -93,
	-121, 146, -222, -224, 347, 348, 349, 350, 351, 352,
	-93, -93, -93, -130, -121, -90, -174, -122, 61, 62,
	58, 57, -147, -178, 269, -147, -166, 167, 168, 31,
	169, -166, 344, 146, 146, -242, -204, -205, -41, -93,
	56, 334, 57, 58, -207, -121, 238, 228, 244, 253,
	-243, 58, 58, 58, -122, -151, -150, 61, -150, 62,
	62, -179, -121, -55, 58, 56, 56, -93, -2, -189,
	-174, 132, 21, 6, 8, 9, 10, 19, 23, -245,
	56, -121, 145, 56, 27, -121, -84, 13, -243, -235,
	-86, 156, -150, 59, -65, -65, -65, -65, -65, -243,
	61, 146, -76, 36, -2, -242, -121, -121, 57, 58,
	58, 57, -243, -243, -243, -58, -182, -184, 324, -183,
	55, 142, 68, 176, 177, 178, 179, 180, 181, 182,
	-177, -89, -205, 54, 70, 170, -205, 54, -167, -121,
	-204, -41, -242, -243, 58, -41, 56, 62, 58, -151,
	-151, 58, 58, 58, 56, 56, -94, 346, -179, 58,
	-168, -121, 185, -215, -217, -7, -9, -8, -11, -10,
	-12, -13, -14, -3, 20, 189, 190, 195, 191, 144,
	134, -246, -121, 104, 85, 61, -159, 57, 56, 56,
	-93, -242, 135, -85, 14, 16, -243, -86, -243, 16,
	-243, -243, -243, -243, -35, 95, 324, 9, -74, -2,
	118, -121, -224, -223, -181, 54, -183, 324, 56, 326,
	59, -170, 85, 61, 85, 85, 85, 85, 85, 85,
	85, 9, 10, 56, 56, -243, -41, -201, 169, 54,
	58, -203, 58, 58, -94, -179, -180, -59, 56, 58,
	-59, -198, 57, 55, 186, -217, -86, -220, -121, -219,
	-121, -121, -121, -213, 38, 192, 193, 194, -60, -65,
	-41, -60, 58, -246, -121, -246, -246, -246, -246, -246,
	-180, -180, 58, -186, -187, 156, 146, -41, -73, -243,
	-236, -237, -41, -243, 322, 51, 327, -98, -243, -121,
	-121, -185, -183, -121, 62, -210, 54, 73, 62, -210,
	-210, -210, -210, -210, -166, -166, -168, -180, -201, -243,
	317, 10, 9, 330, 331, 58, 204, 336, 337, 155,
	338, 169, 339, 340, -59, 58, 58, -182, -93, -94,
	-182, -199, 324, -121, -41, -218, -217, 203, -90, 57,
	-221, -139, 187, -121, 11, 11, 11, 11, -217, 203,
	82, 203, 58, 58, -193, -243, 57, -121, 56, 57,
	41, 323, 328, -242, 58, 57, -205, -205, 58, 58,
	-201, -166, -166, 324, 62, 16, 62, 62, 62, 62,
	337, 155, 339, 16, -182, -59, -182, -181, 58, -59,
	-181, 356, -217, -91, -219, -121, 188, 27, -216, -217,
	-215, -216, -226, 196, 77, -191, -187, 36, -180, -237,
	41, -121, -183, 138, -182, 62, 62, 341, -127, -181,
	-182, -182, -41, 358, 19, -121, 84, -217, 358, 84,
	-227, 197, 196, 158, 58, 324, -243, -55, -181, 118,
	-181, 84, -2, 84, 83, 199, 198, 159, 327, 56,
	-122, 134, 203, -242, 328, -168, -216, -65, 155, 58,
	84, -243, -243,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 802, 0, 523, 523, 523, 523, 523, 523, 0,
	-2, 857, 0, 0, 0, 0, -2, 513, 514, 0,
	516, 517, 1164, 1164, 1164, 1164, 1164, 0, 33, 34,
	1162, 1, 3, 810, 0, 0, 527, 530, 525, 889,
	857, 0, 0, 0, 88, 163, 0, 0, 0, 0,
	0, 855, 855, 0, 0, 0, 0, 855, 402, 403,
	404, 407, 0, 0, 0, 858, 0, 853, 0, 853,
	853, 853, 0, 472, 610, 878, 879, 880, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 0, 0, 0,
	0, 1165, 1165, 1165, 1165, 0, 1165, 501, 490, 492,
	493, 494, 495, 1165, 510, 511, 500, 512, 515, 518,
	519, 520, 521, 522, 27, 814, 889, 889, 802, 29,
	0, 523, 528, 529, 533, 531, 532, 524, 0, 541,
	545, 0, 620, 889, 625, 627, -2, -2, -2, 0,
	666, 667, 668, 669, 670, 671, 889, 889, 889, 889,
	889, 889, 889, 698, 699, 700, 701, 0, 776, 783,
	784, 785, 786, 787, 788, 789, 629, 630, 0, 834,
	889, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 732, 732, 732, 732, 732, 732, 732, 732, 0,
	0, 0, 0, 0, 890, 0, 0, 557, 559, 560,
	561, 591, 0, 593, 0, 0, 41, 45, 0, 1128,
	838, -2, -2, 0, 0, 0, 876, 877, -2, 1035,
	-2, 874, 875, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 0, 164, 178, 178, 0, 0, 855, 0, 0,
	855, 151, 0, 0, 0, 0, 0, 0, 855, 0,
	408, 405, 406, 160, 0, 1165, 0, 0, 0, 0,
	0, 0, 0, 471, 0, 473, 1165, 1165, 1165, 1165,
	1165, 1165, 1165, 1165, 482, 1166, 1167, 483, 484, 485,
	1165, 1165, 487, 0, 502, 0, 496, 28, 1163, 22,
	0, 0, 811, 0, 803, 804, 807, 810, 27, 530,
	0, 535, 534, 526, 0, 542, 889, 889, 0, 546,
	0, 548, 549, 0, 623, 889, 0, 0, 889, 889,
	889, 889, 889, 889, 889, 889, 889, 889, 889, 889,
	889, 889, 889, 0, 0, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 626, 0, 781, 0,
	640, 0, 0, 0, 689, 690, 691, 692, 693, 694,
	695, 702, 0, -2, 782, 0, 27, 0, 664, 889,
	889, 889, 889, 889, 889, 0, 889, 533, 0, 768,
	0, 723, 0, 724, 725, 726, 727, 728, 729, 730,
	731, 759, 0, 761, 762, 763, 764, 765, 766, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 280,
	281, 889, -2, 889, 889, 43, 0, 609, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 601, 0, 0,
	0, 0, 592, 0, 0, 612, 1090, 594, 0, 596,
	597, -2, 0, 0, 0, 39, 40, 0, 46, 1128,
	48, 73, 0, 0, 889, 0, 338, 848, 849, 850,
	846, 415, 0, 170, 332, 328, 173, 174, 175, 176,
	177, 315, 253, -2, -2, -2, -2, -2, -2, -2,
	-2, 315, -2, -2, -2, -2, -2, 335, -2, -2,
	-2, -2, -2, 301, -2, 1050, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	171, 0, 0, 0, 0, 0, 855, 0, 0, 154,
	0, 1165, 0, 1165, 0, 0, 0, 115, 116, 117,
	178, 0, 161, 0, 0, 438, 0, 466, 854, 0,
	1165, 469, 470, 611, 881, 882, 474, 475, 476, 477,
	478, 479, 480, 481, 486, 489, 503, 497, 498, 491,
	815, 0, 889, 889, 0, 889, 806, 808, 809, 814,
	30, 533, 0, 790, 0, 0, 889, 536, 25, 621,
	622, 624, 641, 0, 643, 645, 547, 543, 0, 777,
	-2, 631, 632, 660, 661, 662, 0, 889, 889, 889,
	658, 636, 0, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 686, 743, 744, 687, 0,
	697, 315, 317, 317, 317, 319, 319, 270, 271, 0,
	0, 325, 247, 248, 249, 250, 251, 684, 244, 0,
	685, 696, 0, 0, 889, 0, 0, 539, 545, 779,
	663, 889, 833, 27, 0, 0, 0, 0, 668, 0,
	0, 776, 0, 0, 889, 774, 771, 889, 0, 733,
	760, 0, 0, 538, 0, 0, 0, 0, 608, 616,
	835, 0, 558, 587, 589, 0, 584, 599, 600, 602,
	0, 604, 0, 606, 607, 562, 563, 564, 0, 0,
	0, 0, 595, 616, 0, 616, 42, 839, 47, 0,
	0, 76, 77, 840, 841, 842, 0, 844, 339, 0,
	162, 417, 0, 420, 165, 166, 167, 168, 169, 0,
	409, -2, 1095, 1118, 1053, 0, 0, 376, 377, 180,
	0, 182, 0, 184, 0, 186, 187, 0, 189, 191,
	409, 0, 0, 0, 0, 0, 0, 179, 0, 334,
	330, 329, 252, 0, 335, 335, 315, 335, 0, 335,
	335, 289, 290, 338, 0, 338, 338, 338, 338, 0,
	0, 325, 325, 275, 276, 277, 264, 0, 317, 266,
	267, 268, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 85, 0, 98, 0, 152, 153, 99,
	856, 100, 136, 0, 121, 118, 119, 120, 0, 104,
	0, 1164, 149, 0, 869, 439, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 0, 0, 465, 1165,
	468, 506, 0, 0, 0, 812, 813, 0, 805, 23,
	0, 851, 852, 791, 792, 555, 642, 644, 646, 0,
	-2, 633, 658, 637, 0, 634, 889, 889, 0, 628,
	245, 246, 0, 0, 0, 892, 244, 703, 0, 889,
	550, 707, 665, -2, 708, 709, 0, 0, 0, 889,
	889, 889, 889, 889, 0, 0, 802, 0, 772, 889,
	0, 722, 734, 735, 736, 737, 827, 0, 0, -2,
	0, 0, 802, 0, 889, 889, 581, 588, 889, 0,
	582, 889, 583, 603, 605, 574, 0, 0, 0, 0,
	0, 579, 802, 616, 38, 74, 75, 0, 0, 81,
	889, 340, 0, 421, 415, 419, 0, 386, 0, 0,
	0, 412, 367, 0, 0, 370, 0, 372, -2, 398,
	181, 0, 0, 0, 188, 190, 0, 194, 195, 0,
	220, 0, 0, 205, 0, -2, 209, 210, 244, 212,
	213, 214, 1084, 217, 315, 315, 240, 1056, 0, 0,
	218, 219, 333, 172, 331, 0, 338, 338, 335, 338,
	0, 0, 338, 338, 291, 0, 292, 293, 294, 295,
	0, 313, 0, 273, 274, 0, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 156, 0, 139,
	0, 0, 0, 0, 0, 426, 0, 411, 430, 1164,
	0, 150, 453, 454, 455, 456, 457, 458, 459, 1164,
	0, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 0, 1164, 870, 871, 872, 873, 0, 0,
	467, 488, 0, 889, 504, 505, 816, 0, 24, 616,
	0, 544, 778, 0, 635, 889, 659, 638, 0, 0,
	0, 891, 0, 894, 704, 540, 705, 0, 0, 315,
	315, 748, 315, 319, 751, 752, 315, 754, 315, 757,
	0, 0, 0, 0, 0, 0, 0, 777, 0, 769,
	721, 775, 889, 31, 0, 827, 817, 829, 831, 889,
	27, 0, 823, 0, 810, 836, 617, 837, 585, 0,
	590, 0, 0, 0, 0, 593, 0, 810, 37, 78,
	79, 80, 843, 0, 422, 418, 0, 380, 315, 315,
	0, 0, 0, 0, 0, 0, 368, 369, 371, 374,
	398, 399, 400, 204, 183, 409, 185, 0, 889, 0,
	0, 221, 0, 0, 0, 208, 0, 211, 0, 236,
	0, 238, 0, 0, 0, 316, 282, 283, 338, 284,
	323, 324, 285, 286, 336, 337, 335, 0, 335, 0,
	320, 0, 0, 0, 0, 0, 378, 379, 315, 0,
	0, -2, 0, -2, 0, 0, 0, 0, 137, 138,
	0, 122, 0, 106, 0, 451, 452, 412, 432, 0,
	433, 435, 436, 437, 0, 411, 431, 507, 508, 793,
	556, 706, 639, 688, 326, 327, 893, 0, 710, 745,
	335, 749, 750, 753, 755, 756, 758, 712, 711, 713,
	889, 889, 716, 889, 889, 889, 0, 0, 773, 0,
	32, 0, 832, -2, 0, 0, 0, 44, 35, 0,
	576, 577, 0, 566, 568, 569, 570, 571, 572, 573,
	0, 0, 0, 612, 580, 36, 416, 423, 424, 425,
	342, 0, 807, 384, 385, 383, 409, 392, 393, 0,
	0, 409, 410, 411, 398, 889, 375, 0, 0, 0,
	889, 201, 0, 206, 0, 216, 1035, 325, 249, 250,
	215, 237, 239, 241, 0, 288, 338, 314, 338, 0,
	0, 0, 0, 0, 618, 1162, 0, 0, -2, 157,
	158, 0, 140, 141, 142, 143, 144, 0, 0, 105,
	108, 0, 0, 0, 0, 412, 795, 0, 551, 0,
	0, 0, 746, 747, 0, 0, 0, 0, 738, 720,
	770, 0, 830, 0, -2, 0, 825, 824, 0, 586,
	565, 0, 613, 614, 615, 564, 364, 343, 0, 345,
	0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	381, 382, 387, 0, 394, 395, 388, 0, 0, 412,
	0, 0, 889, 242, 196, 0, 222, 0, 0, 303,
	304, 318, 321, 618, 0, 0, 616, 0, 0, 616,
	145, 413, 0, 103, 123, 125, 126, 127, 128, 129,
	130, 131, 132, 802, 0, 0, 0, 0, 61, 889,
	889, 0, -2, 108, 108, -2, 108, 108, 0, 0,
	0, 0, 0, 26, 889, 889, 552, 0, 553, 889,
	715, 714, 717, 718, 0, 0, 0, 0, 820, 27,
	0, 578, 567, 575, 341, 0, 346, 0, 0, 0,
	349, 0, 361, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 192, 0, 0,
	0, 0, 203, 207, 616, 0, 0, 342, 0, 618,
	342, 147, 0, 889, 0, 124, 810, 49, -2, 51,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 107, 109, -2, 110, 111, 112, 113, 114,
	0, 0, 151, 0, 461, 0, 0, 796, 794, 554,
	798, 799, 801, 719, 0, 0, 0, 828, -2, 826,
	365, 0, 347, 352, 350, 353, 362, 363, 354, 355,
	356, 357, 358, 359, 409, 409, 0, 0, 397, 242,
	243, 0, 0, 199, 200, 202, 0, 0, 0, 0,
	0, 0, 233, 0, 342, 616, 342, 364, 0, 616,
	364, 101, 0, 414, 146, 102, 134, 0, 814, 0,
	0, 53, 55, 59, 62, 63, 64, 65, 66, 0,
	0, 0, 427, 883, 154, 460, 0, 0, 0, 889,
	739, 0, 742, 0, 344, 0, 389, 390, 0, 342,
	193, 197, 198, 0, 224, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 364, 342, 92, 90, 619, 342,
	94, 889, 0, 133, 52, 178, 0, 0, 0, 68,
	0, 0, 886, 884, 0, 434, 462, 0, 0, 800,
	740, 0, 348, 0, 364, 223, 225, 234, 0, 89,
	93, 364, 148, 0, 0, 60, 67, 69, 0, 71,
	429, 0, 885, 0, 428, 0, 366, 0, 396, 0,
	91, 135, -2, 0, 0, 887, 888, 0, 0, 0,
	235, 70, 0, 889, 741, 0, 0, 0, 0, 391,
	72, 463, 464,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 109, 101, 3,
	56, 58, 106, 104, 57, 105, 118, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 358,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 359, 3, 360, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:411
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:416
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:417
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:421
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:444
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:452
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:456
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:462
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line .\parser.y:469
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:475
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:479
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:485
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:489
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:496
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:508
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:520
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:524
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:530
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:536
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:540
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:544
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:549
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:550
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:554
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:558
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:563
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:567
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:573
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:577
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:581
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:585
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:591
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:595
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:608
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:612
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:618
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:623
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:627
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:633
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:640
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:647
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:654
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:662
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:672
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:676
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:694
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:701
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:711
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:715
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:722
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:731
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:739
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:750
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:754
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:760
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:764
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:768
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:774
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:778
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:782
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:786
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:791
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:795
		{
			yyVAL.str = yyDollar[3].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:805
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:811
		{
			yyVAL.str = SessionStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:815
		{
			yyVAL.str = GlobalStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:821
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:826
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line .\parser.y:846
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-14 : yypt+1]
//line .\parser.y:866
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line .\parser.y:887
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:903
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-12 : yypt+1]
//line .\parser.y:920
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:939
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:947
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:956
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:964
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:972
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:976
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line .\parser.y:980
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line .\parser.y:992
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 103:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:1003
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1014
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 105:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:1025
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1030
		{
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1031
		{
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1035
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1036
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1037
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1038
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1039
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1040
		{
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1041
		{
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1045
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1049
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1053
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1063
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1067
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1073
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1077
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1083
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1087
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1093
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1104
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1116
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1123
		{
			yyVAL.bytes = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1127
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1131
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1136
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1140
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1144
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1148
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1152
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1156
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1161
		{
			yyVAL.expr = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1165
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1170
		{
			yyVAL.expr = nil
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1174
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1179
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1183
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1188
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1192
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1198
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1203
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1208
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1214
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1219
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1225
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1230
		{
			yyVAL.bytes = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1234
		{
			yyVAL.bytes = nil
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1240
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1247
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1253
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1257
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1262
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1266
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1270
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1274
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1278
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1284
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1289
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1295
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1306
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1311
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1317
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1330
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1335
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1340
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1345
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1351
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1356
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1361
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1366
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1371
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1376
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1381
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1386
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:1391
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:1400
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1410
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1415
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1420
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:1427
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:1434
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:1442
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:1447
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1453
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:1459
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:1465
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1471
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1478
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1482
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1486
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1492
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1496
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1500
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1504
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1508
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1512
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1516
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1520
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1524
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1528
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1534
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1540
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1546
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1550
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1555
		{
			yyVAL.sequence = &Sequence{}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1559
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1564
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1569
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1574
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1579
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1584
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1589
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1594
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1599
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1604
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1609
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1614
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1619
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1626
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1630
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1634
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1638
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1642
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1646
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1651
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1655
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1660
		{
			yyVAL.bytes = nil
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1673
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1678
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1945
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1950
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1955
		{
			yyVAL.optVal = nil
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1959
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1964
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1968
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1976
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1980
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1986
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1994
		{
			yyVAL.optVal = nil
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1998
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2002
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2011
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2015
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2019
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2024
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2028
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2033
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2037
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2042
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2046
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2050
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2055
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2059
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2063
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2068
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2072
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2076
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2082
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2087
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2091
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2095
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2101
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2105
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2111
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2115
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2121
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2125
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2130
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2134
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2138
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2142
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2146
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2150
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2154
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2158
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2162
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2168
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2178
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2182
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2188
		{
			yyVAL.indexPartition = nil
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2192
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2196
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2202
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2206
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2218
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2222
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2226
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2230
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2234
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2244
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2250
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2255
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2261
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2265
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2271
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2276
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2280
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2290
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2295
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2302
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 389:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:2309
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:2316
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 391:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:2325
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2337
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2341
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2345
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2349
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 396:
		yyDollar = yyS[yypt-10 : yypt+1]
//line .\parser.y:2355
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2366
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2376
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2380
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2384
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2390
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2394
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2398
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2402
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2406
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2410
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2416
		{
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2417
		{
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2421
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2425
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2430
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2437
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2441
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2448
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2452
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2458
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2462
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2467
		{
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2468
		{
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2472
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2476
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2482
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2486
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2490
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2496
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 427:
		yyDollar = yyS[yypt-11 : yypt+1]
//line .\parser.y:2500
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 428:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:2514
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 429:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:2528
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 430:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2547
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 431:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2556
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2565
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2569
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-12 : yypt+1]
//line .\parser.y:2573
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2586
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2596
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2601
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2606
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2610
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2642
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2648
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2652
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:2658
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 464:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:2662
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2668
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2674
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2682
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2687
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2695
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2699
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2705
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2709
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2714
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2720
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2724
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2728
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2733
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2737
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2745
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2749
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2753
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2757
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2761
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2765
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2769
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2773
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2777
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2787
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2791
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2795
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2799
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2803
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2807
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2811
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2821
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2827
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2831
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2837
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2841
		{
			yyVAL.str = "extended "
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2847
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2851
		{
			yyVAL.str = "full "
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2857
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2861
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2865
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2871
		{
			yyVAL.showFilter = nil
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2875
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2879
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2885
		{
			yyVAL.str = ""
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2889
		{
			yyVAL.str = SessionStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2893
		{
			yyVAL.str = GlobalStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2899
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2903
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2909
		{
			yyVAL.statement = &Begin{}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2913
		{
			yyVAL.statement = &Begin{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2919
		{
			yyVAL.statement = &Commit{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2925
		{
			yyVAL.statement = &Rollback{}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2931
		{
			yyVAL.statement = &OtherRead{}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2935
		{
			yyVAL.statement = &OtherRead{}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2939
		{
			yyVAL.statement = &OtherRead{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2943
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2947
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2952
		{
			setAllowComments(yylex, true)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2956
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2962
		{
			yyVAL.bytes2 = nil
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2966
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2972
		{
			yyVAL.str = UnionStr
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2976
		{
			yyVAL.str = UnionAllStr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2980
		{
			yyVAL.str = UnionDistinctStr
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2985
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2989
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2993
		{
			yyVAL.str = SQLCacheStr
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2998
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3002
		{
			yyVAL.str = DistinctStr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3007
		{
			yyVAL.str = ""
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3011
		{
			yyVAL.str = StraightJoinHint
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3016
		{
			yyVAL.selectExprs = nil
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3020
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3026
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3030
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3036
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3040
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3044
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3048
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3053
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3057
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3061
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3068
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3073
		{
			yyVAL.overExpr = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3077
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3081
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3085
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3089
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3094
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3098
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3104
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3108
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3118
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3122
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3126
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3131
		{
			yyVAL.strs = []string{}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3135
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3141
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3145
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3151
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3177
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3181
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3187
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3192
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3196
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3202
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3206
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3219
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3223
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3227
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3231
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3237
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3239
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3243
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3245
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3249
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3251
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3259
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3263
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3267
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3274
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3280
		{
			yyVAL.str = JoinStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3284
		{
			yyVAL.str = JoinStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3288
		{
			yyVAL.str = JoinStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3294
		{
			yyVAL.str = StraightJoinStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3300
		{
			yyVAL.str = LeftJoinStr
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3304
		{
			yyVAL.str = LeftJoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3308
		{
			yyVAL.str = RightJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3312
		{
			yyVAL.str = RightJoinStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3318
		{
			yyVAL.str = NaturalJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3322
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3332
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3336
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3342
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3346
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3351
		{
			yyVAL.indexHints = nil
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3355
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3359
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3363
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3368
		{
			yyVAL.expr = nil
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3372
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3377
		{
			yyVAL.columns = nil
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3381
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3387
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3391
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3395
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3399
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3403
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3407
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3411
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3417
		{
			yyVAL.str = ""
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3421
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3427
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3431
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3437
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3441
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3445
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3449
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3453
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3457
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3465
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3469
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3473
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3479
		{
			yyVAL.str = IsNullStr
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3483
		{
			yyVAL.str = IsNotNullStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3487
		{
			yyVAL.str = IsTrueStr
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3491
		{
			yyVAL.str = IsNotTrueStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3495
		{
			yyVAL.str = IsFalseStr
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3499
		{
			yyVAL.str = IsNotFalseStr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3505
		{
			yyVAL.str = EqualStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3509
		{
			yyVAL.str = LessThanStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3513
		{
			yyVAL.str = GreaterThanStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3517
		{
			yyVAL.str = LessEqualStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3521
		{
			yyVAL.str = GreaterEqualStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3525
		{
			yyVAL.str = NotEqualStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3529
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3533
		{
			yyVAL.str = PosixRegexStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3537
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3541
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3545
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3550
		{
			yyVAL.expr = nil
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3554
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3560
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3564
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3568
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3574
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3580
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3584
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3590
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3594
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3598
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3602
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3606
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3610
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3614
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3670
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3674
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3678
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3682
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3686
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3690
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3698
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3712
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3716
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3720
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3728
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3736
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3744
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3754
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 704:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3758
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3762
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3766
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3770
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3784
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3788
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3792
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3796
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3800
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 714:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3804
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 715:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3808
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3812
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 717:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3816
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 718:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3820
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 719:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:3824
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 720:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:3828
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3832
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3836
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3863
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3873
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3882
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3914
		{
			yyVAL.str = ""
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3918
		{
			yyVAL.str = BooleanModeStr
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3922
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 741:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:3926
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3930
		{
			yyVAL.str = QueryExpansionStr
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3936
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3940
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4022
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4026
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4039
		{
			yyVAL.expr = nil
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4043
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4048
		{
			yyVAL.str = string("")
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4052
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4058
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4062
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4068
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4073
		{
			yyVAL.expr = nil
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4077
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4083
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4087
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 778:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4091
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4097
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4103
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4107
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4112
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4117
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4121
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4125
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4129
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4133
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4137
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4141
		{
			yyVAL.expr = &NullVal{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4147
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4156
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4160
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4165
		{
			yyVAL.exprs = nil
		}
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4169
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4174
		{
			yyVAL.expr = nil
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4178
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4183
		{
			yyVAL.partitionBy = nil
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4187
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4193
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4197
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4203
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4208
		{
			yyVAL.orderBy = nil
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4212
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4218
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4222
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4228
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4233
		{
			yyVAL.str = AscScr
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4237
		{
			yyVAL.str = AscScr
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4241
		{
			yyVAL.str = DescScr
		}
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4246
		{
			yyVAL.limit = nil
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4250
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4254
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4258
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4263
		{
			yyVAL.str = ""
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4267
		{
			yyVAL.str = ForUpdateStr
		}
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4271
		{
			yyVAL.str = ShareModeStr
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4284
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4288
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4292
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 820:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4297
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4301
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 822:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:4305
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4312
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4316
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4320
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 826:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4324
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4329
		{
			yyVAL.updateExprs = nil
		}
	case 828:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4333
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4339
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4343
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4349
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4353
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4359
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4365
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4375
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4379
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4385
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4391
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4395
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4401
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4405
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4409
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4414
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4418
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4425
		{
			yyVAL.bytes = []byte("charset")
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4432
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4436
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4440
		{
			yyVAL.expr = &Default{}
		}
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4449
		{
			yyVAL.byt = 0
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4451
		{
			yyVAL.byt = 1
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4454
		{
			yyVAL.empty = struct{}{}
		}
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4456
		{
			yyVAL.empty = struct{}{}
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4459
		{
			yyVAL.str = ""
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4461
		{
			yyVAL.str = IgnoreStr
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4465
		{
			yyVAL.empty = struct{}{}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4467
		{
			yyVAL.empty = struct{}{}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4469
		{
			yyVAL.empty = struct{}{}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4471
		{
			yyVAL.empty = struct{}{}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4473
		{
			yyVAL.empty = struct{}{}
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4475
		{
			yyVAL.empty = struct{}{}
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4477
		{
			yyVAL.empty = struct{}{}
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4479
		{
			yyVAL.empty = struct{}{}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4481
		{
			yyVAL.empty = struct{}{}
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4483
		{
			yyVAL.empty = struct{}{}
		}
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4486
		{
			yyVAL.empty = struct{}{}
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4488
		{
			yyVAL.empty = struct{}{}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4490
		{
			yyVAL.empty = struct{}{}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4494
		{
			yyVAL.empty = struct{}{}
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4496
		{
			yyVAL.empty = struct{}{}
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4500
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4504
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4511
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4517
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4521
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4526
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4533
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4539
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4543
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4547
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4553
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4557
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4561
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4567
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4571
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4578
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4585
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4589
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4596
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4889
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4898
		{
			decNesting(yylex)
		}
	case 1164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4903
		{
			forceEOF(yylex)
		}
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4908
		{
			forceEOF(yylex)
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4912
		{
			forceEOF(yylex)
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4916
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
