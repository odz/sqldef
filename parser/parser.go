// Code generated by goyacc -o parser.go .\parser.y. DO NOT EDIT.

//line .\parser.y:18
package parser

import __yyfmt__ "fmt"

//line .\parser.y:18

import (
	"fmt"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line .\parser.y:58
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolVals                 []BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
	overExpr                 *OverExpr
	partitionBy              PartitionBy
	partition                *Partition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const UNICODE_STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const MAX = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const POSIX_REGEX = 57432
const POSIX_REGEX_CI = 57433
const POSIX_NOT_REGEX = 57434
const POSIX_NOT_REGEX_CI = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const MATERIALIZED = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const CONSTRAINT = 57463
const REFERENCES = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const POLICY = 57469
const WHILE = 57470
const UNIQUE = 57471
const KEY = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const TYPE = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const RESTRICT = 57493
const CASCADE = 57494
const NO = 57495
const ACTION = 57496
const PERMISSIVE = 57497
const RESTRICTIVE = 57498
const PUBLIC = 57499
const CURRENT_USER = 57500
const SESSION_USER = 57501
const PAD_INDEX = 57502
const FILLFACTOR = 57503
const IGNORE_DUP_KEY = 57504
const STATISTICS_NORECOMPUTE = 57505
const STATISTICS_INCREMENTAL = 57506
const ALLOW_ROW_LOCKS = 57507
const ALLOW_PAGE_LOCKS = 57508
const BEFORE = 57509
const AFTER = 57510
const EACH = 57511
const ROW = 57512
const SCROLL = 57513
const CURSOR = 57514
const OPEN = 57515
const CLOSE = 57516
const FETCH = 57517
const PRIOR = 57518
const FIRST = 57519
const LAST = 57520
const DEALLOCATE = 57521
const DEFERRABLE = 57522
const INITIALLY = 57523
const IMMEDIATE = 57524
const DEFERRED = 57525
const CONCURRENTLY = 57526
const SQL = 57527
const SECURITY = 57528
const BEGIN = 57529
const START = 57530
const TRANSACTION = 57531
const COMMIT = 57532
const ROLLBACK = 57533
const BIT = 57534
const TINYINT = 57535
const SMALLINT = 57536
const SMALLSERIAL = 57537
const MEDIUMINT = 57538
const INT = 57539
const INTEGER = 57540
const SERIAL = 57541
const BIGINT = 57542
const BIGSERIAL = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const PRECISION = 57547
const FLOAT_TYPE = 57548
const DECIMAL = 57549
const NUMERIC = 57550
const SMALLMONEY = 57551
const MONEY = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const DATETIMEOFFSET = 57557
const DATETIME2 = 57558
const SMALLDATETIME = 57559
const CHAR = 57560
const VARCHAR = 57561
const VARYING = 57562
const BOOL = 57563
const CHARACTER = 57564
const VARBINARY = 57565
const NCHAR = 57566
const NVARCHAR = 57567
const NTEXT = 57568
const UUID = 57569
const TEXT = 57570
const TINYTEXT = 57571
const MEDIUMTEXT = 57572
const LONGTEXT = 57573
const CITEXT = 57574
const BLOB = 57575
const TINYBLOB = 57576
const MEDIUMBLOB = 57577
const LONGBLOB = 57578
const JSON = 57579
const JSONB = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const VARIADIC = 57590
const ARRAY = 57591
const NOW = 57592
const GETDATE = 57593
const BPCHAR = 57594
const TEXT_PATTERN_OPS = 57595
const NULLX = 57596
const AUTO_INCREMENT = 57597
const APPROXNUM = 57598
const SIGNED = 57599
const UNSIGNED = 57600
const ZEROFILL = 57601
const ZONE = 57602
const AUTOINCREMENT = 57603
const DATABASES = 57604
const TABLES = 57605
const VITESS_KEYSPACES = 57606
const VITESS_SHARDS = 57607
const VITESS_TABLETS = 57608
const VSCHEMA_TABLES = 57609
const EXTENDED = 57610
const FULL = 57611
const PROCESSLIST = 57612
const NAMES = 57613
const CHARSET = 57614
const GLOBAL = 57615
const SESSION = 57616
const ISOLATION = 57617
const LEVEL = 57618
const READ = 57619
const WRITE = 57620
const ONLY = 57621
const REPEATABLE = 57622
const COMMITTED = 57623
const UNCOMMITTED = 57624
const SERIALIZABLE = 57625
const NEW = 57626
const CURRENT_TIMESTAMP = 57627
const DATABASE = 57628
const CURRENT_DATE = 57629
const CURRENT_TIME = 57630
const LOCALTIME = 57631
const LOCALTIMESTAMP = 57632
const UTC_DATE = 57633
const UTC_TIME = 57634
const UTC_TIMESTAMP = 57635
const REPLACE = 57636
const CONVERT = 57637
const CAST = 57638
const SUBSTR = 57639
const SUBSTRING = 57640
const GROUP_CONCAT = 57641
const SEPARATOR = 57642
const INHERIT = 57643
const LEAD = 57644
const LAG = 57645
const MATCH = 57646
const AGAINST = 57647
const BOOLEAN = 57648
const LANGUAGE = 57649
const WITH = 57650
const WITHOUT = 57651
const PARSER = 57652
const QUERY = 57653
const EXPANSION = 57654
const UNUSED = 57655
const VIRTUAL = 57656
const STORED = 57657
const GENERATED = 57658
const ALWAYS = 57659
const IDENTITY = 57660
const SEQUENCE = 57661
const INCREMENT = 57662
const MINVALUE = 57663
const CACHE = 57664
const CYCLE = 57665
const OWNED = 57666
const NONE = 57667
const CLUSTERED = 57668
const NONCLUSTERED = 57669
const REPLICATION = 57670
const COLUMNSTORE = 57671
const INCLUDE = 57672
const HOLDLOCK = 57673
const NOLOCK = 57674
const NOWAIT = 57675
const PAGLOCK = 57676
const ROWLOCK = 57677
const TABLELOCK = 57678
const DEFINER = 57679
const INVOKER = 57680
const TYPECAST = 57681
const CHECK = 57682
const OVER = 57683

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"UNICODE_STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"MAX",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"SQL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"LEAD",
	"LAG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"COLUMNSTORE",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"DEFINER",
	"INVOKER",
	"TYPECAST",
	"CHECK",
	"OVER",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	130, 402,
	-2, 159,
	-1, 36,
	166, 510,
	167, 510,
	-2, 500,
	-1, 286,
	119, 900,
	-2, 896,
	-1, 287,
	119, 901,
	-2, 897,
	-1, 288,
	119, 902,
	-2, 245,
	-1, 330,
	266, 911,
	-2, 788,
	-1, 362,
	86, 1129,
	-2, 86,
	-1, 363,
	86, 1079,
	-2, 87,
	-1, 369,
	86, 1058,
	-2, 867,
	-1, 371,
	86, 1103,
	-2, 869,
	-1, 634,
	266, 911,
	-2, 538,
	-1, 683,
	266, 911,
	-2, 538,
	-1, 712,
	55, 41,
	57, 41,
	-2, 43,
	-1, 744,
	116, 1053,
	249, 1053,
	255, 1053,
	-2, 281,
	-1, 745,
	116, 1054,
	249, 1054,
	255, 1054,
	-2, 282,
	-1, 746,
	249, 1056,
	255, 1056,
	-2, 316,
	-1, 747,
	249, 1057,
	255, 1057,
	-2, 316,
	-1, 748,
	249, 1158,
	255, 1158,
	-2, 323,
	-1, 749,
	249, 1104,
	255, 1104,
	-2, 316,
	-1, 750,
	249, 1109,
	255, 1109,
	-2, 323,
	-1, 751,
	116, 1107,
	249, 1107,
	255, 1107,
	-2, 288,
	-1, 753,
	116, 1157,
	249, 1157,
	255, 1157,
	-2, 323,
	-1, 754,
	249, 1143,
	255, 1143,
	-2, 336,
	-1, 755,
	249, 1149,
	255, 1149,
	-2, 336,
	-1, 756,
	249, 1097,
	255, 1097,
	-2, 336,
	-1, 757,
	249, 1093,
	255, 1093,
	-2, 336,
	-1, 759,
	116, 1052,
	249, 1052,
	255, 1052,
	-2, 297,
	-1, 760,
	116, 1147,
	249, 1147,
	255, 1147,
	-2, 298,
	-1, 761,
	116, 1095,
	249, 1095,
	255, 1095,
	-2, 299,
	-1, 762,
	116, 1092,
	249, 1092,
	255, 1092,
	-2, 300,
	-1, 763,
	116, 1084,
	249, 1084,
	255, 1084,
	-2, 301,
	-1, 765,
	116, 1156,
	249, 1156,
	255, 1156,
	-2, 303,
	-1, 768,
	116, 1065,
	249, 1065,
	255, 1065,
	-2, 273,
	-1, 769,
	116, 1145,
	249, 1145,
	255, 1145,
	-2, 316,
	-1, 770,
	116, 1146,
	249, 1146,
	255, 1146,
	-2, 316,
	-1, 771,
	116, 1066,
	249, 1066,
	255, 1066,
	-2, 316,
	-1, 772,
	116, 1067,
	249, 1067,
	255, 1067,
	-2, 316,
	-1, 773,
	116, 1068,
	249, 1068,
	255, 1068,
	-2, 316,
	-1, 774,
	116, 1136,
	249, 1136,
	255, 1136,
	-2, 279,
	-1, 775,
	116, 1170,
	249, 1170,
	255, 1170,
	-2, 280,
	-1, 776,
	116, 1076,
	249, 1076,
	255, 1076,
	-2, 306,
	-1, 777,
	116, 1113,
	249, 1113,
	255, 1113,
	-2, 307,
	-1, 778,
	116, 1091,
	249, 1091,
	255, 1091,
	-2, 308,
	-1, 779,
	116, 1114,
	249, 1114,
	255, 1114,
	-2, 309,
	-1, 780,
	116, 1077,
	249, 1077,
	255, 1077,
	-2, 310,
	-1, 781,
	116, 1101,
	249, 1101,
	255, 1101,
	-2, 311,
	-1, 782,
	116, 1100,
	249, 1100,
	255, 1100,
	-2, 312,
	-1, 783,
	116, 1102,
	249, 1102,
	255, 1102,
	-2, 313,
	-1, 784,
	116, 1051,
	249, 1051,
	255, 1051,
	-2, 255,
	-1, 785,
	116, 1148,
	249, 1148,
	255, 1148,
	-2, 256,
	-1, 786,
	116, 1137,
	249, 1137,
	255, 1137,
	-2, 257,
	-1, 787,
	116, 1139,
	249, 1139,
	255, 1139,
	-2, 258,
	-1, 788,
	116, 1096,
	249, 1096,
	255, 1096,
	-2, 259,
	-1, 789,
	116, 1081,
	249, 1081,
	255, 1081,
	-2, 260,
	-1, 790,
	116, 1082,
	249, 1082,
	255, 1082,
	-2, 261,
	-1, 791,
	116, 1130,
	249, 1130,
	255, 1130,
	-2, 262,
	-1, 792,
	116, 1049,
	249, 1049,
	255, 1049,
	-2, 263,
	-1, 793,
	116, 1050,
	249, 1050,
	255, 1050,
	-2, 264,
	-1, 794,
	116, 1121,
	249, 1121,
	255, 1121,
	-2, 318,
	-1, 795,
	116, 1070,
	249, 1070,
	255, 1070,
	-2, 318,
	-1, 796,
	116, 1074,
	249, 1074,
	255, 1074,
	-2, 318,
	-1, 797,
	116, 1069,
	249, 1069,
	255, 1069,
	-2, 320,
	-1, 798,
	116, 1108,
	249, 1108,
	255, 1108,
	-2, 320,
	-1, 799,
	116, 1099,
	249, 1099,
	255, 1099,
	-2, 271,
	-1, 800,
	116, 1138,
	249, 1138,
	255, 1138,
	-2, 272,
	-1, 881,
	119, 904,
	-2, 899,
	-1, 949,
	266, 911,
	-2, 316,
	-1, 950,
	57, 316,
	59, 316,
	239, 316,
	-2, 1056,
	-1, 951,
	57, 750,
	-2, 1065,
	-1, 952,
	57, 316,
	-2, 1066,
	-1, 953,
	57, 320,
	-2, 1069,
	-1, 954,
	57, 753,
	-2, 1084,
	-1, 956,
	57, 316,
	-2, 1104,
	-1, 957,
	57, 756,
	-2, 1135,
	-1, 958,
	57, 316,
	-2, 1145,
	-1, 959,
	57, 759,
	-2, 1154,
	-1, 960,
	57, 761,
	-2, 1049,
	-1, 961,
	57, 762,
	-2, 1051,
	-1, 962,
	57, 763,
	-2, 1081,
	-1, 963,
	57, 764,
	-2, 1099,
	-1, 964,
	57, 320,
	-2, 1108,
	-1, 965,
	57, 766,
	-2, 1137,
	-1, 966,
	57, 767,
	-2, 1138,
	-1, 967,
	57, 768,
	-2, 1148,
	-1, 968,
	57, 769,
	-2, 1074,
	-1, 969,
	57, 770,
	-2, 1121,
	-1, 970,
	57, 316,
	-2, 1067,
	-1, 971,
	57, 316,
	-2, 1068,
	-1, 972,
	57, 773,
	-2, 1136,
	-1, 973,
	57, 774,
	-2, 1143,
	-1, 974,
	57, 316,
	-2, 1158,
	-1, 975,
	57, 777,
	-2, 1107,
	-1, 976,
	57, 316,
	-2, 1109,
	-1, 977,
	57, 316,
	-2, 1157,
	-1, 1052,
	142, 412,
	-2, 1063,
	-1, 1181,
	266, 911,
	-2, 538,
	-1, 1204,
	5, 28,
	-2, 664,
	-1, 1246,
	5, 27,
	-2, 840,
	-1, 1295,
	59, 377,
	-2, 374,
	-1, 1312,
	119, 902,
	-2, 245,
	-1, 1579,
	5, 27,
	-2, 95,
	-1, 1581,
	5, 27,
	-2, 97,
	-1, 1634,
	5, 28,
	-2, 841,
	-1, 1708,
	5, 27,
	-2, 96,
	-1, 1742,
	5, 27,
	-2, 843,
	-1, 1820,
	58, 108,
	-2, 178,
	-1, 1823,
	58, 108,
	-2, 178,
	-1, 1896,
	189, 54,
	-2, 178,
	-1, 1912,
	58, 108,
	-2, 177,
	-1, 1936,
	5, 28,
	-2, 844,
	-1, 2090,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 21730

var yyAct = [...]int16{
	373, 1798, 735, 2046, 1757, 1929, 1922, 1126, 1801, 1897,
	1284, 560, 1875, 810, 1574, 638, 1000, 265, 1262, 734,
	1852, 1484, 292, 1527, 320, 1287, 857, 303, 1573, 1943,
	1644, 1657, 1515, 1018, 1485, 96, 282, 2047, 96, 1794,
	1481, 291, 1310, 1112, 1196, 1640, 53, 1038, 1365, 706,
	704, 1047, 1135, 1249, 259, 1134, 619, 1317, 637, 3,
	287, 1041, 96, 96, 1062, 1267, 1001, 948, 1667, 722,
	906, 368, 816, 938, 1186, 934, 96, 295, 1057, 1754,
	21, 547, 1192, 1107, 1254, 96, 987, 96, 1348, 1094,
	883, 1824, 361, 96, 566, 708, 721, 354, 260, 261,
	262, 263, 513, 349, 693, 572, 264, 997, 348, 290,
	274, 1088, 347, 1168, 580, 1330, 933, 742, 358, 737,
	2071, 736, 661, 1911, 1430, 1080, 52, 271, 1076, 48,
	26, 27, 93, 278, 1435, 2039, 269, 1522, 620, 352,
	604, 1812, 1544, 1123, 1124, 364, 1795, 521, 284, 1529,
	1530, 1528, 28, 594, 356, 1673, 604, 503, 1531, 1681,
	357, 595, 596, 597, 598, 599, 600, 601, 594, 522,
	523, 604, 2102, 518, 2010, 515, 1308, 2029, 2096, 652,
	520, 1934, 526, 588, 527, 591, 1961, 1962, 1856, 1857,
	534, 606, 607, 608, 609, 610, 611, 612, 2083, 589,
	590, 587, 613, 614, 615, 616, 593, 592, 602, 603,
	595, 596, 597, 598, 599, 600, 601, 594, 1127, 1079,
	604, 597, 598, 599, 600, 601, 594, 1193, 1194, 604,
	1980, 1044, 1263, 1076, 1077, 1843, 1189, 2009, 96, 1933,
	593, 592, 602, 603, 595, 596, 597, 598, 599, 600,
	601, 594, 1476, 1958, 604, 1628, 1818, 524, 1065, 1535,
	723, 2022, 724, 994, 1508, 1509, 1817, 287, 287, 1032,
	1033, 1507, 1031, 1072, 555, 1060, 1645, 1646, 1647, 1648,
	1649, 1650, 1061, 848, 287, 1613, 1612, 91, 87, 88,
	849, 89, 1611, 1322, 1332, 1324, 1323, 287, 287, 287,
	287, 287, 287, 287, 1275, 1082, 1211, 1274, 633, 1095,
	1276, 1813, 1814, 1816, 1084, 568, 1084, 1815, 1625, 1191,
	991, 1428, 287, 1427, 1426, 1624, 559, 1218, 1216, 569,
	258, 287, 2100, 1621, 1999, 536, 808, 2094, 2093, 2079,
	1068, 559, 1063, 1073, 1468, 2080, 2044, 96, 1529, 1530,
	1070, 1069, 2052, 1892, 96, 96, 96, 508, 1523, 2028,
	1800, 2030, 1586, 1587, 540, 1108, 1773, 621, 818, 593,
	592, 602, 603, 595, 596, 597, 598, 599, 600, 601,
	594, 605, 1876, 604, 593, 592, 602, 603, 595, 596,
	597, 598, 599, 600, 601, 594, 2095, 605, 604, 2081,
	593, 592, 602, 603, 595, 596, 597, 598, 599, 600,
	601, 594, 605, 1923, 604, 593, 592, 602, 603, 595,
	596, 597, 598, 599, 600, 601, 594, 510, 1429, 604,
	54, 352, 49, 1406, 542, 551, 552, 544, 1682, 998,
	1593, 364, 1924, 1739, 688, 625, 626, 627, 628, 629,
	630, 631, 1058, 712, 1622, 1675, 1533, 1594, 666, 1857,
	667, 605, 90, 1674, 1844, 1302, 541, 543, 1301, 1059,
	605, 2051, 1289, 559, 1722, 1902, 1066, 309, 719, 1521,
	2076, 2061, 1067, 592, 602, 603, 595, 596, 597, 598,
	599, 600, 601, 594, 1307, 605, 604, 1087, 593, 592,
	602, 603, 595, 596, 597, 598, 599, 600, 601, 594,
	713, 1932, 604, 654, 655, 656, 657, 658, 659, 660,
	1665, 96, 1043, 2021, 1095, 801, 96, 1403, 1665, 96,
	1603, 1109, 96, 819, 820, 1830, 96, 1074, 2099, 1075,
	1670, 367, 818, 504, 514, 1019, 1021, 529, 512, 1711,
	1294, 516, 517, 85, 84, 57, 85, 96, 827, 807,
	511, 1071, 602, 603, 595, 596, 597, 598, 599, 600,
	601, 594, 1731, 1266, 604, 1265, 96, 817, 287, 287,
	59, 60, 61, 62, 63, 287, 860, 287, 1292, 525,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 1264, 507, 836, 539, 506,
	519, 806, 884, 237, 809, 86, 545, 1407, 823, 623,
	624, 1295, 822, 824, 605, 2087, 828, 1020, 852, 831,
	1903, 1904, 1905, 1848, 1404, 287, 1637, 1402, 1059, 605,
	1552, 287, 287, 287, 287, 287, 287, 287, 287, 834,
	937, 1405, 287, 1415, 850, 605, 881, 1231, 1180, 1058,
	855, 726, 636, 584, 535, 885, 880, 1227, 979, 981,
	605, 1040, 1039, 869, 989, 1963, 1059, 1668, 1669, 1671,
	579, 862, 1163, 287, 287, 287, 287, 1868, 96, 577,
	287, 96, 96, 96, 96, 96, 877, 1867, 879, 944,
	1562, 1866, 1411, 96, 1865, 579, 96, 819, 820, 1225,
	96, 1864, 1002, 1226, 1863, 96, 96, 1862, 940, 367,
	367, 367, 367, 912, 367, 667, 287, 909, 911, 858,
	859, 367, 1860, 928, 931, 882, 1583, 605, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 605, 985, 1277, 1252, 1563, 582, 993,
	725, 2091, 578, 577, 944, 1026, 924, 1164, 352, 352,
	352, 352, 352, 1967, 890, 2092, 623, 624, 2089, 579,
	578, 577, 1478, 352, 1410, 999, 1286, 1969, 888, 889,
	887, 988, 352, 1236, 980, 1004, 1005, 579, 1007, 1003,
	364, 988, 1006, 813, 96, 1023, 1015, 96, 1037, 1772,
	96, 1028, 1208, 1027, 1207, 605, 96, 1029, 96, 1775,
	1024, 1944, 1964, 96, 1140, 1045, 96, 570, 96, 1771,
	574, 96, 2064, 578, 577, 578, 577, 367, 50, 528,
	1285, 1945, 1114, 1286, 728, 1096, 1097, 1098, 1099, 886,
	579, 2063, 579, 1286, 287, 287, 287, 287, 2027, 548,
	549, 550, 1091, 553, 1286, 1093, 578, 577, 287, 1298,
	557, 2023, 1170, 1998, 1339, 578, 577, 922, 1338, 1110,
	1111, 559, 1480, 579, 1177, 1178, 1179, 921, 2026, 287,
	287, 287, 579, 925, 2025, 1946, 1942, 1785, 936, 578,
	577, 1117, 926, 927, 1120, 945, 946, 1125, 1701, 1693,
	1121, 984, 884, 1133, 1333, 1139, 579, 923, 2024, 1700,
	1141, 1297, 1540, 1158, 559, 1159, 1333, 881, 1160, 531,
	532, 533, 873, 875, 876, 1692, 287, 880, 1355, 874,
	1333, 1353, 1423, 287, 1329, 907, 992, 908, 995, 996,
	287, 1169, 854, 1861, 1965, 1966, 1968, 1970, 1971, 50,
	1738, 1114, 1698, 1393, 635, 885, 593, 592, 602, 603,
	595, 596, 597, 598, 599, 600, 601, 594, 1182, 1197,
	604, 1605, 741, 741, 802, 805, 287, 1349, 1383, 287,
	54, 853, 1304, 635, 83, 1890, 2107, 1214, 1110, 1111,
	1662, 2082, 1746, 2036, 367, 1662, 2017, 1973, 1219, 1858,
	578, 577, 1890, 2016, 1910, 367, 367, 367, 367, 367,
	367, 367, 367, 2013, 2012, 1887, 96, 579, 1526, 367,
	367, 2004, 559, 559, 1394, 1662, 2001, 1183, 1184, 1185,
	1396, 1389, 1390, 1525, 1397, 1392, 1391, 1524, 558, 864,
	1399, 1395, 1662, 2000, 1881, 346, 1246, 1662, 1974, 582,
	1296, 1398, 367, 1746, 1920, 1384, 1380, 1375, 1388, 1385,
	1382, 1381, 1278, 1235, 96, 1379, 1270, 287, 1269, 1129,
	1271, 920, 1303, 1746, 1797, 1880, 1386, 1746, 1782, 1746,
	559, 1259, 1878, 1378, 1749, 1748, 1746, 1747, 625, 833,
	1272, 930, 930, 352, 1321, 1662, 1661, 1504, 559, 932,
	578, 577, 1636, 559, 367, 832, 96, 814, 1319, 812,
	96, 537, 96, 1280, 982, 1569, 1568, 579, 530, 982,
	1891, 1176, 1890, 1290, 1291, 1293, 1565, 1566, 1565, 1564,
	1200, 559, 1342, 826, 1344, 1345, 1346, 1347, 942, 559,
	690, 559, 733, 732, 837, 838, 839, 840, 841, 842,
	843, 844, 716, 1791, 96, 96, 1790, 982, 845, 846,
	1789, 1305, 96, 1786, 1705, 1334, 1335, 1694, 1337, 1684,
	1340, 1341, 287, 1559, 1718, 1351, 1352, 1558, 287, 287,
	1350, 1482, 1553, 1354, 1250, 1376, 367, 1373, 1251, 1199,
	54, 287, 1418, 1250, 367, 23, 717, 689, 715, 1366,
	287, 504, 1371, 1356, 23, 1251, 23, 1360, 1370, 1362,
	1369, 605, 1758, 1370, 1025, 1230, 715, 287, 287, 287,
	287, 287, 287, 690, 280, 1741, 1760, 287, 2007, 1244,
	942, 1987, 1200, 690, 1245, 287, 1632, 690, 1200, 1233,
	1662, 287, 287, 287, 1431, 50, 287, 1421, 1422, 287,
	1250, 1483, 1420, 1683, 50, 271, 50, 1002, 1582, 1416,
	1486, 1229, 1567, 1002, 1433, 1436, 1571, 1570, 287, 1465,
	1477, 1281, 1118, 1030, 1200, 1209, 718, 856, 50, 2097,
	367, 2006, 367, 1469, 1886, 1872, 1492, 1871, 1514, 741,
	1827, 1826, 1467, 881, 1793, 1792, 1488, 1784, 1723, 367,
	1759, 1720, 287, 1475, 1491, 50, 1505, 1493, 1706, 695,
	698, 699, 700, 696, 1506, 697, 701, 1551, 1084, 1255,
	1256, 1853, 1113, 367, 1578, 1550, 1424, 1425, 1548, 1321,
	1537, 1499, 1497, 1513, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1358, 1108, 1319, 1541, 1309, 1283, 1101, 1534, 287,
	96, 1512, 1255, 1256, 1532, 1115, 1116, 1877, 1100, 1543,
	96, 1089, 65, 1545, 811, 1470, 1471, 1472, 1473, 1474,
	1372, 1572, 1554, 1555, 1482, 1557, 1575, 1359, 1560, 1561,
	695, 698, 699, 700, 696, 1258, 697, 701, 1119, 830,
	1012, 96, 815, 556, 1010, 1013, 868, 1261, 1014, 1011,
	699, 700, 287, 1260, 1009, 1008, 2058, 582, 2008, 96,
	1579, 1414, 1581, 1589, 287, 1165, 1556, 1590, 573, 1130,
	2055, 1132, 1596, 275, 276, 1175, 1174, 1282, 561, 1343,
	731, 538, 1598, 1539, 571, 1630, 1131, 2045, 1161, 1152,
	1724, 562, 858, 859, 829, 1580, 1601, 1577, 1713, 1604,
	1714, 1715, 1716, 1151, 1538, 1368, 1363, 1588, 1361, 1608,
	821, 1607, 703, 1712, 1173, 1614, 272, 273, 573, 2072,
	1717, 287, 1172, 1585, 1520, 1214, 266, 2031, 287, 1837,
	1833, 267, 1756, 1156, 54, 1219, 352, 1420, 1600, 1832,
	1268, 563, 567, 1150, 96, 1727, 1251, 1136, 1137, 1138,
	1639, 1995, 1994, 1993, 1992, 1960, 1959, 1870, 585, 367,
	1519, 1518, 1758, 1656, 1631, 575, 1869, 1845, 1300, 851,
	1288, 56, 1807, 8, 1804, 7, 1760, 287, 1805, 6,
	58, 1299, 1377, 287, 1678, 1592, 1651, 1652, 1653, 1803,
	5, 1042, 1677, 1654, 1326, 1719, 639, 1147, 1144, 1145,
	714, 1143, 51, 1, 67, 650, 66, 1928, 1729, 1434,
	1321, 287, 1610, 96, 509, 1122, 1195, 632, 307, 2078,
	2050, 321, 47, 1680, 1319, 1685, 293, 1643, 1672, 1988,
	1895, 1154, 1157, 1658, 1357, 1280, 1983, 1901, 1575, 1702,
	1328, 1064, 1879, 1306, 1696, 367, 68, 1979, 1889, 1584,
	1759, 1367, 1387, 1128, 1364, 1710, 1146, 1921, 861, 1939,
	1755, 1664, 287, 287, 1707, 287, 287, 287, 1050, 47,
	1279, 1709, 502, 64, 1695, 1859, 1051, 270, 367, 1708,
	1049, 1048, 1046, 353, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1078, 1331, 1081, 1697, 740, 1699, 1486, 367, 738,
	739, 743, 1730, 245, 1366, 1658, 359, 1740, 702, 727,
	1704, 1374, 576, 1149, 1401, 1400, 1142, 287, 1770, 1409,
	847, 1162, 287, 1774, 554, 247, 941, 943, 1753, 617,
	1769, 1171, 1273, 366, 1742, 1768, 1489, 565, 1831, 1778,
	1776, 1726, 990, 1234, 649, 986, 1148, 287, 294, 367,
	872, 306, 305, 304, 863, 1243, 586, 351, 686, 694,
	692, 691, 982, 1257, 1253, 1490, 1268, 350, 982, 1417,
	1627, 1842, 867, 25, 1575, 1796, 55, 277, 19, 18,
	17, 20, 16, 15, 14, 1787, 1153, 1788, 29, 13,
	12, 11, 10, 1017, 9, 1810, 1802, 367, 1809, 1808,
	1854, 1516, 1806, 1846, 1155, 4, 1486, 268, 22, 1828,
	1732, 1733, 1851, 1734, 1735, 1736, 1835, 1408, 2, 0,
	1850, 287, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 1855, 287, 0, 0, 0, 0, 0, 1811,
	0, 0, 1847, 0, 0, 0, 0, 0, 1884, 0,
	0, 0, 870, 871, 0, 0, 0, 0, 287, 287,
	1575, 1883, 0, 546, 546, 546, 546, 0, 546, 0,
	0, 1882, 0, 287, 287, 546, 1576, 0, 287, 1893,
	0, 1918, 1919, 801, 1819, 0, 287, 0, 1885, 1926,
	1591, 1888, 47, 1595, 1906, 1909, 1597, 0, 1894, 0,
	0, 1940, 1935, 0, 0, 0, 1599, 618, 1002, 939,
	0, 622, 0, 1954, 0, 639, 0, 0, 947, 978,
	1083, 0, 1811, 0, 1602, 0, 1956, 1955, 0, 0,
	0, 634, 287, 367, 1947, 1948, 1949, 1950, 1951, 1989,
	0, 0, 0, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 1986, 651, 653, 653, 653, 653, 653, 653,
	653, 653, 0, 682, 683, 684, 685, 1977, 0, 0,
	1984, 0, 1976, 0, 2002, 705, 1972, 0, 1952, 1953,
	0, 0, 0, 0, 1996, 1913, 1914, 1915, 1916, 1917,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1036, 0, 0, 2014, 2015, 1975, 1907, 0, 1978, 1190,
	2018, 0, 0, 1811, 0, 1641, 0, 0, 1641, 1641,
	1641, 0, 1655, 1198, 0, 1201, 1202, 1811, 0, 367,
	0, 367, 0, 1204, 1205, 1206, 2035, 2042, 2041, 2038,
	0, 0, 0, 2049, 0, 0, 0, 2048, 287, 0,
	2053, 2054, 0, 2057, 0, 1641, 0, 0, 2060, 0,
	1326, 2056, 1686, 2040, 0, 0, 0, 2033, 2019, 2020,
	367, 2037, 96, 1232, 0, 0, 1802, 0, 1238, 0,
	287, 1239, 1240, 0, 1241, 1242, 1989, 0, 1576, 1703,
	0, 0, 2032, 2067, 2034, 0, 1641, 0, 0, 0,
	367, 367, 96, 0, 0, 0, 1811, 0, 0, 0,
	1721, 0, 0, 0, 0, 0, 0, 0, 1811, 1811,
	1811, 1725, 0, 2086, 2075, 0, 1893, 2075, 1166, 1167,
	2088, 567, 0, 0, 0, 0, 0, 2062, 0, 2103,
	0, 0, 287, 564, 2104, 0, 0, 0, 546, 0,
	0, 0, 0, 2068, 1744, 1745, 0, 2069, 0, 546,
	546, 546, 546, 546, 546, 546, 546, 1811, 0, 1811,
	1811, 2090, 0, 546, 546, 0, 0, 0, 94, 0,
	1516, 257, 2075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1777, 0, 0, 0, 0, 0, 0, 2085,
	0, 0, 0, 281, 0, 94, 94, 0, 0, 2098,
	0, 0, 0, 0, 0, 0, 0, 1203, 0, 94,
	0, 1811, 1228, 0, 1576, 1811, 0, 0, 94, 1799,
	94, 0, 0, 0, 0, 0, 94, 0, 1820, 0,
	0, 1641, 0, 0, 47, 593, 592, 602, 603, 595,
	596, 597, 598, 599, 600, 601, 594, 0, 0, 604,
	0, 0, 640, 1237, 1849, 0, 593, 592, 602, 603,
	595, 596, 597, 598, 599, 600, 601, 594, 0, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	2105, 0, 0, 0, 0, 0, 1187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1576, 1516, 353, 353, 353, 353, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 705, 0, 1022,
	1896, 1898, 1899, 1900, 0, 0, 353, 0, 1912, 1820,
	1820, 1912, 1820, 1820, 1516, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1503, 82, 0, 0,
	0, 0, 0, 982, 0, 0, 1937, 1188, 0, 0,
	0, 1938, 0, 0, 0, 1941, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 1799,
	1516, 593, 592, 602, 603, 595, 596, 597, 598, 599,
	600, 601, 594, 0, 1641, 604, 0, 0, 1981, 72,
	77, 0, 69, 0, 741, 0, 0, 0, 0, 1991,
	0, 0, 0, 0, 0, 73, 0, 80, 0, 0,
	1912, 0, 0, 0, 546, 0, 546, 0, 0, 0,
	0, 2005, 662, 74, 75, 70, 0, 0, 0, 0,
	0, 0, 0, 546, 593, 592, 602, 603, 595, 596,
	597, 598, 599, 600, 601, 594, 0, 271, 604, 48,
	26, 27, 0, 0, 0, 0, 0, 664, 0, 0,
	0, 1812, 0, 0, 1466, 0, 0, 0, 0, 0,
	94, 0, 28, 0, 0, 0, 0, 94, 710, 94,
	605, 0, 1181, 0, 0, 2043, 0, 0, 0, 0,
	1609, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 1516, 1616, 1494, 1495, 0, 2059,
	1496, 0, 0, 1498, 0, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 0, 2108, 0, 0, 0,
	0, 0, 1510, 0, 1617, 1618, 665, 0, 1619, 1620,
	0, 741, 1623, 2073, 680, 663, 0, 0, 0, 0,
	669, 668, 0, 0, 0, 0, 1633, 1634, 1635, 271,
	1638, 48, 26, 27, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 1812, 0, 0, 1818, 0, 0, 0,
	0, 0, 0, 0, 28, 367, 1817, 0, 0, 0,
	0, 0, 76, 0, 0, 1799, 0, 0, 0, 1247,
	1248, 0, 0, 0, 78, 79, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 1691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 353, 0, 681,
	0, 1813, 1814, 1816, 0, 0, 0, 1815, 2077, 0,
	0, 0, 0, 0, 94, 0, 0, 1085, 1086, 94,
	1090, 0, 94, 1092, 0, 94, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 1606, 0, 0, 0,
	1102, 1103, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 1728, 0, 0, 0, 1818, 605,
	0, 0, 0, 0, 0, 0, 1737, 0, 1817, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1750, 1751, 1752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1629, 0, 0, 0, 0,
	0, 0, 639, 1813, 1814, 1816, 0, 0, 1781, 1815,
	0, 0, 49, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 546, 0, 0, 281, 281, 0, 0, 0,
	983, 281, 0, 0, 0, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 1679, 0, 0, 0, 0, 0, 0, 1834, 1836,
	0, 1838, 1839, 1840, 1841, 0, 281, 281, 281, 281,
	0, 94, 0, 983, 94, 94, 94, 94, 94, 0,
	0, 664, 0, 0, 0, 0, 1016, 0, 0, 94,
	0, 0, 0, 710, 0, 0, 0, 0, 94, 94,
	0, 0, 0, 0, 0, 0, 0, 1487, 1873, 47,
	1210, 1212, 0, 1213, 0, 0, 0, 1215, 0, 1217,
	0, 0, 0, 0, 49, 0, 1500, 1501, 1502, 0,
	0, 1220, 1221, 0, 0, 1222, 0, 1223, 1224, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 0,
	913, 914, 0, 915, 916, 917, 919, 918, 0, 910,
	665, 0, 0, 0, 1927, 1536, 0, 0, 680, 663,
	0, 1931, 0, 0, 669, 668, 1936, 0, 0, 0,
	0, 0, 1546, 0, 0, 0, 0, 94, 634, 0,
	94, 1779, 0, 94, 0, 0, 1783, 0, 0, 94,
	0, 94, 0, 1957, 0, 0, 94, 0, 0, 94,
	0, 94, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 47, 0, 271, 0, 48,
	26, 27, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 1812, 0, 0, 0, 0, 0, 0, 1336, 0,
	2003, 281, 28, 681, 23, 24, 48, 26, 27, 0,
	0, 271, 0, 48, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 42, 1812, 0, 0, 0, 28,
	353, 0, 0, 0, 0, 0, 28, 271, 0, 48,
	26, 27, 0, 0, 0, 1874, 0, 1615, 0, 0,
	37, 1812, 0, 0, 50, 0, 2074, 0, 0, 0,
	0, 0, 28, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 271, 0, 48, 26, 27,
	0, 0, 0, 1908, 0, 0, 0, 0, 1626, 1812,
	0, 0, 0, 0, 0, 0, 0, 1925, 639, 0,
	28, 0, 1930, 0, 0, 0, 1818, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1817, 0, 0, 281,
	30, 31, 33, 32, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1676, 0, 0, 2084, 0,
	1818, 0, 0, 0, 0, 0, 36, 43, 44, 0,
	1817, 45, 46, 34, 0, 0, 1982, 0, 0, 94,
	0, 1813, 1814, 1816, 0, 0, 1818, 1815, 0, 0,
	0, 0, 0, 0, 0, 0, 1817, 0, 0, 0,
	0, 0, 0, 0, 2109, 2110, 0, 0, 634, 0,
	243, 0, 47, 0, 0, 1813, 1814, 1816, 0, 0,
	0, 1815, 38, 39, 1818, 40, 41, 94, 0, 1997,
	1327, 0, 0, 0, 1817, 0, 253, 0, 0, 0,
	0, 1813, 1814, 1816, 0, 0, 0, 1815, 0, 0,
	0, 0, 0, 1547, 1549, 1985, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 1743, 0, 94,
	0, 0, 0, 94, 0, 94, 0, 0, 0, 1813,
	1814, 1816, 0, 0, 0, 1815, 0, 0, 0, 0,
	0, 0, 1930, 238, 0, 0, 0, 0, 0, 240,
	0, 0, 49, 0, 0, 0, 246, 242, 0, 0,
	1780, 0, 0, 1437, 0, 0, 0, 1412, 1413, 0,
	0, 0, 0, 0, 2070, 94, 0, 1181, 0, 49,
	0, 0, 0, 0, 0, 281, 49, 0, 244, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 281, 0, 1829, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 1210, 1212,
	0, 1213, 0, 1487, 1215, 47, 1217, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 1220, 1221,
	0, 0, 1222, 0, 1223, 1224, 0, 0, 983, 0,
	49, 0, 0, 0, 983, 0, 1448, 1454, 1452, 0,
	0, 1449, 0, 0, 1447, 0, 239, 1456, 0, 0,
	1455, 1441, 1451, 1453, 1450, 1445, 0, 1440, 0, 1458,
	1457, 1459, 1438, 1461, 0, 0, 0, 1464, 1443, 1463,
	1462, 0, 1460, 0, 0, 0, 0, 1663, 1666, 0,
	0, 1442, 955, 0, 0, 0, 241, 0, 249, 250,
	251, 252, 256, 0, 0, 1327, 0, 255, 254, 0,
	0, 1444, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1663, 0, 0,
	0, 0, 1327, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2011, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 0, 0, 100, 0, 0, 289, 0, 0, 0,
	124, 285, 0, 0, 0, 138, 233, 234, 331, 141,
	0, 0, 187, 151, 0, 0, 0, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 1034, 0, 50, 0,
	0, 286, 310, 288, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 317, 318, 1035, 710, 0, 0,
	283, 301, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 0,
	0, 0, 0, 343, 0, 300, 1327, 0, 296, 297,
	302, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 341, 170, 0,
	116, 0, 193, 128, 1327, 139, 94, 2101, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	1327, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 332, 342, 338, 339, 336, 337,
	335, 334, 333, 344, 324, 325, 326, 327, 329, 0,
	133, 235, 236, 328, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 112,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 983,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 0, 0, 0, 372, 0, 1659,
	0, 1660, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2066, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 94, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	380, 0, 188, 207, 224, 225, 381, 401, 483, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 460, 178, 115, 206, 184, 0,
	396, 400, 394, 395, 447, 448, 493, 494, 495, 471,
	391, 0, 398, 399, 0, 478, 133, 235, 236, 450,
	99, 107, 140, 500, 221, 0, 172, 126, 208, 0,
	0, 425, 376, 429, 0, 0, 0, 0, 0, 0,
	0, 388, 389, 179, 0, 433, 428, 455, 457, 466,
	474, 0, 405, 439, 0, 112, 488, 477, 0, 436,
	490, 406, 424, 498, 426, 427, 463, 385, 446, 163,
	421, 403, 100, 409, 378, 416, 379, 407, 438, 124,
	404, 0, 479, 449, 138, 233, 234, 496, 141, 454,
	0, 187, 151, 0, 0, 441, 481, 444, 472, 435,
	464, 393, 453, 491, 422, 459, 492, 0, 0, 0,
	286, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 458, 486, 418, 501, 0, 462, 377, 456,
	0, 383, 386, 497, 484, 413, 414, 0, 0, 0,
	0, 0, 0, 0, 440, 445, 469, 432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	410, 0, 452, 0, 0, 0, 390, 384, 0, 437,
	0, 0, 0, 392, 0, 411, 470, 0, 374, 475,
	482, 434, 147, 214, 485, 431, 430, 170, 0, 116,
	0, 193, 128, 423, 139, 467, 499, 489, 442, 480,
	408, 417, 118, 415, 177, 164, 205, 451, 465, 175,
	142, 197, 171, 204, 487, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 382, 375, 412, 473, 476,
	397, 461, 387, 419, 468, 420, 443, 402, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 380, 0, 188, 207, 224, 225, 381,
	401, 483, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 460, 178, 115,
	206, 184, 0, 396, 400, 394, 395, 447, 448, 493,
	494, 495, 471, 391, 0, 398, 399, 0, 478, 133,
	235, 236, 450, 99, 107, 140, 500, 221, 0, 172,
	126, 208, 0, 0, 425, 376, 429, 0, 0, 0,
	0, 0, 0, 0, 388, 389, 179, 0, 433, 428,
	455, 457, 466, 474, 0, 405, 439, 0, 112, 488,
	477, 0, 436, 490, 406, 424, 498, 426, 427, 463,
	385, 446, 163, 421, 403, 100, 409, 378, 416, 379,
	407, 438, 124, 404, 0, 479, 449, 138, 233, 234,
	496, 141, 454, 0, 187, 151, 0, 0, 441, 481,
	444, 472, 435, 464, 393, 453, 491, 422, 459, 492,
	0, 0, 0, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 458, 486, 418, 501, 0,
	462, 377, 456, 0, 383, 386, 497, 484, 413, 414,
	1511, 0, 0, 0, 0, 0, 0, 440, 445, 469,
	432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 410, 0, 452, 0, 0, 0, 390,
	384, 0, 437, 0, 0, 0, 392, 0, 411, 470,
	0, 374, 475, 482, 434, 147, 214, 485, 431, 430,
	170, 0, 116, 0, 193, 128, 423, 139, 467, 499,
	489, 442, 480, 408, 417, 118, 415, 177, 164, 205,
	451, 465, 175, 142, 197, 171, 204, 487, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 382, 375,
	412, 473, 476, 397, 461, 387, 419, 468, 420, 443,
	402, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 380, 0, 188, 207,
	224, 225, 381, 401, 483, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	460, 178, 115, 206, 184, 0, 396, 400, 394, 395,
	447, 448, 493, 494, 495, 471, 391, 0, 398, 399,
	0, 478, 133, 235, 236, 450, 99, 107, 140, 500,
	221, 0, 172, 126, 208, 0, 0, 425, 376, 429,
	0, 0, 0, 0, 0, 0, 0, 388, 389, 179,
	0, 433, 428, 455, 457, 466, 474, 0, 405, 439,
	0, 112, 488, 477, 0, 436, 490, 406, 424, 498,
	426, 427, 463, 385, 446, 163, 421, 403, 100, 409,
	378, 416, 379, 407, 438, 124, 404, 0, 479, 449,
	138, 233, 234, 496, 141, 454, 0, 187, 151, 0,
	0, 441, 481, 444, 472, 435, 464, 393, 453, 491,
	422, 459, 492, 0, 0, 0, 286, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 458, 486,
	418, 501, 0, 462, 377, 456, 0, 383, 386, 497,
	484, 413, 414, 0, 0, 0, 0, 0, 0, 0,
	440, 445, 469, 432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 0, 452, 0,
	0, 0, 390, 384, 0, 437, 0, 0, 0, 392,
	0, 411, 470, 0, 374, 475, 482, 434, 147, 214,
	485, 431, 430, 170, 0, 116, 0, 193, 128, 423,
	139, 467, 499, 489, 442, 480, 408, 417, 118, 415,
	177, 164, 205, 451, 465, 175, 142, 197, 171, 204,
	487, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 382, 375, 412, 473, 476, 397, 461, 387, 419,
	468, 420, 443, 402, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 0, 0, 159, 131, 0, 0, 0, 380,
	0, 188, 207, 224, 225, 381, 401, 483, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 460, 178, 115, 206, 184, 0, 396,
	400, 394, 395, 447, 448, 493, 494, 495, 471, 391,
	0, 398, 399, 0, 478, 133, 235, 236, 450, 99,
	107, 140, 500, 221, 0, 172, 126, 208, 0, 0,
	425, 376, 429, 0, 0, 0, 0, 0, 0, 0,
	388, 389, 179, 0, 433, 428, 455, 457, 466, 474,
	0, 405, 439, 0, 112, 488, 477, 0, 436, 490,
	406, 424, 498, 426, 427, 463, 385, 446, 163, 421,
	403, 100, 409, 378, 416, 379, 407, 438, 124, 404,
	0, 479, 449, 138, 233, 234, 496, 141, 454, 0,
	187, 151, 0, 0, 441, 481, 444, 472, 435, 464,
	393, 453, 491, 422, 459, 492, 0, 0, 0, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 458, 486, 418, 501, 0, 462, 377, 456, 0,
	383, 386, 497, 484, 413, 414, 0, 0, 0, 0,
	0, 0, 0, 440, 445, 469, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 410,
	0, 452, 0, 0, 0, 390, 384, 0, 437, 0,
	0, 0, 392, 0, 411, 470, 0, 374, 475, 482,
	434, 147, 214, 485, 431, 430, 170, 0, 116, 0,
	193, 128, 423, 139, 467, 499, 489, 442, 480, 408,
	417, 118, 415, 177, 164, 205, 451, 465, 175, 142,
	197, 171, 204, 487, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 382, 375, 412, 473, 476, 397,
	461, 387, 419, 468, 420, 443, 402, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 380, 0, 188, 207, 224, 225, 381, 401,
	483, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 460, 178, 115, 206,
	184, 0, 396, 400, 394, 395, 447, 448, 493, 494,
	495, 471, 391, 0, 398, 399, 0, 478, 133, 235,
	236, 450, 99, 107, 140, 500, 221, 0, 172, 126,
	208, 0, 0, 425, 376, 429, 0, 0, 0, 0,
	0, 0, 0, 388, 389, 179, 0, 433, 428, 455,
	457, 466, 474, 0, 405, 439, 0, 112, 488, 477,
	0, 436, 490, 406, 424, 498, 426, 427, 463, 385,
	446, 163, 421, 403, 100, 409, 378, 416, 379, 407,
	438, 124, 404, 0, 479, 449, 138, 233, 234, 496,
	141, 454, 0, 187, 151, 0, 0, 441, 481, 444,
	472, 435, 464, 393, 453, 491, 422, 459, 492, 50,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 458, 486, 418, 501, 0, 462,
	377, 456, 0, 383, 386, 497, 484, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 440, 445, 469, 432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 452, 0, 0, 0, 390, 384,
	0, 437, 0, 0, 0, 392, 0, 411, 470, 0,
	374, 475, 482, 434, 147, 214, 485, 431, 430, 170,
	0, 116, 0, 193, 128, 423, 139, 467, 499, 489,
	442, 480, 408, 417, 118, 415, 177, 164, 205, 451,
	465, 175, 142, 197, 171, 204, 487, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 382, 375, 412,
	473, 476, 397, 461, 387, 419, 468, 420, 443, 402,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 380, 0, 188, 207, 224,
	225, 381, 401, 483, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 460,
	178, 115, 206, 184, 0, 396, 400, 394, 395, 447,
	448, 493, 494, 495, 471, 391, 0, 398, 399, 0,
	478, 133, 235, 236, 450, 99, 107, 140, 500, 221,
	0, 172, 126, 208, 0, 0, 425, 376, 429, 0,
	0, 0, 0, 0, 0, 0, 388, 389, 179, 0,
	433, 428, 455, 457, 466, 474, 0, 405, 439, 0,
	112, 488, 477, 0, 436, 490, 406, 424, 498, 426,
	427, 463, 385, 446, 163, 421, 403, 100, 409, 378,
	416, 379, 407, 438, 124, 404, 0, 479, 449, 138,
	233, 234, 496, 141, 454, 0, 187, 151, 0, 0,
	441, 481, 444, 472, 435, 464, 393, 453, 491, 422,
	459, 492, 0, 0, 0, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 458, 486, 418,
	501, 0, 462, 377, 456, 0, 383, 386, 497, 484,
	413, 414, 0, 0, 0, 0, 0, 0, 0, 440,
	445, 469, 432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 410, 0, 452, 0, 0,
	0, 390, 384, 0, 437, 0, 0, 0, 392, 0,
	411, 470, 0, 374, 475, 482, 434, 147, 214, 485,
	431, 430, 170, 0, 116, 0, 193, 128, 423, 139,
	467, 499, 489, 442, 480, 408, 417, 118, 415, 177,
	164, 205, 451, 465, 175, 142, 197, 171, 204, 487,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	382, 375, 412, 473, 476, 397, 461, 387, 419, 468,
	420, 443, 402, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 370, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 380, 0,
	188, 207, 224, 225, 381, 401, 483, 217, 218, 219,
	220, 0, 0, 0, 371, 369, 132, 182, 136, 143,
	173, 222, 460, 178, 115, 206, 184, 365, 396, 400,
	394, 395, 447, 448, 493, 494, 495, 471, 391, 0,
	398, 399, 0, 478, 133, 235, 236, 450, 99, 107,
	140, 500, 221, 0, 172, 126, 208, 0, 0, 425,
	376, 429, 0, 0, 0, 0, 0, 0, 0, 388,
	389, 179, 0, 433, 428, 455, 457, 466, 474, 0,
	405, 439, 0, 112, 488, 477, 0, 436, 490, 406,
	424, 498, 426, 427, 463, 385, 446, 163, 421, 403,
	100, 409, 378, 416, 379, 407, 438, 124, 404, 0,
	479, 449, 138, 233, 234, 496, 141, 454, 0, 187,
	151, 0, 0, 441, 481, 444, 472, 435, 464, 393,
	453, 491, 422, 459, 492, 0, 0, 0, 95, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	458, 486, 418, 501, 0, 462, 377, 456, 0, 383,
	386, 497, 484, 413, 414, 0, 0, 0, 0, 0,
	0, 0, 440, 445, 469, 432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 410, 0,
	452, 0, 0, 0, 390, 384, 0, 437, 0, 0,
	0, 392, 0, 411, 470, 0, 374, 475, 482, 434,
	147, 214, 485, 431, 430, 170, 0, 116, 0, 193,
	128, 423, 139, 467, 499, 489, 442, 480, 408, 417,
	118, 415, 177, 164, 205, 451, 465, 175, 142, 197,
	171, 204, 487, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 382, 375, 412, 473, 476, 397, 461,
	387, 419, 468, 420, 443, 402, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 380, 0, 188, 207, 224, 225, 381, 401, 483,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 460, 178, 115, 206, 184,
	0, 396, 400, 394, 395, 447, 448, 493, 494, 495,
	471, 391, 0, 398, 399, 0, 478, 133, 235, 236,
	450, 99, 107, 140, 500, 221, 0, 172, 126, 208,
	0, 0, 425, 376, 429, 0, 0, 0, 0, 0,
	0, 0, 388, 389, 179, 0, 433, 428, 455, 457,
	466, 474, 0, 405, 439, 0, 112, 488, 477, 0,
	436, 490, 406, 424, 498, 426, 427, 463, 385, 446,
	163, 421, 403, 100, 409, 378, 416, 379, 407, 438,
	124, 404, 0, 479, 449, 138, 233, 234, 496, 141,
	454, 0, 187, 151, 0, 0, 441, 481, 444, 472,
	435, 464, 393, 453, 491, 422, 459, 492, 0, 0,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 458, 486, 418, 501, 0, 462, 377,
	456, 0, 383, 386, 497, 484, 413, 414, 0, 0,
	0, 0, 0, 0, 0, 440, 445, 469, 432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 0, 452, 0, 0, 0, 390, 384, 0,
	437, 0, 0, 0, 392, 0, 411, 470, 0, 374,
	475, 482, 434, 147, 214, 485, 431, 430, 170, 0,
	116, 0, 193, 128, 423, 139, 467, 499, 489, 442,
	480, 408, 417, 118, 415, 177, 164, 205, 451, 465,
	175, 142, 197, 171, 204, 487, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 382, 375, 412, 473,
	476, 397, 461, 387, 419, 468, 420, 443, 402, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 720, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 370, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 380, 0, 188, 207, 224, 225,
	381, 401, 483, 217, 218, 219, 220, 0, 0, 0,
	371, 369, 132, 182, 136, 143, 173, 222, 460, 178,
	115, 206, 184, 365, 396, 400, 394, 395, 447, 448,
	493, 494, 495, 471, 391, 0, 398, 399, 0, 478,
	133, 235, 236, 450, 99, 107, 140, 500, 221, 0,
	172, 126, 208, 0, 0, 425, 376, 429, 0, 0,
	0, 0, 0, 0, 0, 388, 389, 179, 0, 433,
	428, 455, 457, 466, 474, 0, 405, 439, 0, 112,
	488, 477, 0, 436, 490, 406, 424, 498, 426, 427,
	463, 385, 446, 163, 421, 403, 100, 409, 378, 416,
	379, 407, 438, 124, 404, 0, 479, 449, 138, 233,
	234, 496, 141, 454, 0, 187, 151, 0, 0, 441,
	481, 444, 472, 435, 464, 393, 453, 491, 422, 459,
	492, 0, 0, 0, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 458, 486, 418, 501,
	0, 462, 377, 456, 0, 383, 386, 497, 484, 413,
	414, 0, 0, 0, 0, 0, 0, 0, 440, 445,
	469, 432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 410, 0, 452, 0, 0, 0,
	390, 384, 0, 437, 0, 0, 0, 392, 0, 411,
	470, 0, 374, 475, 482, 434, 147, 214, 485, 431,
	430, 170, 0, 116, 0, 193, 128, 423, 139, 467,
	499, 489, 442, 480, 408, 417, 118, 415, 177, 164,
	205, 451, 465, 175, 142, 197, 171, 204, 487, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 382,
	375, 412, 473, 476, 397, 461, 387, 419, 468, 420,
	443, 402, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 360, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 370, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 380, 0, 188,
	207, 224, 225, 381, 401, 483, 217, 218, 219, 220,
	0, 0, 0, 371, 369, 363, 362, 136, 143, 173,
	222, 460, 178, 115, 206, 184, 365, 396, 400, 394,
	395, 447, 448, 493, 494, 495, 471, 391, 0, 398,
	399, 0, 478, 133, 235, 236, 450, 99, 107, 140,
	500, 221, 0, 172, 126, 208, 0, 0, 425, 376,
	429, 0, 0, 0, 0, 0, 0, 0, 388, 389,
	179, 0, 433, 428, 455, 457, 466, 474, 0, 405,
	439, 0, 112, 488, 477, 0, 436, 490, 406, 424,
	498, 426, 427, 463, 385, 446, 163, 421, 403, 100,
	409, 378, 416, 379, 407, 438, 124, 404, 0, 479,
	449, 138, 233, 234, 496, 141, 454, 0, 187, 151,
	0, 0, 441, 481, 444, 472, 435, 464, 393, 453,
	491, 422, 459, 492, 0, 0, 0, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 458,
	486, 418, 501, 0, 462, 377, 456, 0, 383, 386,
	497, 484, 413, 414, 0, 0, 0, 0, 0, 0,
	0, 440, 445, 469, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 410, 0, 452,
	0, 0, 0, 390, 384, 0, 437, 0, 0, 0,
	392, 0, 411, 470, 0, 374, 475, 482, 434, 147,
	214, 485, 431, 430, 170, 0, 116, 0, 193, 128,
	423, 139, 467, 499, 489, 442, 480, 408, 417, 118,
	415, 177, 164, 205, 451, 465, 175, 142, 197, 171,
	204, 487, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 382, 375, 412, 473, 476, 397, 461, 387,
	419, 468, 420, 443, 402, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	380, 0, 188, 207, 224, 225, 381, 401, 483, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 460, 178, 115, 206, 184, 0,
	396, 400, 394, 395, 447, 448, 493, 494, 495, 471,
	391, 0, 398, 399, 0, 478, 133, 235, 236, 450,
	99, 107, 140, 500, 221, 0, 172, 126, 208, 0,
	0, 425, 376, 429, 0, 0, 0, 0, 0, 0,
	0, 388, 389, 179, 0, 433, 428, 455, 457, 466,
	474, 0, 405, 439, 163, 112, 0, 100, 935, 0,
	289, 0, 0, 0, 124, 285, 0, 0, 0, 138,
	233, 234, 331, 141, 0, 0, 187, 151, 0, 0,
	0, 0, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 286, 310, 288, 308, 312,
	313, 314, 315, 0, 0, 113, 311, 316, 317, 318,
	0, 0, 0, 0, 283, 301, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 299, 279, 0, 0, 0, 343, 0, 300,
	0, 0, 296, 297, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 341, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 345, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 319, 332, 342,
	338, 339, 336, 337, 335, 334, 333, 344, 324, 325,
	326, 327, 329, 0, 133, 235, 236, 328, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 289, 0, 0, 0, 124, 285, 0,
	0, 179, 138, 233, 234, 331, 141, 0, 0, 187,
	151, 0, 340, 112, 0, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 559, 286, 310,
	288, 308, 312, 313, 314, 315, 0, 0, 113, 311,
	316, 317, 318, 0, 0, 0, 0, 283, 301, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 299, 0, 0, 0, 0,
	343, 0, 300, 0, 0, 296, 297, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 341, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 345, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	319, 332, 342, 338, 339, 336, 337, 335, 334, 333,
	344, 324, 325, 326, 327, 329, 0, 133, 235, 236,
	328, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 289, 0, 0, 0,
	124, 285, 0, 0, 179, 138, 233, 234, 331, 141,
	0, 0, 187, 151, 0, 340, 112, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 286, 310, 288, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 317, 318, 0, 0, 0, 0,
	283, 301, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 279,
	0, 0, 0, 343, 0, 300, 0, 0, 296, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 341, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 332, 342, 338, 339, 336, 337,
	335, 334, 333, 344, 324, 325, 326, 327, 329, 0,
	133, 235, 236, 328, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 289,
	0, 0, 0, 124, 285, 0, 0, 179, 138, 233,
	234, 331, 141, 0, 0, 187, 151, 0, 340, 112,
	0, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 286, 310, 288, 308, 312, 313,
	314, 315, 0, 0, 113, 311, 316, 317, 318, 0,
	0, 0, 0, 283, 301, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 299, 0, 0, 0, 0, 343, 0, 300, 0,
	0, 949, 297, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	341, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 951, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 961, 967, 965, 192, 149, 962,
	135, 183, 960, 103, 0, 969, 123, 168, 968, 953,
	964, 966, 963, 958, 199, 952, 223, 971, 970, 972,
	950, 974, 212, 106, 110, 977, 956, 976, 975, 209,
	973, 202, 150, 146, 0, 105, 200, 148, 145, 954,
	955, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	345, 0, 159, 131, 0, 0, 0, 0, 0, 957,
	959, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 319, 332, 342, 338,
	339, 336, 337, 335, 334, 333, 344, 324, 325, 326,
	327, 329, 0, 133, 235, 236, 328, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	179, 100, 0, 0, 289, 0, 0, 0, 124, 285,
	0, 340, 112, 138, 233, 234, 331, 141, 0, 0,
	187, 151, 0, 0, 0, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 286,
	310, 288, 308, 312, 313, 314, 315, 0, 0, 113,
	311, 316, 317, 318, 0, 0, 0, 0, 283, 301,
	0, 330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 299, 0, 0, 0,
	0, 343, 0, 300, 0, 0, 296, 297, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 341, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 345, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 319, 332, 342, 338, 339, 336, 337, 335, 334,
	333, 344, 324, 325, 326, 327, 329, 0, 133, 235,
	236, 328, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 289, 0, 0,
	0, 124, 285, 0, 0, 179, 138, 233, 234, 331,
	141, 0, 0, 187, 151, 0, 340, 112, 0, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 286, 310, 288, 308, 312, 313, 314, 315,
	0, 0, 113, 311, 316, 317, 318, 0, 0, 0,
	0, 283, 301, 0, 330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 299,
	0, 0, 0, 0, 343, 0, 300, 0, 0, 296,
	297, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 341, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 345, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 319, 332, 342, 338, 339, 336,
	337, 335, 334, 333, 344, 324, 325, 326, 327, 329,
	0, 133, 235, 236, 328, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 331, 141, 0, 0, 187, 151, 0, 340,
	112, 0, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 286, 310, 288, 308, 312,
	313, 314, 315, 0, 0, 113, 311, 316, 317, 318,
	0, 0, 0, 0, 0, 301, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 299, 0, 0, 0, 0, 343, 0, 300,
	0, 0, 296, 297, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 341, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 2106, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 345, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 319, 332, 342,
	338, 339, 336, 337, 335, 334, 333, 344, 324, 325,
	326, 327, 329, 0, 133, 235, 236, 328, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 289, 0, 0, 0, 124, 0, 0,
	0, 179, 138, 233, 234, 331, 141, 0, 0, 187,
	151, 0, 340, 112, 0, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 286, 310,
	288, 308, 312, 313, 314, 315, 0, 0, 113, 311,
	316, 317, 318, 0, 0, 0, 0, 0, 301, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 299, 0, 0, 0, 0,
	343, 0, 300, 0, 0, 296, 297, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 341, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 345, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	319, 332, 342, 338, 339, 336, 337, 335, 334, 333,
	344, 324, 325, 326, 327, 329, 0, 133, 235, 236,
	328, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 331, 141,
	0, 0, 187, 151, 0, 340, 112, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 286, 310, 288, 308, 312, 313, 314, 315, 0,
	0, 113, 311, 316, 317, 318, 0, 0, 0, 0,
	0, 301, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 299, 0,
	0, 0, 0, 343, 0, 300, 0, 0, 296, 297,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 341, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 345, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 319, 332, 342, 338, 339, 336, 337,
	335, 334, 333, 344, 324, 325, 326, 327, 329, 0,
	133, 235, 236, 328, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 331, 141, 0, 0, 187, 151, 0, 340, 112,
	0, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 1211, 0, 0, 286, 310, 288, 308, 312, 313,
	314, 315, 0, 0, 113, 311, 316, 317, 318, 0,
	0, 0, 0, 0, 301, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 299, 0, 0, 0, 0, 343, 0, 300, 0,
	0, 296, 297, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	341, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	345, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 319, 332, 342, 338,
	339, 336, 337, 335, 334, 333, 344, 324, 325, 326,
	327, 329, 0, 133, 235, 236, 328, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	179, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 340, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1542, 0, 0, 286, 0, 1312,
	1313, 1314, 1315, 0, 0, 0, 0, 113, 1318, 1316,
	317, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 1320, 1325, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	1322, 0, 1324, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	286, 0, 1312, 1313, 1314, 1315, 0, 0, 0, 0,
	113, 1318, 1316, 317, 318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 1320, 1325,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 1322, 0, 1324, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 179, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 1312, 1313, 1314, 1315, 0,
	0, 0, 0, 113, 1318, 1316, 317, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 1320, 1325, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 1322, 0, 1324, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 310, 929, 308,
	312, 313, 314, 315, 0, 0, 113, 311, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 235, 236, 0, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 163, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 767, 179, 138, 233, 234, 0, 141, 0, 0,
	187, 151, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1825, 0, 372,
	0, 1823, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1821, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 768, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 0,
	794, 795, 168, 796, 797, 798, 800, 799, 769, 770,
	771, 775, 773, 772, 774, 746, 748, 212, 744, 747,
	753, 749, 750, 751, 765, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 766, 776, 777, 778,
	779, 780, 781, 782, 783, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 745, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 767, 179, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 752,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 0, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 768, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 1990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 0, 794, 795, 168, 796, 797, 798, 800,
	799, 769, 770, 771, 775, 773, 772, 774, 746, 748,
	212, 744, 747, 753, 749, 750, 751, 765, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 766,
	776, 777, 778, 779, 780, 781, 782, 783, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 745, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 581,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 0, 583, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 578, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	767, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	768, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 0, 794,
	795, 168, 796, 797, 798, 800, 799, 769, 770, 771,
	775, 773, 772, 774, 746, 748, 212, 744, 747, 753,
	749, 750, 751, 765, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 766, 776, 777, 778, 779,
	780, 781, 782, 783, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 745, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1825,
	0, 372, 0, 1823, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1822, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 147, 214, 0, 0,
	0, 1053, 0, 1052, 0, 1054, 1055, 0, 139, 0,
	0, 1056, 1059, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 0, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	179, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 1688, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 1687, 210, 157,
	162, 160, 209, 1689, 202, 150, 146, 0, 105, 200,
	148, 145, 1690, 927, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 923, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 23,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 0,
	0, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 179, 0, 0, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 95, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 0, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 2065, 0,
	0, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 1517, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 709, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 711, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 95, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 23, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 0, 0, 163, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 124, 0,
	179, 0, 0, 138, 233, 234, 0, 141, 0, 0,
	187, 151, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 179, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 372, 0, 0, 0, 865, 0, 0, 866,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 0, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 825, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 803, 0, 0, 0, 0, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 730, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 729, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 709, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 711, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 707, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 0, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 687, 124, 0, 0, 0,
	179, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 355, 221, 0, 172, 126, 208, 0,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 179, 0, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 163, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 179, 138, 233,
	234, 0, 141, 0, 0, 187, 151, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 147, 214, 0, 0,
	0, 170, 0, 116, 0, 193, 128, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 177, 164,
	205, 0, 165, 175, 142, 197, 171, 204, 0, 215,
	216, 195, 213, 180, 108, 158, 98, 169, 176, 0,
	117, 0, 226, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 185, 101,
	194, 203, 114, 181, 104, 201, 190, 192, 149, 134,
	135, 183, 102, 103, 0, 174, 123, 168, 127, 122,
	161, 191, 152, 198, 199, 119, 223, 121, 120, 189,
	109, 211, 212, 106, 110, 210, 157, 162, 160, 209,
	196, 202, 150, 146, 0, 105, 200, 148, 145, 137,
	0, 125, 129, 166, 144, 167, 130, 154, 153, 155,
	0, 0, 159, 131, 0, 0, 0, 0, 0, 188,
	207, 224, 225, 0, 0, 0, 217, 218, 219, 220,
	0, 0, 0, 156, 111, 132, 182, 136, 143, 173,
	222, 0, 178, 115, 206, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 235, 236, 0, 99, 107, 140,
	0, 221, 0, 172, 126, 208, 163, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	179, 138, 233, 234, 0, 141, 0, 0, 187, 151,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	214, 0, 0, 0, 170, 0, 116, 0, 193, 128,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 177, 164, 205, 0, 165, 175, 142, 197, 171,
	204, 0, 215, 216, 195, 213, 180, 108, 158, 98,
	169, 176, 0, 117, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 185, 101, 194, 203, 114, 181, 104, 201, 190,
	192, 149, 134, 135, 183, 102, 103, 0, 174, 123,
	168, 127, 122, 161, 191, 152, 198, 199, 119, 223,
	121, 120, 189, 109, 211, 212, 106, 110, 210, 157,
	162, 160, 209, 196, 202, 150, 146, 0, 105, 200,
	148, 145, 137, 0, 125, 129, 166, 144, 167, 130,
	154, 153, 155, 0, 0, 159, 131, 0, 0, 0,
	0, 0, 188, 207, 224, 225, 0, 0, 0, 217,
	218, 219, 220, 0, 0, 0, 156, 111, 132, 182,
	136, 143, 173, 222, 0, 178, 115, 206, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 235, 236, 0,
	99, 107, 140, 0, 221, 0, 172, 126, 208, 163,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 179, 138, 233, 234, 0, 141, 0,
	0, 187, 151, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 214, 0, 0, 0, 170, 0, 116,
	0, 193, 128, 0, 139, 0, 0, 0, 1517, 0,
	0, 0, 118, 0, 177, 164, 205, 0, 165, 175,
	142, 197, 171, 204, 0, 215, 216, 195, 213, 180,
	108, 158, 98, 169, 176, 0, 117, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 185, 101, 194, 203, 114, 181,
	104, 201, 190, 192, 149, 134, 135, 183, 102, 103,
	0, 174, 123, 168, 127, 122, 161, 191, 152, 198,
	199, 119, 223, 121, 120, 189, 109, 211, 212, 106,
	110, 210, 157, 162, 160, 209, 196, 202, 150, 146,
	0, 105, 200, 148, 145, 137, 0, 125, 129, 166,
	144, 167, 130, 154, 153, 155, 0, 0, 159, 131,
	0, 0, 0, 0, 0, 188, 207, 224, 225, 0,
	0, 0, 217, 218, 219, 220, 0, 0, 0, 156,
	111, 132, 182, 136, 143, 173, 222, 0, 178, 115,
	206, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	235, 236, 0, 99, 107, 140, 0, 221, 0, 172,
	126, 208, 163, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 179, 138, 233, 234,
	0, 141, 0, 0, 187, 151, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 214, 0, 0, 0,
	170, 0, 116, 0, 193, 128, 0, 139, 0, 0,
	0, 1642, 0, 0, 0, 118, 0, 177, 164, 205,
	0, 165, 175, 142, 197, 171, 204, 0, 215, 216,
	195, 213, 180, 108, 158, 98, 169, 176, 0, 117,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 185, 101, 194,
	203, 114, 181, 104, 201, 190, 192, 149, 134, 135,
	183, 102, 103, 0, 174, 123, 168, 127, 122, 161,
	191, 152, 198, 199, 119, 223, 121, 120, 189, 109,
	211, 212, 106, 110, 210, 157, 162, 160, 209, 196,
	202, 150, 146, 0, 105, 200, 148, 145, 137, 0,
	125, 129, 166, 144, 167, 130, 154, 153, 155, 0,
	0, 159, 131, 0, 0, 0, 0, 0, 188, 207,
	224, 225, 0, 0, 0, 217, 218, 219, 220, 0,
	0, 0, 156, 111, 132, 182, 136, 143, 173, 222,
	0, 178, 115, 206, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 235, 236, 0, 99, 107, 140, 0,
	221, 0, 172, 126, 208, 163, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 179,
	138, 233, 234, 0, 141, 0, 0, 187, 151, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 214,
	0, 0, 0, 170, 0, 116, 0, 193, 128, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	177, 164, 205, 0, 165, 175, 142, 197, 171, 204,
	0, 215, 216, 195, 213, 180, 108, 158, 98, 169,
	176, 0, 117, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	185, 101, 194, 203, 114, 181, 104, 201, 190, 192,
	149, 134, 135, 183, 102, 103, 0, 174, 123, 168,
	127, 122, 161, 191, 152, 198, 199, 119, 223, 121,
	120, 189, 109, 211, 212, 106, 110, 210, 157, 162,
	160, 209, 196, 202, 150, 146, 0, 105, 200, 148,
	145, 137, 0, 125, 129, 166, 144, 167, 130, 154,
	153, 155, 0, 0, 159, 131, 0, 0, 0, 0,
	0, 188, 207, 224, 225, 0, 0, 0, 217, 218,
	219, 220, 0, 0, 0, 156, 111, 132, 182, 136,
	143, 173, 222, 0, 178, 115, 206, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 235, 236, 0, 99,
	107, 140, 0, 221, 0, 172, 126, 208, 163, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 179, 138, 233, 234, 0, 141, 0, 0,
	187, 151, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 711, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 214, 0, 0, 0, 170, 0, 116, 0,
	193, 128, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 177, 164, 205, 0, 165, 175, 142,
	197, 171, 204, 0, 215, 216, 195, 213, 180, 108,
	158, 98, 169, 176, 0, 117, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 185, 101, 194, 203, 114, 181, 104,
	201, 190, 192, 149, 134, 135, 183, 102, 103, 0,
	174, 123, 168, 127, 122, 161, 191, 152, 198, 199,
	119, 223, 121, 120, 189, 109, 211, 212, 106, 110,
	210, 157, 162, 160, 209, 196, 202, 150, 146, 0,
	105, 200, 148, 145, 137, 0, 125, 129, 166, 144,
	167, 130, 154, 153, 155, 0, 0, 159, 131, 0,
	0, 0, 0, 0, 188, 207, 224, 225, 0, 0,
	0, 217, 218, 219, 220, 0, 0, 0, 156, 111,
	132, 182, 136, 143, 173, 222, 0, 178, 115, 206,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 235,
	236, 0, 99, 107, 140, 0, 221, 0, 172, 126,
	208, 163, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 179, 138, 233, 234, 0,
	141, 0, 0, 187, 151, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 214, 0, 0, 0, 170,
	0, 116, 0, 193, 128, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 177, 164, 205, 0,
	165, 175, 142, 197, 171, 204, 0, 215, 216, 195,
	213, 180, 108, 158, 98, 169, 176, 0, 117, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 185, 101, 194, 203,
	114, 181, 104, 201, 190, 192, 149, 134, 135, 183,
	102, 103, 0, 174, 123, 168, 127, 122, 161, 191,
	152, 198, 199, 119, 223, 121, 120, 189, 109, 211,
	212, 106, 110, 210, 157, 162, 160, 209, 196, 202,
	150, 146, 0, 105, 200, 148, 145, 137, 0, 125,
	129, 166, 144, 167, 130, 154, 153, 155, 0, 0,
	159, 131, 0, 0, 0, 0, 0, 188, 207, 224,
	225, 0, 0, 0, 217, 218, 219, 220, 0, 0,
	0, 156, 111, 132, 182, 136, 143, 173, 222, 0,
	178, 115, 206, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 235, 236, 0, 99, 107, 140, 0, 221,
	0, 172, 126, 208, 163, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 179, 138,
	233, 234, 0, 141, 0, 0, 187, 151, 0, 605,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 0, 583, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 214, 0,
	0, 0, 170, 0, 116, 0, 193, 128, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 177,
	164, 205, 0, 165, 175, 142, 197, 171, 204, 0,
	215, 216, 195, 213, 180, 108, 158, 98, 169, 176,
	0, 117, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 185,
	101, 194, 203, 114, 181, 104, 201, 190, 192, 149,
	134, 135, 183, 102, 103, 0, 174, 123, 168, 127,
	122, 161, 191, 152, 198, 199, 119, 223, 121, 120,
	189, 109, 211, 212, 106, 110, 210, 157, 162, 160,
	209, 196, 202, 150, 146, 0, 105, 200, 148, 145,
	137, 0, 125, 129, 166, 144, 167, 130, 154, 153,
	155, 0, 0, 159, 131, 0, 0, 0, 0, 0,
	188, 207, 224, 225, 0, 0, 0, 217, 218, 219,
	220, 0, 0, 0, 156, 111, 132, 182, 136, 143,
	173, 222, 0, 178, 115, 206, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 235, 236, 0, 99, 107,
	140, 0, 221, 0, 172, 126, 208, 163, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 179, 138, 233, 234, 0, 141, 0, 0, 187,
	151, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 214, 0, 0, 0, 170, 0, 116, 0, 193,
	128, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 177, 164, 205, 0, 165, 175, 142, 197,
	171, 204, 0, 215, 216, 195, 213, 180, 108, 158,
	98, 169, 176, 0, 117, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 185, 101, 194, 203, 114, 181, 104, 201,
	190, 192, 149, 134, 135, 183, 102, 103, 0, 174,
	123, 168, 127, 122, 161, 191, 152, 198, 199, 119,
	223, 121, 120, 189, 109, 211, 212, 106, 110, 210,
	157, 162, 160, 209, 196, 202, 150, 146, 0, 105,
	200, 148, 145, 137, 0, 125, 129, 166, 144, 167,
	130, 154, 153, 155, 0, 0, 159, 131, 0, 0,
	0, 0, 0, 188, 207, 224, 225, 0, 0, 0,
	217, 218, 219, 220, 0, 0, 0, 156, 111, 132,
	182, 136, 143, 173, 222, 0, 178, 115, 206, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 235, 236,
	0, 99, 107, 140, 0, 221, 0, 172, 126, 208,
	163, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 179, 138, 233, 234, 0, 141,
	0, 0, 187, 151, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 214, 0, 0, 0, 170, 0,
	116, 0, 193, 128, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 177, 164, 205, 0, 165,
	175, 142, 197, 171, 204, 0, 215, 216, 195, 213,
	180, 108, 158, 98, 169, 176, 0, 117, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 185, 101, 194, 203, 114,
	181, 104, 201, 190, 192, 149, 134, 135, 183, 102,
	103, 0, 174, 123, 168, 127, 122, 161, 191, 152,
	198, 199, 119, 223, 121, 120, 189, 109, 211, 212,
	106, 110, 210, 157, 162, 160, 209, 196, 202, 150,
	146, 0, 105, 200, 148, 145, 137, 0, 125, 129,
	166, 144, 167, 130, 154, 153, 155, 0, 0, 159,
	131, 0, 0, 0, 0, 0, 188, 207, 224, 225,
	0, 0, 0, 217, 218, 219, 220, 0, 0, 0,
	156, 111, 132, 182, 136, 143, 173, 222, 0, 178,
	115, 206, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 235, 236, 0, 99, 107, 140, 0, 221, 0,
	172, 126, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
}

var yyPact = [...]int16{
	2968, -1000, -233, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1479, 1526, -1000, -1000, -1000, -1000, -1000, -1000, 1316,
	2241, 422, 486, 159, 18555, 484, 3127, 18868, -1000, 124,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1210, -1000, -1000,
	-1000, -1000, -1000, 1469, 1475, 1259, 1455, 1391, -1000, 8522,
	419, 15735, 18242, 7205, -1000, 21059, 479, 476, 225, 428,
	21372, 409, 409, 21372, 21372, 18868, 481, 409, -1000, -199,
	-174, -1000, -54, 460, 18868, -1000, 18868, 412, 1069, 412,
	412, 412, 18868, -1000, 545, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18868, 1062, 1410,
	305, 5793, 5793, 5793, 5793, 269, 5793, -12, 1349, -1000,
	-1000, -1000, -1000, 5793, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 866, 1419, 9473, 9473, 1479, -1000,
	1210, -1000, -1000, -1000, 1406, -1000, -1000, 762, 1514, -1000,
	12916, 544, -1000, 9473, 105, 1232, -1000, -1000, -218, 1232,
	-1000, -1000, 499, -1000, -1000, -1000, 10412, 10412, 10412, 10412,
	10412, 10412, 10412, -1000, -1000, -1000, -1000, 42, -1000, 903,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 543,
	-1000, 9160, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	9473, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	2286, 1232, 1232, 1232, 1232, -1000, 17928, 1176, 1346, -1000,
	-1000, -1000, 1449, 14483, 17615, 18868, 1151, -1000, 1229, 6852,
	-32, -1000, -1000, -1000, 674, 542, 17302, -1000, -1000, -1000,
	1409, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1095, -1000, 13229, 13229, 16989, 21372, 409, 427,
	133, 409, 1319, 1060, 725, 1058, 1348, 523, 1447, 409,
	18868, -1000, -1000, -1000, -1000, 16676, 5793, 425, 18868, 1430,
	1345, 18868, 1056, 1040, -1000, 6499, -1000, 5793, 5793, 5793,
	5793, 5793, 5793, 5793, 5793, -1000, -1000, -1000, -1000, -1000,
	-1000, 5793, 5793, -1000, 3, -1000, 18868, -1000, -1000, -1000,
	-1000, 1520, 532, 934, 541, 1230, -1000, 704, 1469, 866,
	1391, 16363, 1361, -1000, -1000, 18868, -1000, 9473, 9473, 861,
	-1000, 20746, -1000, -1000, 4381, 587, 10412, 782, 694, 10412,
	10412, 10412, 10412, 10412, 10412, 10412, 10412, 10412, 10412, 10412,
	10412, 10412, 10412, 10412, 886, 2650, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1022, -1000,
	648, -1000, 1210, 11977, 11977, 25, 25, 25, 25, 25,
	25, 20433, -1000, -244, 7896, -1000, 7558, 866, 1091, 759,
	9160, 8522, 8522, 8835, 9473, 10412, 19807, 8522, 1456, 719,
	759, 19807, -1000, 866, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 83, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 8522, 8522, 8522, 8522, 282, 18868, -1000, 19807,
	15735, 15735, 15735, 15735, 15735, -1000, 1371, 1370, -1000, 1360,
	1356, 1364, 18868, -1000, 1093, 14483, 493, 1232, -1000, 20120,
	-1000, -1000, 282, 1169, 15735, 18868, -1000, -1000, 6146, 1229,
	-32, 1226, -1000, -21, -26, 3532, 7558, 556, -1000, -1000,
	-1000, -1000, 196, 13855, 204, -141, 30, -1000, -1000, -1000,
	-1000, -1000, 1272, -1000, -1000, -1000, 1272, 260, 1315, 1272,
	1315, -1000, 1272, 1315, 70, 70, 70, 70, 70, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1312, 1301, -1000, 1272,
	1272, 1272, 1272, 1272, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1296, 309, 1296, 1276, 1276, -1000,
	-1000, 204, 1311, 18868, 21372, 1344, 18868, 409, -211, 18868,
	-107, 1020, 5793, 1422, 5793, 18868, 1499, 18868, -1000, -1000,
	-1000, 13229, 18868, -1000, 1434, 18868, -1000, 18868, -1000, -1000,
	18868, 5793, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 671, -1000, -1000,
	-1000, -1000, 1385, 9473, 9473, 5087, 9473, -1000, -1000, -1000,
	1419, -1000, 1456, 1463, -1000, 1400, 1399, 8522, -1000, -1000,
	587, 612, -1000, -1000, 813, -1000, -1000, -1000, -1000, 539,
	1232, -1000, 2313, -1000, -1000, -1000, -1000, 782, 10412, 10412,
	10412, 2104, 2313, 2250, 459, 381, 25, 114, 114, 41,
	41, 41, 41, 41, 56, 56, -1000, -1000, -1000, -1000,
	-89, -1000, 1272, 1296, 309, 1296, 1276, 1276, -1000, -1000,
	866, 82, -98, -1000, -1000, -1000, -1000, -1000, -1000, -218,
	932, -1000, -1000, 918, 866, 8522, 1083, 1091, -1000, 12916,
	-1000, -1000, 9473, -1000, 866, 1083, 1083, 757, 1228, 10725,
	1272, -1000, 1272, 1276, -1000, -1000, 1272, 113, 1272, 112,
	-1000, -1000, -1000, -1000, 1276, -1000, -1000, -1000, -1000, -1000,
	1272, 1272, -1000, -1000, 1272, -1000, 1272, 1272, 686, 656,
	2125, 1214, -1000, 538, 1083, 8522, 709, -1000, 9473, 866,
	-1000, -1000, 1083, 866, 1227, 1083, 1083, 1208, 1232, -1000,
	1203, -1000, 670, 1346, 1308, 1341, 1275, -1000, -1000, -1000,
	-1000, 1369, -1000, 1363, -1000, -1000, -1000, -1000, -93, 475,
	445, 443, 21372, -1000, 1494, 15735, 1186, -1000, -1000, 1226,
	-32, 10, -1000, -1000, -1000, -1000, 759, 669, -1000, -1000,
	1013, 7558, 1224, 1403, -1000, -1000, -1000, -1000, -1000, -1000,
	1300, 786, 21372, 325, 322, 529, 491, 1001, -1000, -1000,
	-1000, 850, -1000, 21372, -1000, 1519, -1000, -1000, 321, -1000,
	318, 708, 931, 18868, 160, 1299, 11351, 881, -1000, -246,
	-1000, 18, -1000, -1000, 863, 70, 70, 1272, 70, 815,
	70, 70, -1000, -1000, 556, 1408, 556, 556, 556, 556,
	926, 926, -98, -98, -1000, -1000, -1000, -1000, 878, 1296,
	-1000, -1000, -1000, 875, -1000, 18868, 21372, 1295, 1333, 18868,
	1445, 18868, -1000, -1000, -1000, 1443, -1000, 7558, -1000, -1000,
	-1000, -1000, -1000, 1442, 1166, -1000, -1000, -1000, -1000, 349,
	-1000, 1325, -1000, 929, 904, 504, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 276, 490, -1000,
	5793, -1000, 690, 18868, 18868, 1380, 759, 759, 534, -1000,
	-1000, 18868, -1000, -1000, -1000, -1000, 1191, -1000, -1000, -1000,
	5440, 8522, -1000, 2104, 2313, 865, -1000, 10412, 10412, 96,
	-1000, -1000, -1000, 95, 93, 67, -1000, -218, -1000, 1083,
	8522, -224, -1000, 759, -1000, -1000, -1000, 3147, 886, 9473,
	-1000, 863, 285, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3147, 10412, 10412, 10412, 10412,
	10412, 5087, -70, 1185, 697, -1000, 9473, 799, -1000, -1000,
	-1000, -1000, -1000, 1330, 19807, 1232, -1000, 16050, 21372, 1479,
	19807, 9473, 9473, -1000, -1000, 9473, 1286, -1000, 9473, -1000,
	-1000, -1000, -1000, 1285, 1232, 1232, 1232, 1050, -1000, 1479,
	1186, -1000, -1000, -1000, -23, -34, -1000, 9473, -1000, 4734,
	-1000, 196, -1000, 19181, -1000, 1511, 1465, 337, 1, -1000,
	988, 984, -1000, 969, -1000, -1000, 5, -1000, -187, 99,
	-9, -1000, -1000, 1232, -1000, 1284, 1441, -1000, 1414, 859,
	-1000, 11038, -214, -1000, -1000, -1000, -218, -1000, -1000, -1000,
	1232, -1000, 1282, 1279, -1000, 1271, 1232, 521, -1000, -1000,
	-1000, -1000, -1000, 1134, 556, 556, 70, 556, 1129, 1125,
	556, 556, -1000, 641, -1000, -1000, -1000, -1000, 1081, -1000,
	1079, -1000, -1000, 1215, -1000, 1068, 1221, 1327, 15109, 18868,
	1278, 1210, 1432, 1210, 1211, -1000, 650, 1464, 190, 18868,
	1499, 1499, 21372, -1000, 310, 21372, -1000, -1000, 21372, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21372, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18868, -1000, -1000, -1000, -1000, -1000, 21372, 392, -1000, -1000,
	920, 9473, -1000, -1000, -1000, 7558, -1000, 1494, 15735, -1000,
	-1000, 866, -1000, 10412, 2313, 2313, 15, 9, 8, -1000,
	918, -1000, -1000, -1000, -1000, 1232, 866, 1272, 1272, -1000,
	1272, 1276, -1000, 1272, 113, 1272, 112, -1000, -1000, -1000,
	-1000, 1276, -1000, -1000, -1000, -1000, -1000, 1272, 1272, -1000,
	-1000, 1272, -1000, 1272, 1272, 866, 823, -1000, -1000, 866,
	283, 314, 397, 268, 299, -1000, 1232, -62, -1000, 759,
	9473, -1000, 1417, 1137, 1189, -1000, -1000, 8209, 866, 1055,
	517, 1050, 1469, -1000, 759, 759, 759, 19494, 759, -72,
	19494, 19494, 19494, 15422, 21372, 1469, -1000, -1000, -1000, -1000,
	759, 4028, -1000, 7558, 1048, -1000, 258, 1272, 509, 509,
	-190, 316, 308, 1232, -1000, -1000, -1000, -1000, -194, -1000,
	-1000, -1000, -1000, 708, -1000, 1271, 9473, 19494, 103, -1000,
	1206, 1121, 11664, -1000, 14168, -1000, 866, -1000, 877, -1000,
	851, 1119, 7558, -1000, -1000, -1000, 556, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 70, 901, 70, 856, -1000, 845,
	15109, 21372, 18868, 1116, 1193, -1000, 250, 1262, 19494, -1000,
	1210, -1000, 7558, 4028, 416, 1452, -1000, -1000, 1461, -1000,
	1161, 1255, 21372, -1000, -1000, 328, -1000, 1252, -1000, -1000,
	-1000, -1000, 1423, 21372, -1000, -1000, 759, 1492, 1190, -1000,
	2313, -1000, -1000, -1000, -1000, 415, -1000, -1000, -1000, -1000,
	-1000, 10412, 10412, -1000, 10412, 10412, 10412, 866, 899, 759,
	296, -1000, 1232, -1000, -1000, 1199, 21372, 21372, -1000, -1000,
	1039, -1000, -1000, 1037, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1032, 1032, 1032, 493, -1000, -1000, -1000, -1000, -1000,
	-1000, 1167, 19181, 1427, -1000, -1000, -1000, 775, -1000, -1000,
	738, 195, 765, -1000, 21372, -194, 9473, -1000, 1232, 823,
	1030, 9473, 1251, 834, -1000, 1115, -1000, 82, -98, -1000,
	-1000, -1000, -1000, -1000, -1000, 1232, -1000, 556, -1000, 556,
	1112, 1108, 1105, 1249, 1248, -201, 15109, 1026, -1000, -1000,
	-1000, 21372, -1000, -1000, -1000, -1000, -1000, 174, 3039, -1000,
	13542, 1245, 1244, 19494, 1232, 399, 1485, 1474, -1000, 975,
	866, 1473, 283, 283, 283, 283, 139, -1000, -1000, 1518,
	-1000, 1232, -1000, 1210, 514, -1000, 21372, -1000, -1000, -72,
	-1000, -1000, -1000, -93, 1277, 1467, 132, -1000, 950, 646,
	892, 631, 628, 625, 618, 615, 611, 601, -1000, -1000,
	-1000, 1517, -1000, -1000, -1000, 1507, 1241, -1000, 1239, 823,
	9473, 212, 1313, 1034, -1000, 1027, 996, -1000, -1000, -1000,
	-1000, -201, 15109, 19181, 1494, 1238, 967, 1494, 1075, -1000,
	166, 3039, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1479, 21372, 21372, 21372, 21372, 437, 10099, 9473, 956,
	12290, 13542, 13542, 12290, 13542, 13542, 19181, 19181, 1006, 256,
	295, -1000, 9473, 9473, -1000, 866, -1000, 9473, -1000, -1000,
	-1000, -1000, 866, 188, -147, 19807, 1189, 866, 21372, -1000,
	-1000, -1000, -1000, 21372, -1000, -138, 1467, 21372, -1000, 833,
	-1000, -1000, 767, 832, 767, 767, 767, 767, 767, 509,
	509, 21372, 19181, 212, 823, -1000, -65, 1506, -145, 617,
	-1000, -1000, 1494, 949, 1000, 1167, 19494, -201, 1167, -95,
	21372, 9473, 3001, -1000, 1469, 1184, 12603, -1000, -1000, -1000,
	-1000, 21372, 1503, 1502, 1501, 1500, 2975, 105, 790, 130,
	-1000, -1000, 12290, -1000, -1000, -1000, -1000, -1000, 995, 978,
	1319, 974, -1000, 21372, 1235, 759, 1183, -1000, 1181, -1000,
	759, -1000, 1377, -87, -155, 1146, -1000, -1000, 1232, 966,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 708, 708, 955, 948, -1000, 212, -1000, 509,
	509, -1000, -1000, -1000, 198, 855, 831, 825, 795, 21,
	-1000, 1471, 1167, 1494, 1167, 1277, 945, 1494, 1277, -1000,
	-222, -1000, 759, -1000, -1000, 3039, 1419, 21372, 157, -1000,
	-1000, 1420, -1000, -1000, -1000, -1000, -1000, 3039, 3039, 3039,
	-1000, 274, -107, -1000, 256, 1394, 19181, 9473, -1000, 1375,
	-1000, 21372, -1000, 1467, -1000, -1000, 342, 1167, -1000, -1000,
	-1000, 788, -1000, 769, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14796, 1277, 1167, -1000, -1000, -1000, 1167, -1000, 9473,
	-239, -1000, -1000, 13229, 1460, 21372, 2941, -1000, 121, 2533,
	141, -1000, 148, -1000, -1000, 240, 943, -1000, -127, 866,
	-1000, 18868, 1277, -1000, -1000, -1000, 506, -1000, -1000, 1277,
	759, 693, 1210, -1000, -1000, -1000, 676, 691, -1000, 138,
	-1000, 236, -1000, -150, -1000, 1233, -1000, 7558, -1000, -1000,
	-1000, 403, 128, -1000, -1000, 1232, -157, 21372, -1000, -1000,
	3039, 9786, -1000, 938, 2421, 283, 866, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1778, 58, 80, 1768, 1767, 1765, 1549, 1538, 1534,
	1532, 1762, 1759, 1758, 1755, 1754, 1752, 1751, 1750, 1749,
	1748, 1744, 1743, 1742, 1741, 1740, 1739, 1738, 555, 1737,
	1736, 1733, 105, 1732, 110, 1731, 1730, 74, 263, 75,
	73, 1234, 1729, 50, 108, 103, 1727, 84, 1724, 1723,
	154, 1721, 104, 1720, 1719, 97, 1718, 1717, 33, 53,
	36, 41, 1716, 1715, 109, 148, 1714, 1713, 1712, 27,
	1711, 1710, 90, 15, 21, 24, 34, 1708, 77, 22,
	1705, 86, 1704, 1703, 1701, 1698, 46, 1697, 94, 26,
	17, 11, 1696, 45, 39, 107, 65, 40, 16, 118,
	96, 1693, 66, 92, 69, 1692, 1691, 994, 1689, 1685,
	1684, 1681, 1680, 1679, 839, 102, 1676, 1675, 1674, 71,
	0, 477, 81, 114, 1672, 1671, 1669, 2103, 113, 95,
	49, 1668, 54, 616, 70, 1666, 1663, 67, 122, 2,
	119, 117, 1661, 121, 1660, 1659, 1655, 1880, 111, 57,
	89, 47, 1653, 1652, 1651, 82, 83, 43, 88, 91,
	19, 1642, 1641, 1640, 51, 1636, 68, 25, 1, 78,
	1635, 1633, 1632, 1630, 31, 61, 1628, 32, 1621, 28,
	14, 20, 79, 4, 1620, 1619, 1617, 6, 1616, 48,
	1614, 7, 1613, 13, 1612, 1611, 1609, 56, 1608, 1607,
	1606, 12, 1603, 1602, 23, 10, 64, 42, 1601, 1600,
	29, 72, 52, 1597, 55, 8, 3, 37, 1596, 9,
	1590, 1589, 1587, 18, 30, 1586, 1580, 1579, 1578, 1577,
	1576, 44, 1575, 1574, 1569, 1568, 1567, 5, 1566, 1564,
	1563, 1562, 1581, 1048, 1560, 1555, 123, 1551, 1545, 1542,
	1540, 179,
}

var yyR1 = [...]uint8{
	0, 240, 241, 241, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 244,
	244, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 220, 220, 219, 221, 221, 12, 12, 12, 12,
	12, 213, 213, 213, 213, 213, 13, 13, 216, 216,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 233, 233, 232, 232, 135, 135, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 245, 245, 246, 246,
	246, 246, 246, 246, 246, 211, 211, 211, 212, 212,
	212, 214, 214, 215, 215, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 218, 218, 195, 195, 195, 196,
	196, 196, 196, 196, 196, 198, 198, 199, 199, 125,
	125, 193, 193, 192, 191, 191, 190, 190, 189, 200,
	200, 20, 171, 172, 172, 172, 172, 172, 172, 172,
	159, 159, 139, 139, 139, 139, 139, 139, 139, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 206, 206, 206, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 208,
	209, 202, 202, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 149, 149, 149,
	149, 149, 149, 201, 201, 197, 197, 197, 197, 197,
	197, 197, 197, 143, 143, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 142, 142, 142, 142, 142,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	144, 140, 140, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 158, 158, 147, 147, 156, 156,
	157, 157, 157, 148, 148, 148, 155, 155, 155, 152,
	152, 153, 153, 154, 154, 154, 150, 150, 150, 151,
	151, 151, 161, 182, 182, 182, 184, 184, 185, 185,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 170, 170, 210, 210, 181, 181, 181, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 169, 169, 179,
	179, 180, 180, 177, 177, 177, 178, 164, 164, 164,
	164, 164, 165, 166, 166, 166, 166, 162, 163, 204,
	204, 204, 238, 238, 238, 238, 238, 238, 239, 239,
	205, 205, 167, 167, 168, 168, 175, 175, 175, 175,
	247, 247, 173, 173, 174, 174, 174, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 248, 248, 249, 249, 249, 249, 249, 249,
	249, 188, 186, 186, 187, 187, 17, 18, 18, 18,
	18, 18, 19, 19, 21, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 112, 112,
	109, 109, 110, 110, 111, 111, 111, 113, 113, 113,
	136, 136, 136, 23, 23, 25, 25, 26, 27, 24,
	24, 24, 24, 24, 250, 28, 29, 29, 30, 30,
	30, 34, 34, 34, 32, 32, 33, 33, 39, 39,
	38, 38, 40, 40, 40, 40, 124, 124, 124, 123,
	123, 234, 234, 234, 234, 234, 42, 42, 43, 43,
	44, 44, 45, 45, 45, 223, 223, 222, 222, 224,
	224, 224, 224, 224, 224, 57, 57, 93, 93, 93,
	96, 96, 46, 46, 46, 46, 47, 47, 48, 48,
	49, 49, 131, 131, 130, 130, 130, 129, 129, 51,
	51, 51, 53, 52, 52, 52, 52, 54, 54, 56,
	56, 55, 55, 58, 58, 58, 58, 59, 59, 94,
	94, 41, 41, 41, 41, 41, 41, 41, 108, 108,
	61, 61, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 71, 71, 71, 71, 71, 71, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 37,
	37, 72, 72, 72, 78, 73, 73, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 69, 69, 69, 69, 69, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 251, 251, 70, 70, 70, 70,
	35, 35, 35, 35, 35, 134, 134, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	138, 138, 138, 138, 138, 138, 138, 138, 82, 82,
	36, 36, 80, 80, 81, 83, 83, 79, 79, 79,
	225, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 66, 66, 66, 84, 84, 85, 85, 235,
	235, 236, 236, 237, 86, 86, 87, 87, 88, 89,
	89, 89, 90, 90, 90, 90, 91, 91, 91, 63,
	63, 63, 63, 63, 63, 92, 92, 92, 92, 97,
	97, 74, 74, 76, 76, 75, 77, 98, 98, 102,
	99, 99, 103, 103, 103, 103, 103, 101, 101, 101,
	126, 126, 126, 106, 106, 114, 114, 115, 115, 107,
	107, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 118, 118, 121, 121, 122, 122,
	127, 127, 127, 128, 128, 226, 226, 226, 227, 227,
	227, 228, 228, 229, 230, 230, 231, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 242, 243, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 0, 3, 1, 1, 1, 1, 2, 13,
	12, 14, 12, 13, 12, 7, 8, 7, 5, 5,
	5, 11, 11, 9, 5, 8, 0, 3, 0, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	2, 2, 3, 1, 1, 1, 1, 1, 0, 2,
	2, 3, 2, 4, 2, 4, 2, 2, 3, 2,
	3, 2, 7, 9, 3, 3, 6, 9, 9, 8,
	8, 5, 8, 7, 4, 2, 4, 6, 2, 1,
	1, 1, 2, 1, 1, 1, 3, 3, 1, 2,
	1, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 3, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 1, 2, 5, 5,
	8, 8, 13, 1, 1, 2, 2, 10, 7, 0,
	1, 1, 0, 1, 1, 1, 2, 2, 1, 2,
	0, 3, 0, 1, 1, 3, 0, 4, 1, 3,
	2, 1, 1, 2, 1, 1, 1, 6, 11, 13,
	13, 6, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 3, 4, 4, 5, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 0, 4, 1, 3, 1,
	1, 1, 1, 1, 1, 4, 8, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 2, 4, 5, 5, 6, 4, 4,
	4, 6, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 2, 2, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	3, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 1, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 5, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 2, 0, 2,
	2, 0, 1, 4, 1, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -240, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 31, -20,
	122, 123, 125, 124, 155, 126, 148, 52, 204, 205,
	207, 208, 26, 149, 150, 153, 154, -242, 8, 311,
	56, -241, 359, -86, 15, -30, 5, -28, -250, -28,
	-28, -28, -28, -28, -171, 56, -238, -239, -200, 131,
	164, 303, 128, 144, 162, 163, 331, 129, 343, 344,
	146, 346, 76, -107, 132, 134, 129, 129, 130, 132,
	303, 128, 129, -55, -127, 59, -120, 61, 171, 322,
	21, 204, 217, 218, 209, 250, 238, 323, 169, 235,
	239, 289, 357, 69, 207, 298, 138, 175, 151, 230,
	233, 232, 224, 221, 28, 256, 329, 223, 141, 257,
	261, 268, 290, 318, 214, 215, 292, 254, 33, 143,
	324, 37, 159, 293, 259, 253, 248, 131, 252, 213,
	247, 41, 227, 263, 262, 264, 288, 241, 170, 267,
	243, 225, 242, 18, 154, 157, 258, 260, 222, 172,
	136, 161, 328, 294, 220, 158, 173, 153, 297, 345,
	168, 208, 291, 216, 300, 203, 202, 40, 274, 234,
	211, 226, 212, 140, 205, 166, 245, 160, 228, 229,
	251, 210, 246, 206, 162, 155, 299, 275, 330, 244,
	240, 236, 237, 167, 132, 164, 165, 281, 282, 283,
	284, 326, 295, 231, 276, 277, 177, 178, 179, 180,
	181, 182, 183, 34, 35, 319, 320, 129, 116, 239,
	122, 279, 130, 33, 161, -136, 129, -109, 165, 281,
	282, 283, 284, 59, 291, 290, 285, -127, 206, -132,
	-132, -132, -132, -132, -2, -90, 17, 16, -5, -3,
	-242, 6, 21, 22, -34, 42, 43, -29, -40, 107,
	-41, -127, -60, 78, -65, 29, 59, -120, 61, 24,
	-64, -61, -79, -225, -77, -78, 116, 117, 105, 106,
	113, 79, 118, -69, -67, -68, -70, -228, 62, -121,
	60, 70, 63, 64, 65, 66, 71, 72, 73, 301,
	-75, -242, 46, 47, 312, 313, 314, 315, 321, 316,
	81, 36, 302, 310, 309, 308, 306, 307, 304, 305,
	356, 135, 303, 111, 311, 265, -107, -43, -44, -45,
	-46, -57, -78, -242, -55, 11, -50, -55, -99, -135,
	206, -103, 291, 290, -122, 301, -101, -121, -119, 289,
	239, 288, 59, -120, 127, 185, 334, 77, 23, 25,
	272, 278, 184, 80, 116, 16, 81, 191, 343, 344,
	115, 312, 122, 50, 304, 305, 302, 189, 314, 315,
	303, 279, 196, 20, 29, 354, 10, 26, 149, 22,
	109, 124, 186, 84, 85, 152, 24, 150, 73, 192,
	194, 19, 53, 142, 11, 333, 13, 14, 348, 335,
	135, 134, 96, 347, 130, 48, 8, 118, 27, 355,
	93, 44, 147, 195, 46, 94, 17, 306, 307, 32,
	321, 156, 111, 51, 38, 349, 78, 350, 71, 54,
	296, 190, 76, 15, 49, 157, 351, 144, 193, 95,
	125, 311, 47, 187, 352, 128, 188, 6, 317, 31,
	148, 45, 129, 280, 83, 133, 72, 163, 5, 146,
	9, 52, 55, 308, 309, 310, 36, 82, 12, 145,
	325, 74, -172, -159, -121, 61, 130, 130, 132, -233,
	202, 132, -121, -115, 135, -115, -121, -121, -55, 129,
	-115, 346, 343, 344, 311, 129, -55, -55, -114, 135,
	59, -114, -114, -114, -55, 119, -55, 59, 31, 303,
	59, 161, 129, 162, 132, -133, -242, -122, -133, -133,
	-133, 166, 167, -133, -110, 286, 54, -133, -243, 58,
	-91, 19, 32, -41, -127, -87, -88, -41, -86, -2,
	-28, 38, -32, 22, 68, 11, -124, 77, 76, 93,
	-123, 23, -121, 61, 119, -41, -62, 96, 78, 94,
	95, 80, 102, 101, 112, 105, 106, 107, 108, 109,
	110, 111, 103, 104, 115, 356, 86, 87, 88, 89,
	90, 91, 92, 97, 98, 99, 100, -108, -242, -197,
	356, -78, -242, 120, 121, -65, -65, -65, -65, -65,
	-65, -65, -229, 266, -242, 61, 119, -2, -73, -41,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -82,
	-41, -242, -251, -242, -251, -251, -251, -251, -251, -251,
	-251, -138, 116, 239, 151, 230, -141, -140, 245, 244,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	238, 323, -242, -242, -242, -242, -56, 27, -55, 31,
	57, -51, -53, -52, -54, 44, 48, 50, 45, 46,
	47, 51, -131, 23, -43, -242, -130, 157, -129, 23,
	-127, 61, -55, -50, -244, 57, 11, 55, 57, -99,
	206, -100, -104, 292, 294, 86, 119, -126, -121, 61,
	29, 31, 58, 57, -160, -139, -143, -140, -145, -144,
	-146, -121, -141, -142, 238, 323, 235, 239, 236, 241,
	242, 243, 116, 240, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 244, 256, 31, 151, 228,
	229, 230, 233, 232, 234, 231, 257, 258, 259, 260,
	261, 262, 263, 264, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 220, 221, 223, 224, 225, 227,
	226, -160, -121, 54, 201, -121, -115, 132, 203, -115,
	-193, 55, 59, 78, 59, 54, -211, 54, 19, 184,
	185, 23, -115, -55, -55, 296, -133, 133, -55, 24,
	54, -55, 59, 59, -128, -127, -119, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -112, 280, 287,
	-55, 9, 96, 57, 18, 119, 57, -89, 25, 26,
	-90, -243, -34, -66, -121, 63, 66, -33, 45, -55,
	-41, -41, -71, 71, 78, 72, 73, -123, 107, -128,
	-122, -119, -65, -72, -75, -78, 67, 96, 94, 95,
	80, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -134, 59, 61, -143,
	229, -138, -141, 220, 221, 223, 224, 225, 227, 226,
	59, 239, 229, 269, 118, 245, 254, 255, -64, 61,
	-121, -64, -121, 360, -39, 22, -38, -73, -40, -41,
	-122, -243, 57, -243, -2, -38, -38, -41, -137, 116,
	235, 151, 230, 224, 254, 255, 241, 274, 228, 275,
	217, 209, 214, 227, 225, 211, 226, 210, 223, 220,
	233, 232, 234, 245, 236, 243, 242, 240, -41, -79,
	-65, -79, -121, -127, -38, -32, -80, -81, 82, -79,
	-243, 237, -38, -39, -38, -38, -38, -95, 157, -55,
	-98, -102, -79, -44, -45, -45, -44, -45, 44, 44,
	44, 49, 44, 49, 44, -52, -127, -243, -58, 52,
	134, 53, -242, -129, -95, 55, -43, -55, -103, -100,
	57, 293, 295, 296, 54, 74, -41, -122, -151, 116,
	115, -175, -247, 326, 35, -159, -161, -164, -162, -163,
	-176, -165, 138, 136, 140, 141, 146, -169, 130, 147,
	71, 78, -206, 138, -208, 54, 272, 278, 136, 147,
	146, 357, 69, 139, 333, 335, 29, 30, -154, 360,
	266, -152, 275, -147, 56, -147, -147, 237, -148, 56,
	-147, -148, -147, -148, -150, 239, -150, -150, -150, -150,
	56, 56, -147, -147, -147, -147, -147, -156, 56, 222,
	-156, -156, -157, 56, -157, 54, 55, -55, -121, 54,
	-55, -115, -232, 354, 355, -55, -191, 325, -192, 59,
	-133, 24, -133, -55, -214, -212, 8, 9, 10, -55,
	-139, -55, -116, 127, 124, 125, -188, 123, 272, 239,
	69, 29, 15, 312, 157, 330, 59, 158, -55, -55,
	-55, -133, -111, 11, 96, 40, -41, -41, -128, -88,
	-91, -106, 19, 11, 36, 36, -38, 71, 72, 73,
	119, -242, -72, -65, -65, -65, -37, 152, 77, 325,
	-243, 237, -155, 325, 326, -230, -231, 61, -243, -38,
	57, -243, -243, -41, -243, -243, -243, 57, 55, 57,
	-147, 56, -147, -147, -157, -147, 215, -147, 215, -157,
	-147, -147, -147, -147, -147, 23, 57, 11, 57, 57,
	11, 119, -243, -38, -83, -81, 84, -41, -243, -243,
	-243, -243, -243, -63, 31, 36, -2, -242, -242, -59,
	57, 12, 86, -48, -47, 54, 55, -49, 54, -47,
	44, 44, -223, 325, 130, 130, 130, -96, -121, -59,
	-43, -59, -104, -105, 297, 294, 300, 86, 59, -173,
	-122, 57, 34, 56, -205, 54, 78, -167, -121, 147,
	-169, -169, 59, -169, 59, 130, 59, 71, 19, -121,
	9, 147, 147, -205, 61, -55, -202, 334, 16, 56,
	-207, 56, 61, 62, 63, 64, 71, -149, 70, -61,
	267, -69, 302, 305, 304, 268, -121, -127, -209, 63,
	361, -153, 276, 63, -150, -150, -147, -150, 63, 59,
	-150, -150, -151, 31, -151, -151, -151, -151, -158, 61,
	-158, -155, -155, 63, -156, 63, -55, -121, 56, 54,
	-55, 23, -55, 23, -190, -189, -122, -195, 23, 54,
	57, -211, 55, -132, -125, 138, -164, -249, 164, 146,
	137, 142, 141, 59, 136, 140, 157, -194, 164, 137,
	138, 142, 141, 59, 130, 147, 136, 140, 157, 146,
	-117, -118, 133, 23, 130, 147, 157, 127, -133, -113,
	94, 12, -127, -127, 41, 119, -55, -42, 11, 107,
	-122, -39, -37, 77, -65, -65, 228, 228, 228, 361,
	57, -197, -243, -40, -234, 358, -137, 116, 235, 151,
	230, 224, 254, 241, 274, 228, 275, 217, 209, 214,
	227, 225, 211, 226, 210, 223, 220, 233, 232, 234,
	245, 236, 243, 242, 240, -134, -41, -150, 59, -137,
	-65, -65, -65, -65, -65, -122, 322, -86, 85, -41,
	83, -97, 54, -98, -74, -76, -75, -242, -2, -92,
	-121, -96, -86, -102, -41, -41, -41, 56, -41, 56,
	-242, -242, -242, -243, 57, -86, -59, 294, 298, 299,
	-41, 86, -122, -175, -180, -177, -121, 147, 10, 9,
	19, 142, 136, 357, 59, 59, 59, -204, 146, 343,
	344, 345, -206, 357, -149, 268, -242, 56, 23, 29,
	63, -207, 56, -197, 356, -197, -242, -147, 56, -147,
	56, 56, 119, 58, -151, -151, -150, -151, 58, 58,
	-151, -151, 59, 116, 58, 57, 58, 57, 58, 57,
	56, 55, 54, -179, -180, -69, -121, -55, 56, -2,
	23, -2, 57, 86, -196, 19, 172, 173, -55, -212,
	-214, -121, -248, 130, 147, -121, -132, -121, -132, -121,
	-55, -132, -121, 138, -164, 61, -41, -59, -43, -243,
	-65, 277, 277, 277, -231, -242, -243, -243, -243, -243,
	-243, 19, 57, -243, 57, 19, -242, -36, 317, -41,
	28, -97, 57, -243, -243, -243, 57, 119, -243, -90,
	-93, -121, 147, -222, -224, 348, 349, 350, 351, 352,
	353, -93, -93, -93, -130, -121, -90, -174, -122, 61,
	63, 58, 57, -147, -178, 270, -147, -166, 168, 169,
	31, 170, -166, 345, 147, 147, -242, -204, -205, -41,
	-93, 56, 335, 57, 58, -207, -121, 239, 229, 245,
	254, -243, 58, 58, 58, -122, -151, -150, 61, -150,
	63, 63, -179, -121, -55, 58, 56, -93, -2, -189,
	-174, 133, 21, 6, 8, 9, 10, 19, 23, -245,
	56, -121, 146, 56, 27, -121, -84, 13, -243, -235,
	-86, 157, -65, -65, -65, -65, -65, -243, 61, 147,
	-76, 36, -2, -242, -121, -121, 57, 58, 58, 57,
	-243, -243, -243, -58, -182, -184, 325, -183, 55, 143,
	69, 177, 178, 179, 180, 181, 182, 183, -177, -89,
	-205, 54, 71, 171, -205, 54, -167, -121, -204, -41,
	-242, -243, 58, -41, 56, 63, 58, -151, -151, 58,
	58, 58, 56, 56, -94, 347, -179, 58, -168, -121,
	186, -215, -217, -7, -9, -8, -11, -10, -12, -13,
	-14, -3, 20, 190, 191, 196, 192, 145, 135, -246,
	-121, 105, 86, 61, -159, 57, 56, 56, -93, -242,
	136, -85, 14, 16, -243, -86, -243, 16, -243, -243,
	-243, -243, -35, 96, 325, 9, -74, -2, 119, -121,
	-224, -223, -181, 54, -183, 325, 56, 327, 59, -170,
	86, 61, 86, 86, 86, 86, 86, 86, 86, 9,
	10, 56, 56, -243, -41, -201, 170, 54, 58, -203,
	58, 58, -94, -179, -180, -59, 56, 58, -59, -198,
	57, 55, 187, -217, -86, -220, -121, -219, -121, -121,
	-121, -213, 38, 193, 194, 195, -60, -65, -41, -60,
	58, -246, -121, -246, -246, -246, -246, -246, -180, -180,
	58, -186, -187, 157, 147, -41, -73, -243, -236, -237,
	-41, -243, 323, 51, 328, -98, -243, -121, -121, -185,
	-183, -121, 63, -210, 54, 74, 63, -210, -210, -210,
	-210, -210, -166, -166, -168, -180, -201, -243, 318, 10,
	9, 331, 332, 58, 205, 337, 338, 156, 339, 170,
	340, 341, -59, 58, 58, -182, -93, -94, -182, -199,
	325, -121, -41, -218, -217, 204, -90, 57, -221, -139,
	188, -121, 11, 11, 11, 11, -217, 204, 83, 204,
	58, 58, -193, -243, 57, -121, 56, 57, 41, 324,
	329, -242, 58, 57, -205, -205, 58, 58, -201, -166,
	-166, 325, 63, 16, 63, 63, 63, 63, 338, 156,
	340, 16, -182, -59, -182, -181, 58, -59, -181, 357,
	-217, -91, -219, -121, 189, 27, -216, -217, -215, -216,
	-226, 197, 78, -191, -187, 36, -180, -237, 41, -121,
	-183, 139, -182, 63, 63, 342, -127, -181, -182, -182,
	-41, 359, 19, -121, 85, -217, 359, 85, -227, 198,
	197, 159, 58, 325, -243, -55, -181, 119, -181, 85,
	-2, 85, 84, 200, 199, 160, 328, 56, -122, 135,
	204, -242, 329, -168, -216, -65, 156, 58, 85, -243,
	-243,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 824, 0, 524, 524, 524, 524, 524, 524, 0,
	-2, 879, 0, 0, 0, 0, -2, 514, 515, 0,
	517, 518, 1186, 1186, 1186, 1186, 1186, 0, 33, 34,
	1184, 1, 3, 832, 0, 0, 528, 531, 526, 911,
	879, 0, 0, 0, 88, 163, 0, 0, 0, 0,
	0, 877, 877, 0, 0, 0, 0, 877, 403, 404,
	405, 408, 0, 0, 0, 880, 0, 875, 0, 875,
	875, 875, 0, 473, 611, 900, 901, 902, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 0, 0, 0,
	0, 1187, 1187, 1187, 1187, 0, 1187, 502, 491, 493,
	494, 495, 496, 1187, 511, 512, 501, 513, 516, 519,
	520, 521, 522, 523, 27, 836, 911, 911, 824, 29,
	0, 524, 529, 530, 534, 532, 533, 525, 0, 542,
	546, 0, 621, 911, 626, 628, -2, -2, -2, 0,
	667, 668, 669, 670, 671, 672, 911, 911, 911, 911,
	911, 911, 911, 699, 700, 701, 702, 0, 803, 797,
	805, 806, 807, 808, 809, 810, 811, 630, 631, 0,
	856, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 734, 734, 734, 734, 734, 734, 734, 734,
	0, 0, 0, 0, 0, 912, 0, 0, 558, 560,
	561, 562, 592, 0, 594, 0, 0, 41, 45, 0,
	1150, 860, -2, -2, 0, 0, 0, 898, 899, -2,
	1057, -2, 896, 897, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 0, 164, 178, 178, 0, 0, 877, 0,
	0, 877, 151, 0, 0, 0, 0, 0, 0, 877,
	0, 409, 406, 407, 160, 0, 1187, 0, 0, 0,
	0, 0, 0, 0, 472, 0, 474, 1187, 1187, 1187,
	1187, 1187, 1187, 1187, 1187, 483, 1188, 1189, 484, 485,
	486, 1187, 1187, 488, 0, 503, 0, 497, 28, 1185,
	22, 0, 0, 833, 0, 825, 826, 829, 832, 27,
	531, 0, 536, 535, 527, 0, 543, 911, 911, 0,
	547, 0, 549, 550, 0, 624, 911, 0, 0, 911,
	911, 911, 911, 911, 911, 911, 911, 911, 911, 911,
	911, 911, 911, 911, 0, 0, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 627, 0, 802,
	0, 641, 0, 0, 0, 690, 691, 692, 693, 694,
	695, 696, 703, 0, -2, 804, 0, 27, 0, 665,
	911, 911, 911, 911, 911, 911, 0, 911, 534, 0,
	789, 0, 725, 0, 726, 727, 728, 729, 730, 731,
	732, 733, 780, 0, 782, 783, 784, 785, 786, 787,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	281, 282, 911, -2, 911, 911, 43, 0, 610, 0,
	0, 0, 0, 0, 0, 599, 0, 0, 602, 0,
	0, 0, 0, 593, 0, 0, 613, 1112, 595, 0,
	597, 598, -2, 0, 0, 0, 39, 40, 0, 46,
	1150, 48, 73, 0, 0, 911, 0, 339, 870, 871,
	872, 868, 416, 0, 170, 333, 329, 173, 174, 175,
	176, 177, 316, 254, -2, -2, -2, -2, -2, -2,
	-2, -2, 316, -2, -2, -2, -2, -2, 336, -2,
	-2, -2, -2, -2, 302, -2, 1072, 0, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 171, 0, 0, 0, 0, 0, 877, 0, 0,
	154, 0, 1187, 0, 1187, 0, 0, 0, 115, 116,
	117, 178, 0, 161, 0, 0, 439, 0, 467, 876,
	0, 1187, 470, 471, 612, 903, 904, 475, 476, 477,
	478, 479, 480, 481, 482, 487, 490, 504, 498, 499,
	492, 837, 0, 911, 911, 0, 911, 828, 830, 831,
	836, 30, 534, 0, 812, 0, 0, 911, 537, 25,
	622, 623, 625, 642, 0, 644, 646, 548, 544, 0,
	798, -2, 632, 633, 661, 662, 663, 0, 911, 911,
	911, 659, 637, 0, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 687, 745, 746, 688,
	0, 698, 316, 318, 318, 318, 320, 320, 271, 272,
	0, 0, 326, 248, 249, 250, 251, 252, 685, 245,
	0, 686, 697, 0, 0, 911, 0, 0, 540, 546,
	800, 664, 911, 855, 27, 0, 0, 0, 0, -2,
	-2, -2, -2, -2, -2, 754, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 0, 669,
	0, 0, 797, 0, 0, 911, 795, 792, 911, 0,
	735, 781, 0, 0, 539, 0, 0, 0, 0, 609,
	617, 857, 0, 559, 588, 590, 0, 585, 600, 601,
	603, 0, 605, 0, 607, 608, 563, 564, 565, 0,
	0, 0, 0, 596, 617, 0, 617, 42, 861, 47,
	0, 0, 76, 77, 862, 863, 864, 0, 866, 340,
	0, 162, 418, 0, 421, 165, 166, 167, 168, 169,
	0, 410, -2, 1117, 1140, 1075, 0, 0, 377, 378,
	180, 0, 182, 0, 184, 0, 186, 187, 0, 189,
	191, 410, 0, 0, 0, 0, 0, 0, 179, 0,
	335, 331, 330, 253, 0, 336, 336, 316, 336, 0,
	336, 336, 290, 291, 339, 0, 339, 339, 339, 339,
	0, 0, 326, 326, 276, 277, 278, 265, 0, 318,
	267, 268, 269, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 85, 0, 98, 0, 152, 153,
	99, 878, 100, 136, 0, 121, 118, 119, 120, 0,
	104, 0, 1186, 149, 0, 891, 440, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 0, 0, 466,
	1187, 469, 507, 0, 0, 0, 834, 835, 0, 827,
	23, 0, 873, 874, 813, 814, 556, 643, 645, 647,
	0, -2, 634, 659, 638, 0, 635, 911, 911, 0,
	629, 246, 247, 0, 0, 0, 914, 245, 704, 0,
	911, 551, 708, 666, -2, 709, 710, 0, 0, 911,
	747, 1184, 336, 751, 752, 755, 757, 758, 760, 765,
	771, 772, 775, 778, 779, 0, 911, 911, 911, 911,
	911, 0, 0, 824, 0, 793, 911, 0, 724, 736,
	737, 738, 739, 849, 0, 0, -2, 0, 0, 824,
	0, 911, 911, 582, 589, 911, 0, 583, 911, 584,
	604, 606, 575, 0, 0, 0, 0, 0, 580, 824,
	617, 38, 74, 75, 0, 0, 81, 911, 341, 0,
	422, 416, 420, 0, 387, 0, 0, 0, 413, 368,
	0, 0, 371, 0, 373, -2, 399, 181, 0, 0,
	0, 188, 190, 0, 194, 195, 0, 221, 0, 0,
	205, 0, -2, 209, 210, 211, 245, 213, 214, 215,
	1106, 218, 316, 316, 241, 1078, 0, 0, 219, 220,
	334, 172, 332, 0, 339, 339, 336, 339, 0, 0,
	339, 339, 292, 0, 293, 294, 295, 296, 0, 314,
	0, 274, 275, 0, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 156, 0, 139, 0, 0,
	0, 0, 0, 427, 0, 412, 431, 1186, 0, 150,
	454, 455, 456, 457, 458, 459, 460, 1186, 0, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
	0, 1186, 892, 893, 894, 895, 0, 0, 468, 489,
	0, 911, 505, 506, 838, 0, 24, 617, 0, 545,
	799, 0, 636, 911, 660, 639, 0, 0, 0, 913,
	0, 916, 705, 541, 706, 0, 0, 316, 316, 750,
	316, 320, 753, 316, 756, 316, 759, 761, 762, 763,
	764, 320, 766, 767, 768, 769, 770, 316, 316, 773,
	774, 316, 777, 316, 316, 0, 0, 748, 749, 0,
	0, 0, 0, 0, 0, 798, 0, 790, 723, 796,
	911, 31, 0, 849, 839, 851, 853, 911, 27, 0,
	845, 0, 832, 858, 618, 859, 586, 0, 591, 0,
	0, 0, 0, 594, 0, 832, 37, 78, 79, 80,
	865, 0, 423, 419, 0, 381, 316, 316, 0, 0,
	0, 0, 0, 0, 369, 370, 372, 375, 399, 400,
	401, 204, 183, 410, 185, 0, 911, 0, 0, 222,
	0, 0, 0, 208, 0, 212, 0, 237, 0, 239,
	0, 0, 0, 317, 283, 284, 339, 285, 324, 325,
	286, 287, 337, 338, 336, 0, 336, 0, 321, 0,
	0, 0, 0, 0, 379, 380, 316, 0, 0, -2,
	0, -2, 0, 0, 0, 0, 137, 138, 0, 122,
	0, 106, 0, 452, 453, 413, 433, 0, 434, 436,
	437, 438, 0, 412, 432, 508, 509, 815, 557, 707,
	640, 689, 327, 328, 915, 0, 711, 714, 712, 713,
	715, 911, 911, 718, 911, 911, 911, 0, 0, 794,
	0, 32, 0, 854, -2, 0, 0, 0, 44, 35,
	0, 577, 578, 0, 567, 569, 570, 571, 572, 573,
	574, 0, 0, 0, 613, 581, 36, 417, 424, 425,
	426, 343, 0, 829, 385, 386, 384, 410, 393, 394,
	0, 0, 410, 411, 412, 399, 911, 376, 0, 0,
	0, 911, 201, 0, 206, 0, 217, 1057, 326, 250,
	251, 216, 238, 240, 242, 0, 289, 339, 315, 339,
	0, 0, 0, 0, 0, 619, 0, 0, -2, 157,
	158, 0, 140, 141, 142, 143, 144, 0, 0, 105,
	108, 0, 0, 0, 0, 413, 817, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 740, 722, 791, 0,
	852, 0, -2, 0, 847, 846, 0, 587, 566, 0,
	614, 615, 616, 565, 365, 344, 0, 346, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 382, 383,
	388, 0, 395, 396, 389, 0, 0, 413, 0, 0,
	911, 243, 196, 0, 223, 0, 0, 304, 305, 319,
	322, 619, 0, 0, 617, 0, 0, 617, 145, 414,
	0, 103, 123, 125, 126, 127, 128, 129, 130, 131,
	132, 824, 0, 0, 0, 0, 61, 911, 911, 0,
	-2, 108, 108, -2, 108, 108, 0, 0, 0, 0,
	0, 26, 911, 911, 553, 0, 554, 911, 717, 716,
	719, 720, 0, 0, 0, 0, 842, 27, 0, 579,
	568, 576, 342, 0, 347, 0, 0, 0, 350, 0,
	362, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 192, 0, 0, 0, 0,
	203, 207, 617, 0, 0, 343, 0, 619, 343, 147,
	0, 911, 0, 124, 832, 49, -2, 51, 56, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 621,
	107, 109, -2, 110, 111, 112, 113, 114, 0, 0,
	151, 0, 462, 0, 0, 818, 816, 555, 820, 821,
	823, 721, 0, 0, 0, 850, -2, 848, 366, 0,
	348, 353, 351, 354, 363, 364, 355, 356, 357, 358,
	359, 360, 410, 410, 0, 0, 398, 243, 244, 0,
	0, 199, 200, 202, 0, 0, 0, 0, 0, 0,
	234, 0, 343, 617, 343, 365, 0, 617, 365, 101,
	0, 415, 146, 102, 134, 0, 836, 0, 0, 53,
	55, 59, 62, 63, 64, 65, 66, 0, 0, 0,
	428, 905, 154, 461, 0, 0, 0, 911, 741, 0,
	744, 0, 345, 0, 390, 391, 0, 343, 193, 197,
	198, 0, 225, 0, 227, 228, 229, 230, 231, 232,
	233, 0, 365, 343, 92, 90, 620, 343, 94, 911,
	0, 133, 52, 178, 0, 0, 0, 68, 0, 0,
	908, 906, 0, 435, 463, 0, 0, 822, 742, 0,
	349, 0, 365, 224, 226, 235, 0, 89, 93, 365,
	148, 0, 0, 60, 67, 69, 0, 71, 430, 0,
	907, 0, 429, 0, 367, 0, 397, 0, 91, 135,
	-2, 0, 0, 909, 910, 0, 0, 0, 236, 70,
	0, 911, 743, 0, 0, 0, 0, 392, 72, 464,
	465,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 110, 102, 3,
	56, 58, 107, 105, 57, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 359,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 360, 3, 361, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:411
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:416
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:417
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:421
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:444
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:452
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:456
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:462
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line .\parser.y:469
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:475
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:479
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:485
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:489
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:496
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:508
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:520
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:524
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:530
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:536
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:540
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:544
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:549
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:550
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:554
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:558
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:563
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:567
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:573
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:577
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:581
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:585
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:591
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:595
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:608
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:612
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:618
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:623
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:627
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:633
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:640
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:647
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:654
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:662
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:672
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:676
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:694
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:701
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:711
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:715
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:722
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:731
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:739
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:750
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:754
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:760
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:764
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:768
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:774
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:778
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:782
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:786
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:791
		{
			yyVAL.str = ""
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:795
		{
			yyVAL.str = yyDollar[3].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:805
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:811
		{
			yyVAL.str = SessionStr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:815
		{
			yyVAL.str = GlobalStr
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:821
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:826
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[4].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[0]),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-12 : yypt+1]
//line .\parser.y:846
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[9].columns,
					Where:     NewWhere(WhereStr, yyDollar[10].expr),
					Options:   yyDollar[11].indexOptions,
					Partition: yyDollar[12].indexPartition,
				},
				IndexCols: yyDollar[7].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[7].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 91:
		yyDollar = yyS[yypt-14 : yypt+1]
//line .\parser.y:866
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVals[0]),
					Clustered: bool(yyDollar[2].boolVals[1]),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 92:
		yyDollar = yyS[yypt-12 : yypt+1]
//line .\parser.y:887
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[4].colIdent,
					Type:    yyDollar[6].colIdent,
					Unique:  bool(yyDollar[2].boolVals[0]),
					Options: yyDollar[12].indexOptions,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:903
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVals[0]),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 94:
		yyDollar = yyS[yypt-12 : yypt+1]
//line .\parser.y:920
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:        yyDollar[4].colIdent,
					Type:        NewColIdent(""),
					Unique:      false,
					Clustered:   false,
					ColumnStore: true,
					Included:    yyDollar[8].columns,
					Where:       NewWhere(WhereStr, yyDollar[10].expr),
					Options:     yyDollar[11].indexOptions,
					Partition:   yyDollar[12].indexPartition,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:939
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:947
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:       CreateSqlSecurityStr,
				SecurityType: yyDollar[3].str,
				Name:         yyDollar[6].tableName.ToViewName(),
				Definition:   yyDollar[8].selStmt,
			}}
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:956
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:964
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:972
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:976
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-11 : yypt+1]
//line .\parser.y:980
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line .\parser.y:992
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 103:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:1003
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1014
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 105:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:1025
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1030
		{
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1031
		{
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1035
		{
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1036
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1037
		{
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1038
		{
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1039
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1040
		{
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1041
		{
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1045
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1049
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1053
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1063
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1067
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1073
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1077
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1083
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1087
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1093
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1104
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1116
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1123
		{
			yyVAL.bytes = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1127
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1131
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1136
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1140
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1144
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1148
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1152
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1156
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1161
		{
			yyVAL.expr = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1165
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1170
		{
			yyVAL.expr = nil
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1174
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1179
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1183
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1188
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1192
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1198
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1203
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1208
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1214
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1219
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1225
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1230
		{
			yyVAL.bytes = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1234
		{
			yyVAL.bytes = nil
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1240
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1247
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1253
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1257
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1262
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1266
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1270
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1274
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1278
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1284
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1289
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1295
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1306
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1311
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1317
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1330
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1335
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1340
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1345
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1351
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1356
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1361
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1366
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1371
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1376
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1381
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1386
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:1391
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:1400
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1410
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1415
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1420
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:1427
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:1434
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:1442
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "VIRTUAL"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:1447
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr, GeneratedType: "STORED"}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1453
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:1459
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:1465
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1471
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1478
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1482
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1486
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1492
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1496
		{
			yyVAL.optVal = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1500
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1504
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1508
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1512
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1516
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1520
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1524
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1528
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1532
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1538
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1544
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1550
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1554
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1559
		{
			yyVAL.sequence = &Sequence{}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1563
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1568
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1573
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1578
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1583
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1588
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1593
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1598
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1603
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1608
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1613
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1618
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1623
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1630
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1634
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1638
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1642
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1646
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1650
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1655
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1659
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1664
		{
			yyVAL.bytes = nil
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1677
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1682
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:1836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:1852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:1909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:1949
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1954
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1959
		{
			yyVAL.optVal = nil
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1963
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1968
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1972
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1980
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:1984
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:1990
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:1998
		{
			yyVAL.optVal = nil
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2002
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2006
		{
			if strings.ToLower(string(yyDollar[2].bytes)) != "max" {
				yylex.Error(fmt.Sprintf("syntax error around '%s'", string(yyDollar[2].bytes)))
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2015
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2019
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2023
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2028
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2032
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2037
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2041
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2046
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2050
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2054
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2059
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2063
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2067
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2072
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2076
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2080
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2086
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2091
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2095
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2099
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2105
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2109
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2115
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2119
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2125
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2129
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2134
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2138
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2142
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2146
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2150
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2154
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2158
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2162
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2166
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2172
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2182
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2186
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2192
		{
			yyVAL.indexPartition = nil
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2196
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2200
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2206
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2218
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2222
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2226
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2230
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2234
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2238
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2244
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2248
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2254
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2259
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2265
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2269
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2275
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2280
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2284
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2294
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2299
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2306
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:2313
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:2320
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 392:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:2329
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].tableName,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2341
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2345
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2349
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2353
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 397:
		yyDollar = yyS[yypt-10 : yypt+1]
//line .\parser.y:2359
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2370
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2380
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2384
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2388
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2394
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2398
		{
			yyVAL.boolVals = []BoolVal{false, true}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2402
		{
			yyVAL.boolVals = []BoolVal{false, false}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2406
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2410
		{
			yyVAL.boolVals = []BoolVal{true, true}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2414
		{
			yyVAL.boolVals = []BoolVal{true, false}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2420
		{
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2421
		{
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2425
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2429
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2434
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2441
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2445
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2452
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2456
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2462
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2466
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2471
		{
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2472
		{
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2476
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2480
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2486
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2490
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2494
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2500
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 428:
		yyDollar = yyS[yypt-11 : yypt+1]
//line .\parser.y:2504
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 429:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:2518
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 430:
		yyDollar = yyS[yypt-13 : yypt+1]
//line .\parser.y:2532
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2551
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[4].tableName,
				NewName:    yyDollar[4].tableName,
				ForeignKey: yyDollar[6].foreignKeyDefinition,
			}
		}
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2560
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2569
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2573
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-12 : yypt+1]
//line .\parser.y:2577
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2590
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2600
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2605
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2610
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2614
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:2646
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2652
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2656
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 464:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:2662
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:2666
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2672
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2678
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2686
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:2691
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2699
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2703
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2709
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2713
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2718
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2724
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2728
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2732
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2737
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2745
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2749
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2753
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2757
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2761
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2765
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2769
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2773
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2777
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:2781
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2791
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2795
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:2799
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2803
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2807
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2811
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2815
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:2825
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2831
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2835
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2841
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2845
		{
			yyVAL.str = "extended "
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2851
		{
			yyVAL.str = ""
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2855
		{
			yyVAL.str = "full "
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2861
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2865
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2869
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2875
		{
			yyVAL.showFilter = nil
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2879
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2883
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2889
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2893
		{
			yyVAL.str = SessionStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2897
		{
			yyVAL.str = GlobalStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2903
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2907
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2913
		{
			yyVAL.statement = &Begin{}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2917
		{
			yyVAL.statement = &Begin{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2923
		{
			yyVAL.statement = &Commit{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2929
		{
			yyVAL.statement = &Rollback{}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2935
		{
			yyVAL.statement = &OtherRead{}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2939
		{
			yyVAL.statement = &OtherRead{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2943
		{
			yyVAL.statement = &OtherRead{}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2947
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2951
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2956
		{
			setAllowComments(yylex, true)
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2960
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2966
		{
			yyVAL.bytes2 = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2970
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2976
		{
			yyVAL.str = UnionStr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2980
		{
			yyVAL.str = UnionAllStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:2984
		{
			yyVAL.str = UnionDistinctStr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:2989
		{
			yyVAL.str = ""
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2993
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:2997
		{
			yyVAL.str = SQLCacheStr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3002
		{
			yyVAL.str = ""
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3006
		{
			yyVAL.str = DistinctStr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3011
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3015
		{
			yyVAL.str = StraightJoinHint
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3020
		{
			yyVAL.selectExprs = nil
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3024
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3030
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3034
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3040
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3044
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3048
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3052
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3057
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3061
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3065
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3072
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3077
		{
			yyVAL.overExpr = nil
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3081
		{
			yyVAL.overExpr = &OverExpr{}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3085
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3089
		{
			yyVAL.overExpr = &OverExpr{OrderBy: yyDollar[3].orderBy}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3093
		{
			yyVAL.overExpr = &OverExpr{PartitionBy: yyDollar[3].partitionBy, OrderBy: yyDollar[4].orderBy}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3098
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3102
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3108
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3112
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3122
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3126
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3130
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3135
		{
			yyVAL.strs = []string{}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3139
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3145
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3149
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3181
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 576:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3185
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3191
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3196
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3200
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3206
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3210
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3223
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3227
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3231
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3235
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3241
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3243
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3247
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3249
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3253
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3255
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3263
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3267
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3271
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3278
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3284
		{
			yyVAL.str = JoinStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3288
		{
			yyVAL.str = JoinStr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3292
		{
			yyVAL.str = JoinStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3298
		{
			yyVAL.str = StraightJoinStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3304
		{
			yyVAL.str = LeftJoinStr
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3308
		{
			yyVAL.str = LeftJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3312
		{
			yyVAL.str = RightJoinStr
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3316
		{
			yyVAL.str = RightJoinStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3322
		{
			yyVAL.str = NaturalJoinStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3326
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3336
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3340
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3346
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3350
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3355
		{
			yyVAL.indexHints = nil
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3359
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3363
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3367
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3372
		{
			yyVAL.expr = nil
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3376
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3381
		{
			yyVAL.columns = nil
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3385
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3391
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3395
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3399
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3403
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3407
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3411
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3415
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3421
		{
			yyVAL.str = ""
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3425
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3431
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3435
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3441
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3445
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3449
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3453
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3457
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3465
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3469
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3473
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3477
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3483
		{
			yyVAL.str = IsNullStr
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3487
		{
			yyVAL.str = IsNotNullStr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3491
		{
			yyVAL.str = IsTrueStr
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3495
		{
			yyVAL.str = IsNotTrueStr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3499
		{
			yyVAL.str = IsFalseStr
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3503
		{
			yyVAL.str = IsNotFalseStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3509
		{
			yyVAL.str = EqualStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3513
		{
			yyVAL.str = LessThanStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3517
		{
			yyVAL.str = GreaterThanStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3521
		{
			yyVAL.str = LessEqualStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3525
		{
			yyVAL.str = GreaterEqualStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3529
		{
			yyVAL.str = NotEqualStr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3533
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3537
		{
			yyVAL.str = PosixRegexStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3541
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3545
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3549
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3554
		{
			yyVAL.expr = nil
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3558
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3564
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3568
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3572
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3578
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3584
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3588
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3594
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3598
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3602
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3606
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3610
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3614
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3674
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3678
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3682
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3686
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3690
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3694
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3702
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3716
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3720
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3724
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3732
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3740
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3748
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3758
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3762
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3766
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].overExpr}
		}
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3770
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3774
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3784
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3788
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3792
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3796
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[5].expr, Type: yyDollar[3].convertType}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3800
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3804
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3808
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 716:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3812
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 717:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3816
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:3820
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 719:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3824
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 720:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\parser.y:3828
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 721:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\parser.y:3832
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 722:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:3836
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:3840
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3844
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3871
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3886
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3890
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3912
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:3922
		{
			yyVAL.str = ""
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3926
		{
			yyVAL.str = BooleanModeStr
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:3930
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 743:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\parser.y:3934
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3938
		{
			yyVAL.str = QueryExpansionStr
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3944
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:3992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:3996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].LengthScaleOption.Length, Scale: yyDollar[2].LengthScaleOption.Scale}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4044
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4048
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4106
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4110
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4123
		{
			yyVAL.expr = nil
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4127
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4132
		{
			yyVAL.str = string("")
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4136
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4142
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4146
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4152
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4157
		{
			yyVAL.expr = nil
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4161
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4167
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4171
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4175
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4181
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4187
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4191
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4195
		{
			yyVAL.expr = NewUnicodeStrVal(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4200
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4205
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4209
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4213
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4217
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4221
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4225
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4229
		{
			yyVAL.expr = &NullVal{}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4235
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4244
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4248
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4253
		{
			yyVAL.exprs = nil
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4257
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4262
		{
			yyVAL.expr = nil
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4266
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4271
		{
			yyVAL.partitionBy = nil
		}
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4275
		{
			yyVAL.partitionBy = yyDollar[3].partitionBy
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4281
		{
			yyVAL.partitionBy = PartitionBy{yyDollar[1].partition}
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4285
		{
			yyVAL.partitionBy = append(yyDollar[1].partitionBy, yyDollar[3].partition)
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4291
		{
			yyVAL.partition = &Partition{Expr: yyDollar[1].expr}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4296
		{
			yyVAL.orderBy = nil
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4300
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4306
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4310
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4316
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4321
		{
			yyVAL.str = AscScr
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4325
		{
			yyVAL.str = AscScr
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4329
		{
			yyVAL.str = DescScr
		}
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4334
		{
			yyVAL.limit = nil
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4338
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4342
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4346
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4351
		{
			yyVAL.str = ""
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4355
		{
			yyVAL.str = ForUpdateStr
		}
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4359
		{
			yyVAL.str = ShareModeStr
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4372
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4376
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4380
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4385
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4389
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 844:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\parser.y:4393
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4400
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4404
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4408
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 848:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4412
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4417
		{
			yyVAL.updateExprs = nil
		}
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4421
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4427
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4431
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4437
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4441
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4447
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4453
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4463
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4467
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4473
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4479
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4483
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4489
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4493
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4497
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 865:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\parser.y:4502
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4513
		{
			yyVAL.bytes = []byte("charset")
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4520
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4524
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4528
		{
			yyVAL.expr = &Default{}
		}
	case 875:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4537
		{
			yyVAL.byt = 0
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4539
		{
			yyVAL.byt = 1
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4542
		{
			yyVAL.empty = struct{}{}
		}
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4544
		{
			yyVAL.empty = struct{}{}
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4547
		{
			yyVAL.str = ""
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4549
		{
			yyVAL.str = IgnoreStr
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4553
		{
			yyVAL.empty = struct{}{}
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4555
		{
			yyVAL.empty = struct{}{}
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4557
		{
			yyVAL.empty = struct{}{}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4559
		{
			yyVAL.empty = struct{}{}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4561
		{
			yyVAL.empty = struct{}{}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4563
		{
			yyVAL.empty = struct{}{}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4565
		{
			yyVAL.empty = struct{}{}
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4567
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4569
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4571
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4574
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4576
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4578
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4582
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4584
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4588
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4592
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4599
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4605
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4609
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4614
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4621
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4627
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4631
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4635
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4641
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4645
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4649
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4655
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4659
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\parser.y:4666
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4673
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\parser.y:4677
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\parser.y:4684
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4977
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:4986
		{
			decNesting(yylex)
		}
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4991
		{
			forceEOF(yylex)
		}
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\parser.y:4996
		{
			forceEOF(yylex)
		}
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:5000
		{
			forceEOF(yylex)
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\parser.y:5004
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
