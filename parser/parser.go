// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package parser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
	tableOptions             map[string]string
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SRID = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const ROWID = 57376
const STRICT = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const POSIX_REGEX = 57430
const POSIX_REGEX_CI = 57431
const POSIX_NOT_REGEX = 57432
const POSIX_NOT_REGEX_CI = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const INTERVAL = 57442
const JSON_EXTRACT_OP = 57443
const JSON_UNQUOTE_EXTRACT_OP = 57444
const CREATE = 57445
const ALTER = 57446
const DROP = 57447
const RENAME = 57448
const ANALYZE = 57449
const ADD = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const MATERIALIZED = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const CONSTRAINT = 57461
const REFERENCES = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const FOREIGN = 57465
const KEY_BLOCK_SIZE = 57466
const POLICY = 57467
const WHILE = 57468
const UNIQUE = 57469
const KEY = 57470
const SHOW = 57471
const DESCRIBE = 57472
const EXPLAIN = 57473
const DATE = 57474
const ESCAPE = 57475
const REPAIR = 57476
const OPTIMIZE = 57477
const TRUNCATE = 57478
const MAXVALUE = 57479
const PARTITION = 57480
const REORGANIZE = 57481
const LESS = 57482
const THAN = 57483
const PROCEDURE = 57484
const TRIGGER = 57485
const TYPE = 57486
const VINDEX = 57487
const VINDEXES = 57488
const STATUS = 57489
const VARIABLES = 57490
const RESTRICT = 57491
const CASCADE = 57492
const NO = 57493
const ACTION = 57494
const PERMISSIVE = 57495
const RESTRICTIVE = 57496
const PUBLIC = 57497
const CURRENT_USER = 57498
const SESSION_USER = 57499
const PAD_INDEX = 57500
const FILLFACTOR = 57501
const IGNORE_DUP_KEY = 57502
const STATISTICS_NORECOMPUTE = 57503
const STATISTICS_INCREMENTAL = 57504
const ALLOW_ROW_LOCKS = 57505
const ALLOW_PAGE_LOCKS = 57506
const BEFORE = 57507
const AFTER = 57508
const EACH = 57509
const ROW = 57510
const SCROLL = 57511
const CURSOR = 57512
const OPEN = 57513
const CLOSE = 57514
const FETCH = 57515
const PRIOR = 57516
const FIRST = 57517
const LAST = 57518
const DEALLOCATE = 57519
const DEFERRABLE = 57520
const INITIALLY = 57521
const IMMEDIATE = 57522
const DEFERRED = 57523
const CONCURRENTLY = 57524
const BEGIN = 57525
const START = 57526
const TRANSACTION = 57527
const COMMIT = 57528
const ROLLBACK = 57529
const BIT = 57530
const TINYINT = 57531
const SMALLINT = 57532
const SMALLSERIAL = 57533
const MEDIUMINT = 57534
const INT = 57535
const INTEGER = 57536
const SERIAL = 57537
const BIGINT = 57538
const BIGSERIAL = 57539
const INTNUM = 57540
const REAL = 57541
const DOUBLE = 57542
const PRECISION = 57543
const FLOAT_TYPE = 57544
const DECIMAL = 57545
const NUMERIC = 57546
const SMALLMONEY = 57547
const MONEY = 57548
const TIME = 57549
const TIMESTAMP = 57550
const DATETIME = 57551
const YEAR = 57552
const DATETIMEOFFSET = 57553
const DATETIME2 = 57554
const SMALLDATETIME = 57555
const CHAR = 57556
const VARCHAR = 57557
const VARYING = 57558
const BOOL = 57559
const CHARACTER = 57560
const VARBINARY = 57561
const NCHAR = 57562
const NVARCHAR = 57563
const NTEXT = 57564
const UUID = 57565
const TEXT = 57566
const TINYTEXT = 57567
const MEDIUMTEXT = 57568
const LONGTEXT = 57569
const CITEXT = 57570
const BLOB = 57571
const TINYBLOB = 57572
const MEDIUMBLOB = 57573
const LONGBLOB = 57574
const JSON = 57575
const JSONB = 57576
const ENUM = 57577
const GEOMETRY = 57578
const POINT = 57579
const LINESTRING = 57580
const POLYGON = 57581
const GEOMETRYCOLLECTION = 57582
const MULTIPOINT = 57583
const MULTILINESTRING = 57584
const MULTIPOLYGON = 57585
const VARIADIC = 57586
const ARRAY = 57587
const NOW = 57588
const GETDATE = 57589
const BPCHAR = 57590
const TEXT_PATTERN_OPS = 57591
const NULLX = 57592
const AUTO_INCREMENT = 57593
const APPROXNUM = 57594
const SIGNED = 57595
const UNSIGNED = 57596
const ZEROFILL = 57597
const ZONE = 57598
const AUTOINCREMENT = 57599
const DATABASES = 57600
const TABLES = 57601
const VITESS_KEYSPACES = 57602
const VITESS_SHARDS = 57603
const VITESS_TABLETS = 57604
const VSCHEMA_TABLES = 57605
const EXTENDED = 57606
const FULL = 57607
const PROCESSLIST = 57608
const NAMES = 57609
const CHARSET = 57610
const GLOBAL = 57611
const SESSION = 57612
const ISOLATION = 57613
const LEVEL = 57614
const READ = 57615
const WRITE = 57616
const ONLY = 57617
const REPEATABLE = 57618
const COMMITTED = 57619
const UNCOMMITTED = 57620
const SERIALIZABLE = 57621
const NEW = 57622
const CURRENT_TIMESTAMP = 57623
const DATABASE = 57624
const CURRENT_DATE = 57625
const CURRENT_TIME = 57626
const LOCALTIME = 57627
const LOCALTIMESTAMP = 57628
const UTC_DATE = 57629
const UTC_TIME = 57630
const UTC_TIMESTAMP = 57631
const REPLACE = 57632
const CONVERT = 57633
const CAST = 57634
const SUBSTR = 57635
const SUBSTRING = 57636
const GROUP_CONCAT = 57637
const SEPARATOR = 57638
const INHERIT = 57639
const MATCH = 57640
const AGAINST = 57641
const BOOLEAN = 57642
const LANGUAGE = 57643
const WITH = 57644
const WITHOUT = 57645
const PARSER = 57646
const QUERY = 57647
const EXPANSION = 57648
const UNUSED = 57649
const VIRTUAL = 57650
const STORED = 57651
const GENERATED = 57652
const ALWAYS = 57653
const IDENTITY = 57654
const SEQUENCE = 57655
const INCREMENT = 57656
const MINVALUE = 57657
const CACHE = 57658
const CYCLE = 57659
const OWNED = 57660
const NONE = 57661
const CLUSTERED = 57662
const NONCLUSTERED = 57663
const REPLICATION = 57664
const INCLUDE = 57665
const HOLDLOCK = 57666
const NOLOCK = 57667
const NOWAIT = 57668
const PAGLOCK = 57669
const ROWLOCK = 57670
const TABLELOCK = 57671
const TYPECAST = 57672
const CHECK = 57673

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SRID",
	"SET",
	"LOCK",
	"KEYS",
	"ROWID",
	"STRICT",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"POSIX_REGEX",
	"POSIX_REGEX_CI",
	"POSIX_NOT_REGEX",
	"POSIX_NOT_REGEX_CI",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"MATERIALIZED",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"CONCURRENTLY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	130, 153,
	-2, 143,
	-1, 36,
	164, 491,
	165, 491,
	-2, 481,
	-1, 278,
	117, 849,
	-2, 845,
	-1, 279,
	117, 850,
	-2, 846,
	-1, 280,
	117, 851,
	-2, 238,
	-1, 321,
	262, 860,
	-2, 743,
	-1, 353,
	84, 1075,
	-2, 82,
	-1, 354,
	84, 1025,
	-2, 83,
	-1, 360,
	84, 1004,
	-2, 816,
	-1, 362,
	84, 1049,
	-2, 818,
	-1, 618,
	262, 860,
	-2, 519,
	-1, 667,
	262, 860,
	-2, 519,
	-1, 696,
	55, 41,
	57, 41,
	-2, 43,
	-1, 728,
	114, 999,
	245, 999,
	251, 999,
	-2, 274,
	-1, 729,
	114, 1000,
	245, 1000,
	251, 1000,
	-2, 275,
	-1, 730,
	245, 1002,
	251, 1002,
	-2, 309,
	-1, 731,
	245, 1003,
	251, 1003,
	-2, 309,
	-1, 732,
	245, 1102,
	251, 1102,
	-2, 309,
	-1, 733,
	245, 1050,
	251, 1050,
	-2, 309,
	-1, 734,
	245, 1055,
	251, 1055,
	-2, 309,
	-1, 735,
	114, 1053,
	245, 1053,
	251, 1053,
	-2, 281,
	-1, 737,
	114, 1101,
	245, 1101,
	251, 1101,
	-2, 309,
	-1, 738,
	245, 1087,
	251, 1087,
	-2, 326,
	-1, 739,
	245, 1093,
	251, 1093,
	-2, 326,
	-1, 740,
	245, 1043,
	251, 1043,
	-2, 326,
	-1, 741,
	245, 1039,
	251, 1039,
	-2, 326,
	-1, 743,
	114, 998,
	245, 998,
	251, 998,
	-2, 290,
	-1, 744,
	114, 1091,
	245, 1091,
	251, 1091,
	-2, 291,
	-1, 745,
	114, 1041,
	245, 1041,
	251, 1041,
	-2, 292,
	-1, 746,
	114, 1038,
	245, 1038,
	251, 1038,
	-2, 293,
	-1, 747,
	114, 1030,
	245, 1030,
	251, 1030,
	-2, 294,
	-1, 749,
	114, 1100,
	245, 1100,
	251, 1100,
	-2, 296,
	-1, 752,
	114, 1011,
	245, 1011,
	251, 1011,
	-2, 266,
	-1, 753,
	114, 1089,
	245, 1089,
	251, 1089,
	-2, 309,
	-1, 754,
	114, 1090,
	245, 1090,
	251, 1090,
	-2, 309,
	-1, 755,
	114, 1012,
	245, 1012,
	251, 1012,
	-2, 309,
	-1, 756,
	114, 1013,
	245, 1013,
	251, 1013,
	-2, 309,
	-1, 757,
	114, 1014,
	245, 1014,
	251, 1014,
	-2, 309,
	-1, 758,
	114, 1080,
	245, 1080,
	251, 1080,
	-2, 272,
	-1, 759,
	114, 1114,
	245, 1114,
	251, 1114,
	-2, 273,
	-1, 760,
	114, 1022,
	245, 1022,
	251, 1022,
	-2, 299,
	-1, 761,
	114, 1059,
	245, 1059,
	251, 1059,
	-2, 300,
	-1, 762,
	114, 1037,
	245, 1037,
	251, 1037,
	-2, 301,
	-1, 763,
	114, 1060,
	245, 1060,
	251, 1060,
	-2, 302,
	-1, 764,
	114, 1023,
	245, 1023,
	251, 1023,
	-2, 303,
	-1, 765,
	114, 1047,
	245, 1047,
	251, 1047,
	-2, 304,
	-1, 766,
	114, 1046,
	245, 1046,
	251, 1046,
	-2, 305,
	-1, 767,
	114, 1048,
	245, 1048,
	251, 1048,
	-2, 306,
	-1, 768,
	114, 997,
	245, 997,
	251, 997,
	-2, 248,
	-1, 769,
	114, 1092,
	245, 1092,
	251, 1092,
	-2, 249,
	-1, 770,
	114, 1081,
	245, 1081,
	251, 1081,
	-2, 250,
	-1, 771,
	114, 1083,
	245, 1083,
	251, 1083,
	-2, 251,
	-1, 772,
	114, 1042,
	245, 1042,
	251, 1042,
	-2, 252,
	-1, 773,
	114, 1027,
	245, 1027,
	251, 1027,
	-2, 253,
	-1, 774,
	114, 1028,
	245, 1028,
	251, 1028,
	-2, 254,
	-1, 775,
	114, 1076,
	245, 1076,
	251, 1076,
	-2, 255,
	-1, 776,
	114, 995,
	245, 995,
	251, 995,
	-2, 256,
	-1, 777,
	114, 996,
	245, 996,
	251, 996,
	-2, 257,
	-1, 778,
	114, 1067,
	245, 1067,
	251, 1067,
	-2, 311,
	-1, 779,
	114, 1016,
	245, 1016,
	251, 1016,
	-2, 311,
	-1, 780,
	114, 1020,
	245, 1020,
	251, 1020,
	-2, 311,
	-1, 781,
	114, 1015,
	245, 1015,
	251, 1015,
	-2, 313,
	-1, 782,
	114, 1054,
	245, 1054,
	251, 1054,
	-2, 313,
	-1, 783,
	114, 1045,
	245, 1045,
	251, 1045,
	-2, 264,
	-1, 784,
	114, 1082,
	245, 1082,
	251, 1082,
	-2, 265,
	-1, 860,
	117, 853,
	-2, 848,
	-1, 1000,
	140, 394,
	-2, 1009,
	-1, 1122,
	262, 860,
	-2, 519,
	-1, 1144,
	5, 28,
	-2, 640,
	-1, 1170,
	5, 27,
	-2, 789,
	-1, 1219,
	59, 367,
	-2, 364,
	-1, 1236,
	117, 851,
	-2, 238,
	-1, 1465,
	5, 27,
	-2, 90,
	-1, 1466,
	5, 27,
	-2, 91,
	-1, 1525,
	5, 28,
	-2, 790,
	-1, 1632,
	5, 27,
	-2, 792,
	-1, 1709,
	58, 102,
	-2, 172,
	-1, 1712,
	58, 102,
	-2, 172,
	-1, 1780,
	187, 54,
	-2, 172,
	-1, 1796,
	58, 102,
	-2, 171,
	-1, 1816,
	5, 28,
	-2, 793,
	-1, 1971,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 20677

var yyAct = [...]int16{
	364, 1687, 1923, 1806, 1690, 1737, 1781, 1644, 719, 1647,
	1597, 1067, 544, 1770, 1186, 1208, 1173, 789, 284, 1531,
	622, 21, 621, 3, 1596, 274, 1760, 1924, 718, 948,
	1535, 1211, 494, 1410, 295, 92, 257, 1379, 92, 53,
	836, 1795, 311, 966, 1558, 1137, 1380, 1284, 690, 1376,
	1041, 1548, 251, 995, 986, 688, 1059, 1076, 1075, 989,
	279, 1191, 92, 92, 531, 1240, 949, 283, 1010, 1351,
	256, 1234, 918, 287, 885, 92, 1127, 261, 66, 795,
	550, 92, 603, 92, 359, 1054, 1269, 1133, 706, 92,
	1005, 1178, 936, 913, 1713, 705, 252, 253, 254, 255,
	862, 352, 945, 340, 692, 556, 339, 282, 677, 266,
	500, 726, 1253, 721, 720, 645, 564, 338, 1347, 912,
	1109, 581, 582, 583, 584, 585, 578, 1028, 355, 588,
	1950, 52, 270, 349, 1417, 343, 1536, 1537, 1538, 1539,
	1540, 1541, 345, 1728, 1916, 1024, 588, 276, 577, 576,
	586, 587, 579, 580, 581, 582, 583, 584, 585, 578,
	491, 604, 588, 1024, 1025, 1437, 578, 347, 1771, 588,
	1564, 1823, 1423, 495, 496, 1232, 1424, 89, 1907, 1841,
	1842, 1984, 502, 1888, 1977, 1814, 1962, 507, 1013, 916,
	1742, 1134, 1135, 263, 1068, 48, 26, 27, 992, 1859,
	1187, 1130, 1020, 1900, 1008, 348, 1887, 1701, 1371, 1838,
	1009, 1813, 1572, 1741, 1519, 1027, 508, 505, 28, 1403,
	1404, 1516, 1402, 510, 572, 511, 575, 707, 1031, 708,
	92, 518, 590, 591, 592, 593, 594, 595, 596, 979,
	573, 574, 571, 597, 598, 599, 600, 577, 576, 586,
	587, 579, 580, 581, 582, 583, 584, 585, 578, 279,
	279, 588, 1428, 980, 981, 542, 78, 827, 1016, 1199,
	1011, 1021, 1198, 1255, 828, 1200, 279, 1843, 1018, 1017,
	1498, 539, 1497, 1496, 1030, 553, 1042, 617, 1132, 279,
	279, 279, 279, 279, 279, 279, 1245, 1685, 1247, 1246,
	552, 577, 576, 586, 587, 579, 580, 581, 582, 583,
	584, 585, 578, 279, 1621, 588, 1032, 940, 71, 76,
	1707, 68, 279, 1345, 1344, 1032, 524, 1343, 1508, 1506,
	1706, 250, 1982, 1878, 72, 1958, 77, 1921, 92, 1975,
	1974, 1959, 1663, 1776, 1761, 92, 92, 92, 1418, 1055,
	1689, 1976, 73, 74, 69, 605, 1906, 1960, 1908, 1471,
	1472, 535, 536, 589, 1807, 495, 496, 1929, 1729, 1323,
	946, 1478, 520, 1847, 1006, 1702, 1703, 1705, 1808, 797,
	589, 1704, 87, 83, 84, 1786, 85, 1849, 1479, 1629,
	1566, 1007, 1565, 797, 526, 1226, 589, 528, 1225, 1213,
	1937, 1614, 1014, 589, 1416, 1719, 1515, 543, 1015, 1488,
	1981, 501, 1346, 513, 796, 355, 81, 80, 343, 81,
	1844, 1603, 1190, 806, 543, 498, 525, 527, 497, 1189,
	1188, 786, 509, 506, 229, 82, 609, 610, 611, 612,
	613, 614, 615, 650, 1324, 651, 607, 608, 577, 576,
	586, 587, 579, 580, 581, 582, 583, 584, 585, 578,
	1899, 1022, 588, 1023, 1426, 577, 576, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 1812, 1742, 588,
	672, 1513, 1019, 991, 703, 1573, 1928, 1231, 1966, 696,
	1042, 70, 1733, 1035, 49, 589, 576, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 1556, 92, 588,
	92, 1056, 1512, 92, 697, 1320, 92, 75, 1528, 57,
	92, 1218, 785, 577, 576, 586, 587, 579, 580, 581,
	582, 583, 584, 585, 578, 1556, 1955, 588, 1787, 1788,
	1789, 92, 798, 799, 59, 60, 61, 62, 63, 589,
	1845, 1846, 1848, 1850, 1851, 86, 798, 799, 1445, 1332,
	92, 1155, 279, 279, 1121, 1216, 523, 834, 710, 279,
	620, 279, 1561, 568, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 839,
	1219, 519, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 815, 1453, 588, 1007, 787, 788,
	1104, 967, 969, 831, 863, 988, 987, 801, 563, 279,
	1321, 1753, 1752, 1319, 1751, 279, 279, 279, 279, 279,
	279, 279, 279, 859, 1006, 1750, 279, 1322, 1151, 915,
	813, 1749, 562, 561, 1748, 864, 1747, 923, 928, 930,
	802, 1007, 803, 860, 938, 807, 562, 561, 810, 563,
	1454, 1745, 1328, 1877, 841, 1468, 1972, 279, 279, 279,
	279, 1201, 92, 563, 279, 92, 92, 92, 92, 92,
	636, 543, 856, 829, 1150, 919, 1176, 92, 709, 858,
	92, 968, 950, 1105, 92, 561, 589, 562, 561, 92,
	92, 891, 848, 651, 888, 890, 1973, 1559, 1560, 1562,
	279, 563, 923, 589, 563, 907, 910, 1148, 861, 1147,
	1970, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 562, 561, 934, 1373,
	937, 869, 1327, 589, 1210, 607, 608, 792, 343, 343,
	343, 343, 343, 563, 974, 867, 868, 866, 300, 562,
	561, 942, 937, 343, 1160, 1662, 1375, 355, 852, 854,
	855, 589, 343, 558, 853, 985, 563, 929, 1940, 952,
	953, 951, 955, 554, 954, 1939, 1149, 833, 92, 92,
	1043, 1044, 1045, 1046, 963, 92, 50, 92, 971, 972,
	977, 1665, 92, 1661, 976, 92, 865, 92, 903, 1081,
	92, 1901, 993, 1763, 947, 924, 925, 1746, 512, 840,
	1222, 933, 358, 1210, 492, 1210, 832, 1905, 499, 562,
	561, 503, 504, 279, 279, 279, 279, 562, 561, 1061,
	589, 1628, 975, 562, 561, 1209, 563, 279, 1340, 1118,
	1119, 1120, 1111, 1589, 563, 1904, 941, 1902, 943, 944,
	563, 1903, 837, 838, 1826, 1057, 1058, 1210, 279, 279,
	279, 1221, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 1822, 1256, 588, 920, 922, 1824,
	579, 580, 581, 582, 583, 584, 585, 578, 1584, 859,
	588, 1675, 1256, 939, 515, 516, 517, 1592, 1825, 863,
	1583, 562, 561, 1591, 1256, 279, 1110, 901, 1433, 860,
	1276, 886, 279, 887, 50, 1274, 1252, 900, 563, 619,
	1065, 1066, 1138, 904, 1490, 279, 1270, 1074, 279, 1080,
	864, 1228, 905, 906, 1082, 619, 1743, 1099, 1421, 1100,
	1420, 79, 1101, 1061, 965, 1774, 1989, 902, 1419, 1033,
	1034, 1036, 1037, 1038, 1220, 1039, 1040, 1123, 1170, 1553,
	1961, 1636, 1947, 543, 92, 1553, 1912, 1553, 1895, 1057,
	1058, 1202, 1049, 1050, 1051, 1052, 1053, 1774, 1894, 1193,
	1070, 1195, 358, 358, 358, 358, 899, 358, 1891, 1890,
	1883, 543, 1553, 1880, 358, 638, 639, 640, 641, 642,
	643, 644, 337, 1553, 1879, 1124, 1125, 1126, 1636, 1804,
	1636, 1672, 92, 812, 1648, 279, 811, 793, 1159, 1194,
	1152, 566, 1636, 543, 1911, 1227, 1117, 1650, 679, 682,
	683, 684, 680, 791, 681, 685, 1183, 343, 1179, 1180,
	1639, 1638, 1636, 1637, 1204, 1553, 1552, 1399, 543, 1244,
	1527, 543, 1460, 1459, 92, 1456, 1457, 1196, 1456, 1455,
	1142, 543, 577, 576, 586, 587, 579, 580, 581, 582,
	583, 584, 585, 578, 1257, 1258, 588, 1260, 1261, 1262,
	921, 543, 1242, 1214, 1215, 1217, 1263, 521, 1265, 1266,
	1267, 1268, 674, 543, 1140, 92, 92, 717, 716, 358,
	1649, 514, 1857, 92, 1794, 1775, 712, 1774, 50, 1767,
	589, 1766, 1765, 279, 1157, 1684, 700, 1680, 1679, 279,
	279, 1676, 23, 1285, 589, 1271, 1292, 1272, 1273, 1610,
	1585, 1575, 1275, 279, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 279, 279, 279, 279, 279, 279, 1168, 1446, 1335,
	1290, 279, 1169, 1293, 1229, 1131, 312, 47, 1377, 279,
	701, 1174, 699, 1289, 1174, 279, 279, 279, 1154, 1139,
	279, 1141, 50, 279, 1175, 54, 1337, 950, 23, 1144,
	1145, 1146, 1175, 950, 1383, 23, 921, 1372, 1378, 1156,
	1288, 1339, 279, 1289, 1162, 1142, 1279, 1163, 1164, 1165,
	1166, 1401, 1381, 1387, 47, 1350, 1338, 673, 1409, 1364,
	1370, 1348, 262, 1363, 1153, 1631, 1866, 1142, 344, 674,
	973, 1523, 699, 1400, 1386, 1553, 279, 1174, 50, 1978,
	860, 1388, 674, 674, 1574, 50, 1594, 1593, 1738, 1467,
	1458, 725, 725, 1422, 1205, 1333, 263, 978, 1300, 1142,
	702, 835, 1885, 1856, 1259, 1408, 1769, 1768, 1407, 358,
	1244, 1757, 1756, 1716, 1715, 1686, 1341, 1342, 92, 1674,
	358, 358, 358, 358, 358, 358, 358, 358, 1646, 92,
	1427, 1615, 1425, 1612, 358, 358, 1444, 1032, 1365, 1366,
	1367, 1368, 1369, 1242, 1465, 1466, 50, 1434, 1060, 1463,
	1449, 1443, 1447, 1448, 843, 1450, 1451, 1452, 92, 1436,
	589, 1441, 1438, 1430, 566, 1394, 1392, 358, 1055, 279,
	1277, 1278, 790, 1301, 1297, 1294, 92, 1302, 1299, 1298,
	1233, 279, 1207, 77, 1179, 1180, 1291, 1474, 1481, 1475,
	1048, 1492, 1047, 65, 1303, 1762, 1595, 1483, 1464, 847,
	1377, 1296, 1182, 809, 794, 540, 909, 909, 960, 1185,
	958, 1486, 1184, 961, 911, 959, 279, 957, 1489, 358,
	956, 1934, 962, 279, 683, 684, 267, 268, 1886, 931,
	1331, 1493, 1106, 1499, 931, 557, 1932, 1337, 1116, 92,
	530, 530, 530, 530, 1115, 530, 1349, 1264, 1206, 343,
	545, 555, 530, 1504, 715, 1542, 1543, 1544, 522, 1352,
	1461, 1432, 1521, 546, 1530, 1922, 837, 838, 1522, 47,
	279, 1473, 931, 1616, 1072, 808, 279, 1547, 1431, 1287,
	1282, 1281, 1569, 800, 602, 687, 557, 1545, 606, 258,
	1571, 264, 265, 1951, 1354, 1114, 1568, 1398, 1609, 1563,
	1485, 358, 1470, 1113, 279, 92, 1415, 618, 1909, 358,
	1244, 1549, 1722, 1204, 1440, 1442, 492, 259, 54, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 1495, 635,
	637, 637, 637, 637, 637, 637, 637, 637, 1598, 666,
	667, 668, 669, 1242, 1587, 1721, 1588, 1576, 1590, 1619,
	1586, 689, 1175, 279, 279, 1601, 279, 279, 279, 1605,
	1602, 1606, 1607, 1608, 1755, 1356, 1077, 1078, 1079, 1361,
	1874, 1355, 1285, 1549, 1604, 1873, 1353, 679, 682, 683,
	684, 680, 1359, 681, 685, 1062, 1872, 1871, 559, 1632,
	358, 1754, 358, 1620, 1730, 1357, 1358, 1840, 1839, 725,
	1414, 1413, 1224, 830, 56, 58, 1381, 1295, 279, 358,
	1630, 1696, 8, 279, 1660, 1360, 1362, 1693, 7, 1664,
	1477, 1501, 1502, 990, 1503, 1694, 6, 1658, 1505, 1643,
	1507, 1692, 5, 358, 279, 1659, 92, 1666, 1611, 1668,
	698, 51, 1, 1136, 1494, 616, 299, 1600, 1957, 1927,
	285, 1534, 1867, 1779, 1862, 1785, 1251, 1500, 1681, 1012,
	1764, 1230, 67, 1858, 1773, 1469, 1286, 1304, 1598, 1509,
	1510, 1511, 1700, 1069, 1514, 1717, 1283, 1087, 1691, 1805,
	1554, 1557, 1819, 1677, 1645, 1678, 1555, 998, 1524, 1525,
	1526, 1203, 1529, 490, 1708, 1739, 1732, 64, 1736, 1744,
	1622, 1623, 999, 1624, 1625, 1626, 997, 996, 994, 1731,
	1735, 279, 1026, 1254, 1381, 1029, 566, 530, 724, 722,
	723, 727, 237, 350, 686, 711, 560, 279, 530, 530,
	530, 530, 530, 530, 530, 530, 1318, 1317, 1083, 1326,
	826, 1103, 530, 530, 538, 1582, 239, 279, 279, 601,
	1112, 1772, 1700, 1197, 357, 1384, 549, 1720, 1777, 1618,
	1158, 1598, 279, 279, 633, 935, 1802, 1803, 286, 1192,
	851, 279, 1790, 1793, 298, 297, 296, 842, 1683, 1167,
	1778, 785, 570, 1810, 342, 670, 678, 676, 358, 950,
	675, 1820, 1797, 1798, 1799, 1800, 1801, 548, 1834, 1212,
	1815, 1181, 1177, 341, 1334, 1518, 1727, 846, 1835, 279,
	1223, 25, 55, 47, 269, 19, 279, 18, 17, 20,
	1854, 1852, 529, 1249, 1627, 1836, 272, 1855, 16, 1868,
	15, 624, 90, 1853, 14, 249, 29, 13, 1700, 1832,
	1833, 12, 11, 1598, 1863, 10, 9, 1699, 1640, 1641,
	1642, 1698, 1700, 1697, 1695, 1865, 4, 273, 1875, 90,
	90, 260, 1881, 1280, 22, 2, 0, 358, 1554, 0,
	0, 0, 90, 0, 0, 0, 1671, 0, 90, 0,
	90, 344, 344, 344, 344, 344, 90, 0, 1892, 1893,
	0, 0, 0, 0, 1791, 0, 689, 0, 970, 0,
	358, 0, 0, 1913, 1896, 344, 0, 0, 0, 1910,
	0, 1915, 0, 1919, 0, 0, 1914, 0, 1918, 0,
	358, 1926, 1925, 0, 1897, 1898, 1700, 1931, 1723, 1724,
	1725, 1726, 1917, 1930, 0, 0, 1933, 0, 1700, 1700,
	1700, 1936, 0, 1938, 0, 1691, 0, 0, 0, 0,
	92, 0, 0, 0, 358, 0, 0, 279, 1943, 1946,
	1945, 1827, 1828, 1829, 1830, 1831, 1310, 931, 1944, 1868,
	1385, 1192, 1948, 931, 0, 1758, 0, 0, 92, 0,
	0, 0, 0, 0, 1965, 1700, 0, 1700, 1700, 1967,
	0, 1954, 1968, 1777, 1954, 0, 1969, 0, 530, 0,
	530, 0, 358, 0, 0, 0, 1411, 0, 0, 0,
	0, 0, 0, 0, 1971, 1980, 0, 530, 0, 0,
	1985, 0, 0, 0, 279, 1986, 0, 90, 0, 0,
	0, 0, 0, 1811, 1249, 1311, 0, 0, 1816, 0,
	0, 1313, 1306, 1307, 1700, 1314, 1309, 1308, 1700, 0,
	0, 1316, 1312, 0, 1954, 0, 0, 532, 533, 534,
	0, 537, 1315, 0, 0, 1837, 1122, 0, 541, 1305,
	0, 1979, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 547, 551, 0, 0, 0,
	1476, 0, 0, 1480, 0, 1482, 0, 0, 0, 0,
	0, 0, 569, 0, 1484, 0, 0, 0, 0, 0,
	0, 1882, 0, 0, 0, 0, 0, 0, 0, 0,
	1964, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 0, 0, 0, 90, 0, 0, 0, 623,
	0, 0, 90, 694, 90, 0, 0, 0, 634, 0,
	0, 0, 1171, 1172, 0, 577, 576, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 0, 0, 588,
	0, 1987, 0, 0, 0, 0, 0, 0, 0, 263,
	344, 48, 26, 27, 0, 1129, 0, 0, 0, 1093,
	0, 1532, 0, 1701, 1532, 1532, 1532, 0, 1546, 0,
	0, 0, 0, 1092, 28, 358, 1128, 358, 0, 577,
	576, 586, 587, 579, 580, 581, 582, 583, 584, 585,
	578, 0, 0, 588, 0, 0, 0, 0, 0, 1532,
	0, 0, 0, 1097, 1249, 0, 1577, 0, 0, 0,
	0, 1963, 1091, 0, 358, 577, 576, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 0, 0, 588,
	0, 0, 1599, 0, 0, 0, 358, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 1613, 586, 587, 579,
	580, 581, 582, 583, 584, 585, 578, 1617, 0, 588,
	0, 0, 0, 1991, 1992, 1088, 1085, 1086, 0, 1084,
	0, 0, 0, 0, 0, 90, 1707, 90, 530, 0,
	90, 0, 0, 90, 0, 0, 1706, 814, 0, 0,
	0, 0, 0, 0, 0, 0, 1634, 1635, 0, 1095,
	1098, 0, 0, 805, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 816, 817, 818, 819, 820, 821,
	822, 823, 1411, 0, 0, 0, 0, 90, 824, 825,
	0, 1702, 1703, 1705, 1667, 0, 814, 1704, 0, 0,
	0, 0, 0, 1876, 0, 0, 1382, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 849, 850,
	0, 0, 1599, 1682, 0, 1395, 1396, 1397, 0, 0,
	0, 0, 1688, 589, 0, 0, 0, 0, 0, 1090,
	0, 1709, 0, 0, 1532, 0, 273, 0, 0, 0,
	0, 0, 0, 273, 273, 0, 0, 0, 932, 273,
	0, 0, 0, 932, 1429, 1734, 0, 0, 0, 1648,
	0, 0, 1089, 0, 0, 917, 0, 0, 0, 0,
	1439, 623, 1650, 0, 926, 927, 618, 589, 0, 0,
	0, 0, 0, 0, 273, 273, 273, 273, 0, 90,
	0, 932, 90, 90, 90, 90, 90, 0, 0, 0,
	49, 0, 1094, 0, 964, 1599, 0, 90, 47, 47,
	0, 694, 0, 589, 0, 0, 90, 90, 1096, 0,
	1780, 1782, 1783, 1784, 0, 0, 0, 0, 1796, 1709,
	1709, 1796, 1709, 1709, 1411, 1411, 0, 0, 0, 0,
	0, 0, 0, 589, 0, 1649, 0, 0, 0, 931,
	0, 0, 1817, 0, 0, 0, 984, 1818, 0, 0,
	0, 1821, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1688, 1411, 0, 0, 1651,
	1652, 1653, 1654, 1655, 1656, 1657, 0, 1599, 1411, 0,
	0, 0, 0, 1860, 0, 646, 0, 0, 1517, 725,
	0, 0, 0, 0, 1870, 90, 90, 0, 0, 0,
	0, 0, 90, 0, 90, 1796, 0, 0, 0, 90,
	0, 0, 90, 0, 90, 0, 1884, 90, 0, 0,
	648, 0, 0, 0, 1071, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 1567, 0, 0, 0, 0,
	0, 0, 814, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 646, 0, 0,
	0, 0, 0, 0, 0, 1532, 0, 0, 0, 1107,
	1108, 0, 551, 0, 0, 1920, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 0, 0, 0, 0,
	0, 0, 648, 0, 1411, 0, 0, 649, 1935, 0,
	0, 0, 0, 0, 0, 664, 647, 0, 0, 0,
	0, 653, 652, 1740, 263, 0, 48, 26, 27, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 1701, 725,
	0, 1952, 0, 0, 0, 0, 0, 0, 0, 28,
	1382, 0, 273, 1633, 0, 0, 0, 0, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 1143, 892,
	893, 0, 894, 895, 896, 898, 897, 0, 889, 649,
	0, 0, 0, 0, 1161, 358, 0, 664, 647, 0,
	0, 90, 0, 653, 652, 0, 1670, 1688, 665, 0,
	0, 1990, 0, 0, 0, 0, 263, 0, 48, 26,
	27, 0, 0, 1122, 0, 263, 0, 48, 26, 27,
	1701, 23, 24, 48, 26, 27, 618, 0, 0, 1701,
	0, 28, 0, 0, 0, 0, 0, 0, 0, 90,
	28, 42, 1250, 1718, 0, 0, 28, 0, 0, 0,
	263, 1707, 48, 26, 27, 0, 0, 0, 1382, 0,
	47, 1706, 0, 0, 1701, 0, 0, 37, 0, 0,
	665, 50, 0, 0, 0, 28, 0, 0, 0, 0,
	0, 90, 0, 1956, 263, 0, 48, 26, 27, 0,
	0, 0, 1953, 0, 0, 0, 0, 0, 1701, 0,
	0, 0, 0, 0, 0, 0, 1702, 1703, 1705, 28,
	0, 0, 1704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 1707, 0, 30, 31, 33, 32, 35,
	273, 0, 1707, 1706, 1325, 0, 0, 0, 0, 0,
	0, 0, 1706, 0, 0, 0, 0, 0, 0, 0,
	273, 36, 43, 44, 0, 0, 45, 46, 34, 0,
	0, 0, 0, 814, 0, 0, 0, 1707, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 1706, 1702, 1703,
	1705, 0, 932, 0, 1704, 0, 0, 1702, 1703, 1705,
	0, 0, 235, 1704, 0, 0, 0, 1374, 0, 0,
	0, 1707, 0, 0, 0, 38, 39, 0, 40, 41,
	0, 1706, 1389, 1390, 0, 49, 1391, 0, 245, 1393,
	0, 0, 1702, 1703, 1705, 0, 0, 0, 1704, 0,
	0, 0, 0, 0, 1864, 1889, 0, 0, 1405, 0,
	0, 0, 0, 1250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1702, 1703, 1705, 0,
	0, 0, 1704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 0, 90, 238, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 236, 0,
	0, 0, 240, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1983, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 694, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 241, 242, 243, 244,
	248, 0, 0, 1250, 0, 247, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1570, 0, 0, 0,
	0, 1250, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1250, 0, 90, 1669, 0, 0, 0, 0, 1673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1759, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 1792, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1809, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 476, 465, 0, 426, 478, 396, 414,
	486, 416, 417, 452, 376, 435, 159, 411, 394, 96,
	399, 369, 406, 370, 397, 428, 120, 395, 0, 467,
	438, 134, 227, 228, 484, 137, 443, 0, 181, 147,
	0, 0, 430, 469, 433, 460, 425, 453, 384, 442,
	479, 412, 448, 480, 0, 0, 0, 363, 0, 1550,
	1551, 0, 0, 0, 0, 0, 109, 1942, 447, 474,
	408, 489, 451, 368, 445, 0, 374, 377, 485, 472,
	403, 404, 0, 0, 0, 0, 0, 0, 0, 429,
	434, 457, 422, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 1949, 0, 400, 0, 441, 0, 0,
	0, 381, 375, 0, 427, 0, 0, 0, 383, 0,
	401, 458, 0, 365, 463, 470, 424, 143, 208, 473,
	421, 420, 166, 0, 112, 0, 187, 124, 413, 135,
	455, 487, 477, 431, 468, 398, 407, 114, 405, 173,
	160, 199, 440, 161, 171, 138, 191, 167, 198, 475,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	373, 366, 402, 461, 464, 388, 450, 378, 409, 456,
	410, 432, 393, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 371, 0, 182, 201,
	218, 219, 372, 392, 471, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	449, 174, 111, 200, 180, 0, 387, 391, 385, 386,
	436, 437, 481, 482, 483, 459, 382, 0, 389, 390,
	0, 466, 129, 439, 95, 103, 136, 488, 215, 0,
	168, 122, 202, 0, 0, 415, 367, 419, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 175, 423, 418,
	444, 446, 454, 462, 476, 465, 108, 426, 478, 396,
	414, 486, 416, 417, 452, 376, 435, 159, 411, 394,
	96, 399, 369, 406, 370, 397, 428, 120, 395, 0,
	467, 438, 134, 227, 228, 484, 137, 443, 0, 181,
	147, 0, 0, 430, 469, 433, 460, 425, 453, 384,
	442, 479, 412, 448, 480, 0, 0, 0, 278, 0,
	93, 0, 0, 0, 0, 0, 0, 109, 0, 447,
	474, 408, 489, 451, 368, 445, 0, 374, 377, 485,
	472, 403, 404, 0, 0, 0, 0, 0, 0, 0,
	429, 434, 457, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 857, 0, 400, 0, 441, 0,
	0, 0, 381, 375, 0, 427, 0, 0, 0, 383,
	0, 401, 458, 0, 365, 463, 470, 424, 143, 208,
	473, 421, 420, 166, 0, 112, 0, 187, 124, 413,
	135, 455, 487, 477, 431, 468, 398, 407, 114, 405,
	173, 160, 199, 440, 161, 171, 138, 191, 167, 198,
	475, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 373, 366, 402, 461, 464, 388, 450, 378, 409,
	456, 410, 432, 393, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 371, 0, 182,
	201, 218, 219, 372, 392, 471, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 449, 174, 111, 200, 180, 0, 387, 391, 385,
	386, 436, 437, 481, 482, 483, 459, 382, 0, 389,
	390, 0, 466, 129, 439, 95, 103, 136, 488, 215,
	0, 168, 122, 202, 0, 0, 415, 367, 419, 0,
	0, 0, 0, 0, 0, 0, 379, 380, 175, 423,
	418, 444, 446, 454, 462, 476, 465, 108, 426, 478,
	396, 414, 486, 416, 417, 452, 376, 435, 159, 411,
	394, 96, 399, 369, 406, 370, 397, 428, 120, 395,
	0, 467, 438, 134, 227, 228, 484, 137, 443, 0,
	181, 147, 0, 0, 430, 469, 433, 460, 425, 453,
	384, 442, 479, 412, 448, 480, 0, 0, 0, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	447, 474, 408, 489, 451, 368, 445, 0, 374, 377,
	485, 472, 403, 404, 1406, 0, 0, 0, 0, 0,
	0, 429, 434, 457, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 0, 441,
	0, 0, 0, 381, 375, 0, 427, 0, 0, 0,
	383, 0, 401, 458, 0, 365, 463, 470, 424, 143,
	208, 473, 421, 420, 166, 0, 112, 0, 187, 124,
	413, 135, 455, 487, 477, 431, 468, 398, 407, 114,
	405, 173, 160, 199, 440, 161, 171, 138, 191, 167,
	198, 475, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 373, 366, 402, 461, 464, 388, 450, 378,
	409, 456, 410, 432, 393, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 371, 0,
	182, 201, 218, 219, 372, 392, 471, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 449, 174, 111, 200, 180, 0, 387, 391,
	385, 386, 436, 437, 481, 482, 483, 459, 382, 0,
	389, 390, 0, 466, 129, 439, 95, 103, 136, 488,
	215, 0, 168, 122, 202, 0, 0, 415, 367, 419,
	0, 0, 0, 0, 0, 0, 0, 379, 380, 175,
	423, 418, 444, 446, 454, 462, 476, 465, 108, 426,
	478, 396, 414, 486, 416, 417, 452, 376, 435, 159,
	411, 394, 96, 399, 369, 406, 370, 397, 428, 120,
	395, 0, 467, 438, 134, 227, 228, 484, 137, 443,
	0, 181, 147, 0, 0, 430, 469, 433, 460, 425,
	453, 384, 442, 479, 412, 448, 480, 0, 0, 0,
	278, 0, 93, 0, 0, 0, 0, 0, 0, 109,
	0, 447, 474, 408, 489, 451, 368, 445, 0, 374,
	377, 485, 472, 403, 404, 0, 0, 0, 0, 0,
	0, 0, 429, 434, 457, 422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 400, 0,
	441, 0, 0, 0, 381, 375, 0, 427, 0, 0,
	0, 383, 0, 401, 458, 0, 365, 463, 470, 424,
	143, 208, 473, 421, 420, 166, 0, 112, 0, 187,
	124, 413, 135, 455, 487, 477, 431, 468, 398, 407,
	114, 405, 173, 160, 199, 440, 161, 171, 138, 191,
	167, 198, 475, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 373, 366, 402, 461, 464, 388, 450,
	378, 409, 456, 410, 432, 393, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 371,
	0, 182, 201, 218, 219, 372, 392, 471, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 449, 174, 111, 200, 180, 0, 387,
	391, 385, 386, 436, 437, 481, 482, 483, 459, 382,
	0, 389, 390, 0, 466, 129, 439, 95, 103, 136,
	488, 215, 0, 168, 122, 202, 0, 0, 415, 367,
	419, 0, 0, 0, 0, 0, 0, 0, 379, 380,
	175, 423, 418, 444, 446, 454, 462, 476, 465, 108,
	426, 478, 396, 414, 486, 416, 417, 452, 376, 435,
	159, 411, 394, 96, 399, 369, 406, 370, 397, 428,
	120, 395, 0, 467, 438, 134, 227, 228, 484, 137,
	443, 0, 181, 147, 0, 0, 430, 469, 433, 460,
	425, 453, 384, 442, 479, 412, 448, 480, 0, 0,
	0, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 447, 474, 408, 489, 451, 368, 445, 0,
	374, 377, 485, 472, 403, 404, 0, 0, 0, 0,
	0, 0, 0, 429, 434, 457, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 400,
	0, 441, 0, 0, 0, 381, 375, 0, 427, 0,
	0, 0, 383, 0, 401, 458, 0, 365, 463, 470,
	424, 143, 208, 473, 421, 420, 166, 0, 112, 0,
	187, 124, 413, 135, 455, 487, 477, 431, 468, 398,
	407, 114, 405, 173, 160, 199, 440, 161, 171, 138,
	191, 167, 198, 475, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 373, 366, 402, 461, 464, 388,
	450, 378, 409, 456, 410, 432, 393, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	371, 0, 182, 201, 218, 219, 372, 392, 471, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 449, 174, 111, 200, 180, 0,
	387, 391, 385, 386, 436, 437, 481, 482, 483, 459,
	382, 0, 389, 390, 0, 466, 129, 439, 95, 103,
	136, 488, 215, 0, 168, 122, 202, 0, 0, 415,
	367, 419, 0, 0, 0, 0, 0, 0, 0, 379,
	380, 175, 423, 418, 444, 446, 454, 462, 476, 465,
	108, 426, 478, 396, 414, 486, 416, 417, 452, 376,
	435, 159, 411, 394, 96, 399, 369, 406, 370, 397,
	428, 120, 395, 0, 467, 438, 134, 227, 228, 484,
	137, 443, 0, 181, 147, 0, 0, 430, 469, 433,
	460, 425, 453, 384, 442, 479, 412, 448, 480, 50,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 447, 474, 408, 489, 451, 368, 445,
	0, 374, 377, 485, 472, 403, 404, 0, 0, 0,
	0, 0, 0, 0, 429, 434, 457, 422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 0, 441, 0, 0, 0, 381, 375, 0, 427,
	0, 0, 0, 383, 0, 401, 458, 0, 365, 463,
	470, 424, 143, 208, 473, 421, 420, 166, 0, 112,
	0, 187, 124, 413, 135, 455, 487, 477, 431, 468,
	398, 407, 114, 405, 173, 160, 199, 440, 161, 171,
	138, 191, 167, 198, 475, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 373, 366, 402, 461, 464,
	388, 450, 378, 409, 456, 410, 432, 393, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 371, 0, 182, 201, 218, 219, 372, 392, 471,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 449, 174, 111, 200, 180,
	0, 387, 391, 385, 386, 436, 437, 481, 482, 483,
	459, 382, 0, 389, 390, 0, 466, 129, 439, 95,
	103, 136, 488, 215, 0, 168, 122, 202, 0, 0,
	415, 367, 419, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 175, 423, 418, 444, 446, 454, 462, 476,
	465, 108, 426, 478, 396, 414, 486, 416, 417, 452,
	376, 435, 159, 411, 394, 96, 399, 369, 406, 370,
	397, 428, 120, 395, 0, 467, 438, 134, 227, 228,
	484, 137, 443, 0, 181, 147, 0, 0, 430, 469,
	433, 460, 425, 453, 384, 442, 479, 412, 448, 480,
	0, 0, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 447, 474, 408, 489, 451, 368,
	445, 0, 374, 377, 485, 472, 403, 404, 0, 0,
	0, 0, 0, 0, 0, 429, 434, 457, 422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 400, 0, 441, 0, 0, 0, 381, 375, 0,
	427, 0, 0, 0, 383, 0, 401, 458, 0, 365,
	463, 470, 424, 143, 208, 473, 421, 420, 166, 0,
	112, 0, 187, 124, 413, 135, 455, 487, 477, 431,
	468, 398, 407, 114, 405, 173, 160, 199, 440, 161,
	171, 138, 191, 167, 198, 475, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 373, 366, 402, 461,
	464, 388, 450, 378, 409, 456, 410, 432, 393, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 361,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 371, 0, 182, 201, 218, 219, 372, 392,
	471, 211, 212, 213, 214, 0, 0, 0, 362, 360,
	128, 178, 132, 139, 169, 216, 449, 174, 111, 200,
	180, 356, 387, 391, 385, 386, 436, 437, 481, 482,
	483, 459, 382, 0, 389, 390, 0, 466, 129, 439,
	95, 103, 136, 488, 215, 0, 168, 122, 202, 0,
	0, 415, 367, 419, 0, 0, 0, 0, 0, 0,
	0, 379, 380, 175, 423, 418, 444, 446, 454, 462,
	476, 465, 108, 426, 478, 396, 414, 486, 416, 417,
	452, 376, 435, 159, 411, 394, 96, 399, 369, 406,
	370, 397, 428, 120, 395, 0, 467, 438, 134, 227,
	228, 484, 137, 443, 0, 181, 147, 0, 0, 430,
	469, 433, 460, 425, 453, 384, 442, 479, 412, 448,
	480, 0, 0, 0, 91, 0, 93, 0, 0, 0,
	0, 0, 0, 109, 0, 447, 474, 408, 489, 451,
	368, 445, 0, 374, 377, 485, 472, 403, 404, 0,
	0, 0, 0, 0, 0, 0, 429, 434, 457, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 400, 0, 441, 0, 0, 0, 381, 375,
	0, 427, 0, 0, 0, 383, 0, 401, 458, 0,
	365, 463, 470, 424, 143, 208, 473, 421, 420, 166,
	0, 112, 0, 187, 124, 413, 135, 455, 487, 477,
	431, 468, 398, 407, 114, 405, 173, 160, 199, 440,
	161, 171, 138, 191, 167, 198, 475, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 373, 366, 402,
	461, 464, 388, 450, 378, 409, 456, 410, 432, 393,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 371, 0, 182, 201, 218, 219, 372,
	392, 471, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 449, 174, 111,
	200, 180, 0, 387, 391, 385, 386, 436, 437, 481,
	482, 483, 459, 382, 0, 389, 390, 0, 466, 129,
	439, 95, 103, 136, 488, 215, 0, 168, 122, 202,
	0, 0, 415, 367, 419, 0, 0, 0, 0, 0,
	0, 0, 379, 380, 175, 423, 418, 444, 446, 454,
	462, 476, 465, 108, 426, 478, 396, 414, 486, 416,
	417, 452, 376, 435, 159, 411, 394, 96, 399, 369,
	406, 370, 397, 428, 120, 395, 0, 467, 438, 134,
	227, 228, 484, 137, 443, 0, 181, 147, 0, 0,
	430, 469, 433, 460, 425, 453, 384, 442, 479, 412,
	448, 480, 0, 0, 0, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 447, 474, 408, 489,
	451, 368, 445, 0, 374, 377, 485, 472, 403, 404,
	0, 0, 0, 0, 0, 0, 0, 429, 434, 457,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 441, 0, 0, 0, 381,
	375, 0, 427, 0, 0, 0, 383, 0, 401, 458,
	0, 365, 463, 470, 424, 143, 208, 473, 421, 420,
	166, 0, 112, 0, 187, 124, 413, 135, 455, 487,
	477, 431, 468, 398, 407, 114, 405, 173, 160, 199,
	440, 161, 171, 138, 191, 167, 198, 475, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 373, 366,
	402, 461, 464, 388, 450, 378, 409, 456, 410, 432,
	393, 0, 0, 0, 0, 0, 97, 188, 704, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 361, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 371, 0, 182, 201, 218, 219,
	372, 392, 471, 211, 212, 213, 214, 0, 0, 0,
	362, 360, 128, 178, 132, 139, 169, 216, 449, 174,
	111, 200, 180, 356, 387, 391, 385, 386, 436, 437,
	481, 482, 483, 459, 382, 0, 389, 390, 0, 466,
	129, 439, 95, 103, 136, 488, 215, 0, 168, 122,
	202, 0, 0, 415, 367, 419, 0, 0, 0, 0,
	0, 0, 0, 379, 380, 175, 423, 418, 444, 446,
	454, 462, 476, 465, 108, 426, 478, 396, 414, 486,
	416, 417, 452, 376, 435, 159, 411, 394, 96, 399,
	369, 406, 370, 397, 428, 120, 395, 0, 467, 438,
	134, 227, 228, 484, 137, 443, 0, 181, 147, 0,
	0, 430, 469, 433, 460, 425, 453, 384, 442, 479,
	412, 448, 480, 0, 0, 0, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 447, 474, 408,
	489, 451, 368, 445, 0, 374, 377, 485, 472, 403,
	404, 0, 0, 0, 0, 0, 0, 0, 429, 434,
	457, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 400, 0, 441, 0, 0, 0,
	381, 375, 0, 427, 0, 0, 0, 383, 0, 401,
	458, 0, 365, 463, 470, 424, 143, 208, 473, 421,
	420, 166, 0, 112, 0, 187, 124, 413, 135, 455,
	487, 477, 431, 468, 398, 407, 114, 405, 173, 160,
	199, 440, 161, 171, 138, 191, 167, 198, 475, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 373,
	366, 402, 461, 464, 388, 450, 378, 409, 456, 410,
	432, 393, 0, 0, 0, 0, 0, 97, 188, 351,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 361, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 371, 0, 182, 201, 218,
	219, 372, 392, 471, 211, 212, 213, 214, 0, 0,
	0, 362, 360, 354, 353, 132, 139, 169, 216, 449,
	174, 111, 200, 180, 356, 387, 391, 385, 386, 436,
	437, 481, 482, 483, 459, 382, 0, 389, 390, 0,
	466, 129, 439, 95, 103, 136, 488, 215, 0, 168,
	122, 202, 0, 0, 415, 367, 419, 0, 0, 0,
	0, 0, 0, 0, 379, 380, 175, 423, 418, 444,
	446, 454, 462, 476, 465, 108, 426, 478, 396, 414,
	486, 416, 417, 452, 376, 435, 159, 411, 394, 96,
	399, 369, 406, 370, 397, 428, 120, 395, 0, 467,
	438, 134, 227, 228, 484, 137, 443, 0, 181, 147,
	0, 0, 430, 469, 433, 460, 425, 453, 384, 442,
	479, 412, 448, 480, 0, 0, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 447, 474,
	408, 489, 451, 368, 445, 0, 374, 377, 485, 472,
	403, 404, 0, 0, 0, 0, 0, 0, 0, 429,
	434, 457, 422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 400, 0, 441, 0, 0,
	0, 381, 375, 0, 427, 0, 0, 0, 383, 0,
	401, 458, 0, 365, 463, 470, 424, 143, 208, 473,
	421, 420, 166, 0, 112, 0, 187, 124, 413, 135,
	455, 487, 477, 431, 468, 398, 407, 114, 405, 173,
	160, 199, 440, 161, 171, 138, 191, 167, 198, 475,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	373, 366, 402, 461, 464, 388, 450, 378, 409, 456,
	410, 432, 393, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 371, 0, 182, 201,
	218, 219, 372, 392, 471, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	449, 174, 111, 200, 180, 0, 387, 391, 385, 386,
	436, 437, 481, 482, 483, 459, 382, 0, 389, 390,
	0, 466, 129, 439, 95, 103, 136, 488, 215, 0,
	168, 122, 202, 0, 0, 415, 367, 419, 0, 0,
	0, 0, 0, 0, 0, 379, 380, 175, 423, 418,
	444, 446, 454, 462, 159, 0, 108, 96, 0, 0,
	281, 0, 0, 0, 120, 277, 0, 0, 0, 134,
	227, 228, 322, 137, 0, 0, 181, 147, 0, 0,
	0, 0, 313, 314, 0, 0, 0, 0, 0, 0,
	982, 0, 50, 0, 0, 278, 301, 280, 303, 304,
	305, 306, 0, 0, 109, 302, 307, 308, 309, 983,
	0, 0, 275, 293, 0, 321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 334, 0, 292, 0, 0,
	288, 289, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 208, 0, 0, 332,
	166, 0, 112, 0, 187, 124, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 173, 160, 199,
	0, 161, 171, 138, 191, 167, 198, 0, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 336, 0, 155,
	127, 0, 0, 0, 0, 0, 182, 201, 218, 219,
	0, 0, 0, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 0, 174,
	111, 200, 180, 310, 323, 333, 329, 330, 327, 328,
	326, 325, 324, 335, 315, 316, 317, 318, 320, 0,
	129, 319, 95, 103, 136, 0, 215, 0, 168, 122,
	202, 0, 0, 159, 0, 0, 96, 914, 0, 281,
	0, 0, 0, 120, 277, 175, 0, 0, 134, 227,
	228, 322, 137, 331, 108, 181, 147, 0, 0, 0,
	0, 313, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 278, 301, 280, 303, 304, 305,
	306, 0, 0, 109, 302, 307, 308, 309, 0, 0,
	0, 275, 293, 0, 321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 291,
	271, 0, 0, 0, 334, 0, 292, 0, 0, 288,
	289, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 332, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 336, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 310, 323, 333, 329, 330, 327, 328, 326,
	325, 324, 335, 315, 316, 317, 318, 320, 0, 129,
	319, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 281, 0,
	0, 0, 120, 277, 175, 0, 0, 134, 227, 228,
	322, 137, 331, 108, 181, 147, 0, 0, 0, 0,
	313, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 543, 278, 301, 280, 303, 304, 305, 306,
	0, 0, 109, 302, 307, 308, 309, 0, 0, 0,
	275, 293, 0, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 288, 289,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 332, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 336, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 310, 323, 333, 329, 330, 327, 328, 326, 325,
	324, 335, 315, 316, 317, 318, 320, 0, 129, 319,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 281, 0, 0,
	0, 120, 277, 175, 0, 0, 134, 227, 228, 322,
	137, 331, 108, 181, 147, 0, 0, 0, 0, 313,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 278, 301, 280, 303, 304, 305, 306, 0,
	0, 109, 302, 307, 308, 309, 0, 0, 0, 275,
	293, 0, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 290, 291, 271, 0,
	0, 0, 334, 0, 292, 0, 0, 288, 289, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 332, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 336, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	310, 323, 333, 329, 330, 327, 328, 326, 325, 324,
	335, 315, 316, 317, 318, 320, 0, 129, 319, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 159, 0, 0, 96, 0, 0, 281,
	331, 108, 0, 120, 277, 0, 0, 0, 134, 227,
	228, 322, 137, 0, 0, 181, 147, 0, 0, 0,
	0, 313, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 278, 301, 280, 303, 304, 305,
	306, 0, 0, 109, 302, 307, 308, 309, 0, 0,
	0, 275, 293, 0, 321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 291,
	0, 0, 0, 0, 334, 0, 292, 0, 0, 288,
	289, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 332, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 336, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 310, 323, 333, 329, 330, 327, 328, 326,
	325, 324, 335, 315, 316, 317, 318, 320, 0, 129,
	319, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 281, 0,
	0, 0, 120, 277, 175, 0, 0, 134, 227, 228,
	322, 137, 331, 108, 181, 147, 0, 0, 0, 0,
	313, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 278, 301, 280, 303, 304, 305, 306,
	0, 0, 109, 302, 307, 308, 309, 0, 0, 0,
	275, 293, 0, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 334, 0, 292, 0, 0, 288, 289,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 332, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 336, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 310, 323, 333, 329, 330, 327, 328, 326, 325,
	324, 335, 315, 316, 317, 318, 320, 0, 129, 319,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 322,
	137, 331, 108, 181, 147, 0, 0, 0, 0, 313,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 278, 301, 280, 303, 304, 305, 306, 0,
	0, 109, 302, 307, 308, 309, 0, 0, 0, 0,
	293, 0, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 290, 291, 0, 0,
	0, 0, 334, 0, 292, 0, 0, 288, 289, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 332, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 1988, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 336, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	310, 323, 333, 329, 330, 327, 328, 326, 325, 324,
	335, 315, 316, 317, 318, 320, 0, 129, 319, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	159, 0, 0, 96, 0, 0, 281, 0, 0, 0,
	120, 0, 175, 0, 0, 134, 227, 228, 322, 137,
	331, 108, 181, 147, 0, 0, 0, 0, 313, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 278, 301, 280, 303, 304, 305, 306, 0, 0,
	109, 302, 307, 308, 309, 0, 0, 0, 0, 293,
	0, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 291, 0, 0, 0,
	0, 334, 0, 292, 0, 0, 288, 289, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 332, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 336, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 310,
	323, 333, 329, 330, 327, 328, 326, 325, 324, 335,
	315, 316, 317, 318, 320, 0, 129, 319, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 0, 159,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 120,
	0, 175, 0, 0, 134, 227, 228, 322, 137, 331,
	108, 181, 147, 0, 0, 0, 0, 313, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	278, 301, 280, 303, 304, 305, 306, 0, 0, 109,
	302, 307, 308, 309, 0, 0, 0, 0, 293, 0,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 291, 0, 0, 0, 0,
	334, 0, 292, 0, 0, 288, 289, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 332, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 336, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 310, 323,
	333, 329, 330, 327, 328, 326, 325, 324, 335, 315,
	316, 317, 318, 320, 0, 129, 319, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	175, 0, 0, 134, 227, 228, 0, 137, 331, 108,
	181, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 278,
	0, 1236, 1237, 1238, 0, 0, 0, 0, 109, 1241,
	1239, 308, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 1243, 1248, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 1245, 0,
	1247, 1246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 175,
	0, 0, 134, 227, 228, 0, 137, 0, 108, 181,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1235, 0, 0, 278, 0,
	1236, 1237, 1238, 0, 0, 0, 0, 109, 1241, 1239,
	308, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 0, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 1243, 1248, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 0, 1245, 0, 1247,
	1246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 175, 0,
	0, 134, 227, 228, 0, 137, 0, 108, 181, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 0, 1236,
	1237, 1238, 0, 0, 0, 0, 109, 1241, 1239, 308,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 1243, 1248, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 1245, 0, 1247, 1246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 120, 0, 175, 751, 0,
	134, 227, 228, 0, 137, 0, 108, 181, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1714, 0, 363, 0, 1712, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 752, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 0, 778, 779, 164, 780, 781, 782, 784,
	783, 753, 754, 755, 759, 757, 756, 758, 730, 732,
	206, 728, 731, 737, 733, 734, 735, 749, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 750,
	760, 761, 762, 763, 764, 765, 766, 767, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 729, 136, 0, 215, 0, 168,
	122, 202, 0, 0, 159, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 120, 0, 175, 0, 0, 134,
	227, 228, 0, 137, 0, 108, 181, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 301, 908, 303, 304,
	305, 306, 0, 0, 109, 302, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 208, 0, 0, 0,
	166, 0, 112, 0, 187, 124, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 173, 160, 199,
	0, 161, 171, 138, 191, 167, 198, 0, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 0, 0, 182, 201, 218, 219,
	0, 0, 0, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 0, 174,
	111, 200, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 95, 103, 136, 0, 215, 0, 168, 122,
	202, 0, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 175, 751, 0, 134, 227,
	228, 0, 137, 0, 108, 181, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 752, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 1869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	0, 778, 779, 164, 780, 781, 782, 784, 783, 753,
	754, 755, 759, 757, 756, 758, 730, 732, 206, 728,
	731, 737, 733, 734, 735, 749, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 750, 760, 761,
	762, 763, 764, 765, 766, 767, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 729, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 565, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 567, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 562, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 751, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 0, 778,
	779, 164, 780, 781, 782, 784, 783, 753, 754, 755,
	759, 757, 756, 758, 730, 732, 206, 728, 731, 737,
	733, 734, 735, 749, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 750, 760, 761, 762, 763,
	764, 765, 766, 767, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	729, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	159, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	120, 0, 175, 0, 0, 134, 227, 228, 0, 137,
	0, 108, 181, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1714,
	0, 363, 0, 1712, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1711, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1710, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 0, 159,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 120,
	0, 175, 0, 0, 134, 227, 228, 0, 137, 0,
	108, 181, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 0, 493, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1006,
	143, 208, 0, 0, 0, 1001, 0, 1000, 0, 1002,
	1003, 0, 135, 0, 0, 1004, 1007, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	175, 0, 0, 134, 227, 228, 0, 137, 0, 108,
	181, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 1579, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 1578, 204, 153, 158, 156,
	203, 1580, 196, 146, 142, 0, 101, 194, 144, 141,
	1581, 906, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 902, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 23, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 175,
	0, 0, 134, 227, 228, 0, 137, 0, 108, 181,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 91, 0,
	93, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 0, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 175, 0,
	0, 134, 227, 228, 0, 137, 0, 108, 181, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 93,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 1941, 120, 0, 175, 0, 0,
	134, 227, 228, 0, 137, 0, 108, 181, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 0, 93, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 1412, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 0, 159, 0, 0, 96, 0, 693,
	0, 0, 0, 0, 120, 0, 175, 0, 0, 134,
	227, 228, 0, 137, 0, 108, 181, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 695, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 208, 0, 0, 0,
	166, 0, 112, 0, 187, 124, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 173, 160, 199,
	0, 161, 171, 138, 191, 167, 198, 0, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 0, 0, 182, 201, 218, 219,
	0, 0, 0, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 0, 174,
	111, 200, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 95, 103, 136, 0, 215, 0, 168, 122,
	202, 0, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 175, 0, 0, 134, 227,
	228, 0, 137, 0, 108, 181, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 91, 0, 93, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	23, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	159, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	120, 0, 175, 0, 0, 134, 227, 228, 0, 137,
	0, 108, 181, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 0, 0, 844, 0, 0, 845, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 0, 159,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 120,
	0, 175, 0, 0, 134, 227, 228, 0, 137, 0,
	108, 181, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 93, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 0, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 804, 174, 111, 200, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 714,
	175, 0, 0, 134, 227, 228, 0, 137, 0, 108,
	181, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 713, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 693, 0, 0, 0, 0, 120, 0, 175,
	0, 0, 134, 227, 228, 0, 137, 0, 108, 181,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	695, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 0, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 691, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 671, 120, 0, 175, 0,
	0, 134, 227, 228, 0, 137, 0, 108, 181, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 93,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 346,
	168, 122, 202, 0, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 175, 0, 0,
	0, 134, 227, 228, 0, 137, 108, 0, 181, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 93,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 159, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 120, 0, 175, 0, 0,
	134, 227, 228, 0, 137, 0, 108, 181, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 93, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 143, 208, 0, 0,
	0, 166, 0, 112, 0, 187, 124, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 173, 160,
	199, 0, 161, 171, 138, 191, 167, 198, 0, 209,
	210, 189, 207, 176, 104, 154, 94, 165, 172, 0,
	113, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 188, 197,
	110, 177, 100, 195, 184, 186, 145, 130, 131, 179,
	98, 99, 0, 170, 119, 164, 123, 118, 157, 185,
	148, 192, 193, 115, 217, 117, 116, 183, 105, 205,
	206, 102, 106, 204, 153, 158, 156, 203, 190, 196,
	146, 142, 0, 101, 194, 144, 141, 133, 0, 121,
	125, 162, 140, 163, 126, 150, 149, 151, 0, 0,
	155, 127, 0, 0, 0, 0, 0, 182, 201, 218,
	219, 0, 0, 0, 211, 212, 213, 214, 0, 0,
	0, 152, 107, 128, 178, 132, 139, 169, 216, 0,
	174, 111, 200, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 95, 103, 136, 0, 215, 0, 168,
	122, 202, 0, 0, 159, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 120, 0, 175, 0, 0, 134,
	227, 228, 0, 137, 0, 108, 181, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 93, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 208, 0, 0, 0,
	166, 0, 112, 0, 187, 124, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 173, 160, 199,
	0, 161, 171, 138, 191, 167, 198, 0, 209, 210,
	189, 207, 176, 104, 154, 94, 165, 172, 0, 113,
	0, 220, 221, 222, 223, 224, 225, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 188, 197, 110,
	177, 100, 195, 184, 186, 145, 130, 131, 179, 98,
	99, 0, 170, 119, 164, 123, 118, 157, 185, 148,
	192, 193, 115, 217, 117, 116, 183, 105, 205, 206,
	102, 106, 204, 153, 158, 156, 203, 190, 196, 146,
	142, 0, 101, 194, 144, 141, 133, 0, 121, 125,
	162, 140, 163, 126, 150, 149, 151, 0, 0, 155,
	127, 0, 0, 0, 0, 0, 182, 201, 218, 219,
	0, 0, 0, 211, 212, 213, 214, 0, 0, 0,
	152, 107, 128, 178, 132, 139, 169, 216, 0, 174,
	111, 200, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 95, 103, 136, 0, 215, 0, 168, 122,
	202, 0, 0, 159, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 120, 0, 175, 0, 0, 134, 227,
	228, 0, 137, 0, 108, 181, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 208, 0, 0, 0, 166,
	0, 112, 0, 187, 124, 0, 135, 0, 0, 0,
	1412, 0, 0, 0, 114, 0, 173, 160, 199, 0,
	161, 171, 138, 191, 167, 198, 0, 209, 210, 189,
	207, 176, 104, 154, 94, 165, 172, 0, 113, 0,
	220, 221, 222, 223, 224, 225, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 188, 197, 110, 177,
	100, 195, 184, 186, 145, 130, 131, 179, 98, 99,
	0, 170, 119, 164, 123, 118, 157, 185, 148, 192,
	193, 115, 217, 117, 116, 183, 105, 205, 206, 102,
	106, 204, 153, 158, 156, 203, 190, 196, 146, 142,
	0, 101, 194, 144, 141, 133, 0, 121, 125, 162,
	140, 163, 126, 150, 149, 151, 0, 0, 155, 127,
	0, 0, 0, 0, 0, 182, 201, 218, 219, 0,
	0, 0, 211, 212, 213, 214, 0, 0, 0, 152,
	107, 128, 178, 132, 139, 169, 216, 0, 174, 111,
	200, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 95, 103, 136, 0, 215, 0, 168, 122, 202,
	0, 0, 159, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 120, 0, 175, 0, 0, 134, 227, 228,
	0, 137, 0, 108, 181, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 208, 0, 0, 0, 166, 0,
	112, 0, 187, 124, 0, 135, 0, 0, 0, 1533,
	0, 0, 0, 114, 0, 173, 160, 199, 0, 161,
	171, 138, 191, 167, 198, 0, 209, 210, 189, 207,
	176, 104, 154, 94, 165, 172, 0, 113, 0, 220,
	221, 222, 223, 224, 225, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 188, 197, 110, 177, 100,
	195, 184, 186, 145, 130, 131, 179, 98, 99, 0,
	170, 119, 164, 123, 118, 157, 185, 148, 192, 193,
	115, 217, 117, 116, 183, 105, 205, 206, 102, 106,
	204, 153, 158, 156, 203, 190, 196, 146, 142, 0,
	101, 194, 144, 141, 133, 0, 121, 125, 162, 140,
	163, 126, 150, 149, 151, 0, 0, 155, 127, 0,
	0, 0, 0, 0, 182, 201, 218, 219, 0, 0,
	0, 211, 212, 213, 214, 0, 0, 0, 152, 107,
	128, 178, 132, 139, 169, 216, 0, 174, 111, 200,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	95, 103, 136, 0, 215, 0, 168, 122, 202, 0,
	0, 159, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 120, 0, 175, 0, 0, 134, 227, 228, 0,
	137, 0, 108, 181, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 93, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 208, 0, 0, 0, 166, 0, 112,
	0, 187, 124, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 173, 160, 199, 0, 161, 171,
	138, 191, 167, 198, 0, 209, 210, 189, 207, 176,
	104, 154, 94, 165, 172, 0, 113, 0, 220, 221,
	222, 223, 224, 225, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 188, 197, 110, 177, 100, 195,
	184, 186, 145, 130, 131, 179, 98, 99, 0, 170,
	119, 164, 123, 118, 157, 185, 148, 192, 193, 115,
	217, 117, 116, 183, 105, 205, 206, 102, 106, 204,
	153, 158, 156, 203, 190, 196, 146, 142, 0, 101,
	194, 144, 141, 133, 0, 121, 125, 162, 140, 163,
	126, 150, 149, 151, 0, 0, 155, 127, 0, 0,
	0, 0, 0, 182, 201, 218, 219, 0, 0, 0,
	211, 212, 213, 214, 0, 0, 0, 152, 107, 128,
	178, 132, 139, 169, 216, 0, 174, 111, 200, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 95,
	103, 136, 0, 215, 0, 168, 122, 202, 0, 0,
	159, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	120, 0, 175, 0, 0, 134, 227, 228, 0, 137,
	0, 108, 181, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 695, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 208, 0, 0, 0, 166, 0, 112, 0,
	187, 124, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 173, 160, 199, 0, 161, 171, 138,
	191, 167, 198, 0, 209, 210, 189, 207, 176, 104,
	154, 94, 165, 172, 0, 113, 0, 220, 221, 222,
	223, 224, 225, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 188, 197, 110, 177, 100, 195, 184,
	186, 145, 130, 131, 179, 98, 99, 0, 170, 119,
	164, 123, 118, 157, 185, 148, 192, 193, 115, 217,
	117, 116, 183, 105, 205, 206, 102, 106, 204, 153,
	158, 156, 203, 190, 196, 146, 142, 0, 101, 194,
	144, 141, 133, 0, 121, 125, 162, 140, 163, 126,
	150, 149, 151, 0, 0, 155, 127, 0, 0, 0,
	0, 0, 182, 201, 218, 219, 0, 0, 0, 211,
	212, 213, 214, 0, 0, 0, 152, 107, 128, 178,
	132, 139, 169, 216, 0, 174, 111, 200, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 95, 103,
	136, 0, 215, 0, 168, 122, 202, 0, 0, 159,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 120,
	0, 175, 0, 0, 134, 227, 228, 0, 137, 0,
	108, 181, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 208, 0, 0, 0, 166, 0, 112, 0, 187,
	124, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 173, 160, 199, 0, 161, 171, 138, 191,
	167, 198, 0, 209, 210, 189, 207, 176, 104, 154,
	94, 165, 172, 0, 113, 0, 220, 221, 222, 223,
	224, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 188, 197, 110, 177, 100, 195, 184, 186,
	145, 130, 131, 179, 98, 99, 0, 170, 119, 164,
	123, 118, 157, 185, 148, 192, 193, 115, 217, 117,
	116, 183, 105, 205, 206, 102, 106, 204, 153, 158,
	156, 203, 190, 196, 146, 142, 0, 101, 194, 144,
	141, 133, 0, 121, 125, 162, 140, 163, 126, 150,
	149, 151, 0, 0, 155, 127, 0, 0, 0, 0,
	0, 182, 201, 218, 219, 0, 0, 0, 211, 212,
	213, 214, 0, 0, 0, 152, 107, 128, 178, 132,
	139, 169, 216, 0, 174, 111, 200, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 95, 103, 136,
	0, 215, 0, 168, 122, 202, 0, 0, 159, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 120, 0,
	175, 0, 0, 134, 227, 228, 0, 137, 589, 108,
	181, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 567, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	208, 0, 0, 0, 166, 0, 112, 0, 187, 124,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 173, 160, 199, 0, 161, 171, 138, 191, 167,
	198, 0, 209, 210, 189, 207, 176, 104, 154, 94,
	165, 172, 0, 113, 0, 220, 221, 222, 223, 224,
	225, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 188, 197, 110, 177, 100, 195, 184, 186, 145,
	130, 131, 179, 98, 99, 0, 170, 119, 164, 123,
	118, 157, 185, 148, 192, 193, 115, 217, 117, 116,
	183, 105, 205, 206, 102, 106, 204, 153, 158, 156,
	203, 190, 196, 146, 142, 0, 101, 194, 144, 141,
	133, 0, 121, 125, 162, 140, 163, 126, 150, 149,
	151, 0, 0, 155, 127, 0, 0, 0, 0, 0,
	182, 201, 218, 219, 0, 0, 0, 211, 212, 213,
	214, 0, 0, 0, 152, 107, 128, 178, 132, 139,
	169, 216, 0, 174, 111, 200, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 95, 103, 136, 0,
	215, 0, 168, 122, 202, 0, 0, 159, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 120, 0, 175,
	0, 0, 134, 227, 228, 0, 137, 0, 108, 181,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	493, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 208,
	0, 0, 0, 166, 0, 112, 0, 187, 124, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	173, 160, 199, 0, 161, 171, 138, 191, 167, 198,
	0, 209, 210, 189, 207, 176, 104, 154, 94, 165,
	172, 0, 113, 0, 220, 221, 222, 223, 224, 225,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	188, 197, 110, 177, 100, 195, 184, 186, 145, 130,
	131, 179, 98, 99, 0, 170, 119, 164, 123, 118,
	157, 185, 148, 192, 193, 115, 217, 117, 116, 183,
	105, 205, 206, 102, 106, 204, 153, 158, 156, 203,
	190, 196, 146, 142, 0, 101, 194, 144, 141, 133,
	0, 121, 125, 162, 140, 163, 126, 150, 149, 151,
	0, 0, 155, 127, 0, 0, 0, 0, 0, 182,
	201, 218, 219, 0, 0, 0, 211, 212, 213, 214,
	0, 0, 0, 152, 107, 128, 178, 132, 139, 169,
	216, 0, 174, 111, 200, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 95, 103, 136, 0, 215,
	0, 168, 122, 202, 0, 0, 159, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 120, 0, 175, 0,
	0, 134, 227, 228, 0, 137, 0, 108, 181, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 208, 0,
	0, 0, 166, 0, 112, 0, 187, 124, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 173,
	160, 199, 0, 161, 171, 138, 191, 167, 198, 0,
	209, 210, 189, 207, 176, 104, 154, 94, 165, 172,
	0, 113, 0, 220, 221, 222, 223, 224, 225, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 188,
	197, 110, 177, 100, 195, 184, 186, 145, 130, 131,
	179, 98, 99, 0, 170, 119, 164, 123, 118, 157,
	185, 148, 192, 193, 115, 217, 117, 116, 183, 105,
	205, 206, 102, 106, 204, 153, 158, 156, 203, 190,
	196, 146, 142, 0, 101, 194, 144, 141, 133, 0,
	121, 125, 162, 140, 163, 126, 150, 149, 151, 0,
	0, 155, 127, 0, 0, 0, 0, 0, 182, 201,
	218, 219, 0, 0, 0, 211, 212, 213, 214, 0,
	0, 0, 152, 107, 128, 178, 132, 139, 169, 216,
	0, 174, 111, 200, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 95, 103, 136, 0, 215, 0,
	168, 122, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 108,
}

var yyPact = [...]int16{
	2755, -1000, -218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1463, 1559, -1000, -1000, -1000, -1000, -1000, -1000, 1297,
	192, 287, 308, 256, 17547, 307, 2909, 17856, -1000, 129,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1182, -1000, -1000,
	-1000, -1000, -1000, 1432, 1461, 1250, 1430, 1344, -1000, 8263,
	284, 14765, 17238, 6667, -1000, 20019, -164, 298, 295, 20328,
	278, 278, 20328, 20328, 17856, 306, 278, -1000, -91, 305,
	17856, -1000, 17856, 280, 1052, 280, 280, 280, 17856, -1000,
	474, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17856,
	1038, 1387, 267, 5303, 5303, 5303, 5303, 197, 5303, -1,
	1311, -1000, -1000, -1000, -1000, 5303, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 915, 1391, 8894, 8894,
	1463, -1000, 1182, -1000, -1000, -1000, 1373, -1000, -1000, 706,
	1537, -1000, 11984, 456, -1000, 8894, 148, 1062, -1000, -1000,
	-186, 1062, -1000, -1000, 328, -1000, -1000, -1000, 9821, 9821,
	9821, 9821, 9821, 9821, 9821, -1000, -1000, -1000, -1000, 25,
	868, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	453, -1000, 8585, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
	1062, 8894, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
	1062, 2421, 1062, 1062, 1062, 1062, -1000, 16928, 1186, 1493,
	-1000, -1000, -1000, 1422, 13529, 16619, 17856, 1115, -1000, 1203,
	6326, -61, -1000, -1000, -1000, 604, 451, 16310, -1000, -1000,
	-1000, 1383, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1050, -1000, 12293, 12293, 303, -1000, -1000, 278, 278, 1277,
	984, 671, 968, 1310, 360, 1420, 278, 17856, -1000, 16001,
	5303, 292, 17856, 1411, 1309, 17856, 967, 964, -1000, 5985,
	-1000, 5303, 5303, 5303, 5303, 5303, 5303, 5303, 5303, -1000,
	-1000, -1000, -1000, -1000, -1000, 5303, 5303, -1000, -9, -1000,
	17856, -1000, -1000, -1000, -1000, 1554, 519, 769, 450, 1204,
	-1000, 837, 1432, 915, 1344, 15692, 1314, -1000, -1000, 17856,
	-1000, 8894, 8894, 698, -1000, 19710, -1000, -1000, 3939, 527,
	9821, 740, 663, 9821, 9821, 9821, 9821, 9821, 9821, 9821,
	9821, 9821, 9821, 9821, 9821, 9821, 9821, 9821, 862, 2493,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 937, -1000, 692, -1000, 1182, 11366, 11366, 33,
	33, 33, 33, 33, 33, 19401, -1000, -231, 7645, -1000,
	7008, 915, 1033, 568, 8585, 8263, 8263, 8894, 8894, 9821,
	18783, 8263, 1424, 660, 568, 18783, -1000, 915, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 84, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8263, 8263, 8263, 8263,
	215, 17856, -1000, 18783, 14765, 14765, 14765, 14765, 14765, -1000,
	1336, 1333, -1000, 1326, 1324, 1338, 17856, -1000, 1045, 13529,
	559, 1062, -1000, 19092, -1000, -1000, 215, 1175, 14765, 17856,
	-1000, -1000, 5644, 1203, -61, 1200, -1000, -50, -28, 7336,
	7008, 502, -1000, -1000, -1000, -1000, 163, 12911, 134, -135,
	13, -1000, -1000, -1000, -1000, -1000, 1241, -1000, -1000, -1000,
	1241, 260, 1241, 1241, 1241, -1000, 1241, 1241, 51, 51,
	51, 51, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1296, 1294, -1000, 1241, 1241, 1241, 1241, 1241, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1272, 293,
	1272, 1252, 1252, -1000, -1000, 134, 15383, 17856, 17856, -125,
	931, 5303, 1410, 5303, 17856, 1518, 17856, -1000, -1000, -1000,
	12293, 17856, -1000, 2134, 17856, -1000, 17856, -1000, -1000, 17856,
	5303, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 599, -1000, -1000, -1000,
	-1000, 1352, 8894, 8894, 4621, 8894, -1000, -1000, -1000, 1391,
	-1000, 1424, 1444, -1000, 1368, 1362, 8263, -1000, -1000, 527,
	620, -1000, -1000, 779, -1000, -1000, -1000, -1000, 447, 1062,
	-1000, 2106, -1000, -1000, -1000, -1000, 740, 9821, 9821, 9821,
	2016, 2106, 2070, 2136, 396, 33, 16, 16, 56, 56,
	56, 56, 56, 787, 787, -1000, -1000, -1000, -1000, -118,
	-1000, 1241, 1272, 293, 1272, 1252, 1252, -1000, -1000, 915,
	55, -128, -1000, -1000, -1000, -1000, -1000, -1000, -186, 884,
	-1000, -1000, 871, 915, 8263, 1033, 1202, 11984, -1000, -1000,
	-1000, 8894, -1000, 915, 1013, 1013, 662, 763, 627, 973,
	1167, -1000, 444, 1013, 8263, 682, -1000, 8894, 915, -1000,
	-1000, 1013, 915, 1013, 1013, 1126, 1062, -1000, 1180, -1000,
	602, 1493, 1290, 1308, 994, -1000, -1000, -1000, -1000, 1328,
	-1000, 1325, -1000, -1000, -1000, -1000, -119, 302, 301, 294,
	20328, -1000, 1500, 14765, 1172, -1000, -1000, 1200, -61, -21,
	-1000, -1000, -1000, -1000, 568, 587, -1000, -1000, 922, 7008,
	1197, 1374, -1000, -1000, -1000, -1000, -1000, -1000, 1286, 791,
	20328, 254, 246, 506, 462, 905, -1000, -1000, -1000, 801,
	-1000, 20328, -1000, 1553, -1000, -1000, 253, -1000, 250, 668,
	880, 17856, 159, 1284, 10439, 864, -1000, -239, -1000, 1,
	-1000, -1000, 823, 51, 51, 1241, 51, 51, 51, -1000,
	-1000, 502, 1376, 502, 502, 502, 502, 875, 875, -128,
	-128, -1000, -1000, -1000, -1000, 863, 1272, -1000, -1000, -1000,
	858, -1000, 1276, 17856, 20328, 1418, 1417, -1000, 7008, -1000,
	-1000, -1000, -1000, -1000, 1416, 1146, -1000, -1000, -1000, -1000,
	374, -1000, 1291, -1000, 1199, 1867, 492, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 214, 319,
	-1000, 5303, -1000, 650, 17856, 17856, 1349, 568, 568, 442,
	-1000, -1000, 17856, -1000, -1000, -1000, -1000, 1148, -1000, -1000,
	-1000, 4962, 8263, -1000, 2016, 2106, 773, -1000, 9821, 9821,
	103, -1000, -1000, -1000, 100, 99, 61, -1000, -186, -1000,
	1013, -1000, 8263, 568, -1000, -1000, -1000, 1305, 862, 1305,
	9821, 9821, 9821, 9821, 9821, 4621, -108, 1170, 656, -1000,
	8894, 685, -1000, -1000, -1000, -1000, -1000, 1306, 18783, 1062,
	-1000, 15074, 20328, 1463, 18783, 8894, 8894, -1000, -1000, 8894,
	1270, -1000, 8894, -1000, -1000, -1000, -1000, 1269, 1062, 1062,
	1062, 1000, -1000, 1463, 1172, -1000, -1000, -1000, -68, -75,
	-1000, 8894, -1000, 4280, -1000, 163, -1000, 18165, -1000, 1551,
	1447, 264, 0, -1000, 899, 891, -1000, 889, -1000, -1000,
	28, -1000, -163, 116, -2, -1000, -1000, 1062, -1000, 1267,
	1415, -1000, 1392, 856, -1000, 10130, -182, -1000, -1000, -186,
	-1000, -1000, -1000, 1062, -1000, 1265, 1255, -1000, 1240, 1062,
	441, -1000, -1000, -1000, -1000, -1000, 1100, 502, 502, 51,
	502, 502, 502, -1000, 546, -1000, -1000, -1000, -1000, 1011,
	-1000, 1008, -1000, -1000, 1193, -1000, 1005, 17856, 20328, 1253,
	1304, 1182, 1182, 1192, -1000, 581, 1443, 189, 17856, 1518,
	1518, 20328, -1000, 243, 20328, -1000, 20328, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20328, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17856, -1000, -1000,
	-1000, -1000, -1000, 20328, 273, -1000, -1000, 873, 8894, -1000,
	-1000, -1000, 7008, -1000, 1500, 14765, -1000, -1000, 915, -1000,
	9821, 2106, 2106, 10, 9, 7, -1000, 871, -1000, -1000,
	-1000, 915, 1241, 1241, -1000, 1241, 1252, -1000, -1000, 1241,
	118, 1241, 117, 915, 915, 366, 493, 424, 349, 202,
	-1000, 1062, -99, -1000, 568, 8894, -1000, 1394, 1114, 1174,
	-1000, -1000, 7954, 915, 1003, 401, 1000, 1432, -1000, 568,
	568, 568, 18474, 568, -205, 18474, 18474, 18474, 14456, 20328,
	1432, -1000, -1000, -1000, -1000, 568, 3598, -1000, 7008, 998,
	-1000, 269, 1241, 541, 541, -169, 247, 245, 1062, -1000,
	-1000, -1000, -1000, -164, -1000, -1000, 668, -1000, 1240, 8894,
	18474, 156, -1000, 1187, 1083, 10748, -1000, 13220, -1000, 915,
	-1000, 852, -1000, 840, 1082, 7008, -1000, -1000, -1000, 502,
	-1000, -1000, -1000, -1000, -1000, 51, 792, 51, 851, -1000,
	845, 1191, 1302, 14147, 17856, -1000, -1000, 7008, 3598, 290,
	1513, -1000, -1000, 1439, -1000, 1116, 1237, 20328, -1000, -1000,
	257, -1000, 1235, -1000, -1000, -1000, -1000, 1406, 20328, -1000,
	-1000, 568, 1496, 1185, -1000, 2106, -1000, -1000, -1000, -1000,
	-1000, -1000, 255, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9821, 9821, -1000, 9821, 9821, 9821, 915, 780,
	568, 244, -1000, 1062, -1000, -1000, 1189, 20328, 20328, -1000,
	-1000, 995, -1000, -1000, 993, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 975, 975, 975, 559, -1000, -1000, -1000, -1000,
	-1000, -1000, 969, 18165, 1401, -1000, -1000, -1000, 749, -1000,
	-1000, 695, 173, 747, -1000, 20328, -164, 8894, -1000, 1062,
	623, 963, 8894, 1223, 839, -1000, 1073, -1000, 55, -128,
	-1000, -1000, -1000, -1000, -1000, -1000, 1062, -1000, 502, -1000,
	502, 1070, 1069, 14147, 20328, 17856, 1067, 1178, -1000, 241,
	1219, -1000, -1000, 20328, -1000, -1000, -1000, -1000, -1000, 166,
	2818, -1000, 12602, 1218, 1217, 18474, 1062, 271, 1491, 1456,
	-1000, -1000, 366, 366, 366, 366, 49, -1000, -1000, 1545,
	-1000, 1062, -1000, 1182, 375, -1000, 20328, -1000, -1000, -205,
	-1000, -1000, -1000, -119, 1194, 2344, 157, -1000, 887, 577,
	756, 562, 560, 557, 551, 540, 538, 537, -1000, -1000,
	-1000, 1542, -1000, -1000, -1000, 1514, 1216, -1000, 1215, 623,
	8894, 176, 1301, 755, -1000, 1064, 1063, -1000, -1000, -1000,
	-1000, 1061, 1211, 1210, -172, 823, 14147, 1060, -1000, 158,
	2818, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1463, 20328, 20328, 20328, 20328, 347, 9512, 8894, 1056, 11057,
	12602, 12602, 11057, 12602, 12602, 18165, 18165, 961, 209, 233,
	-1000, 8894, 8894, -1000, -1000, -1000, -1000, 915, 160, -137,
	18783, 1174, 915, 20328, -1000, -1000, -1000, -1000, 20328, -1000,
	-131, 2344, 20328, -1000, 822, -1000, -1000, 835, 802, 835,
	835, 835, 835, 835, 541, 541, 20328, 18165, 176, 623,
	-1000, -105, 1548, -146, 219, -1000, -1000, -172, 14147, 18165,
	1500, 1207, 1054, -120, 20328, 8894, 2784, -1000, 1432, 1169,
	11675, -1000, -1000, -1000, -1000, 20328, 1536, 1535, 1524, 1519,
	2133, 148, 582, 133, -1000, -1000, 11057, -1000, -1000, -1000,
	-1000, -1000, 956, 945, 1277, 943, -1000, 20328, 1206, 568,
	1139, -1000, 1347, -112, -140, 1117, -1000, -1000, 1062, 941,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 668, 668, 930, 920, -1000, 176, -1000, 541,
	541, -1000, -1000, -1000, 141, 795, 799, 793, 765, 24,
	-1000, 1452, 1500, 976, 918, 969, 18474, -172, -1000, -204,
	-1000, 568, -1000, -1000, 2818, 1391, 20328, 150, -1000, -1000,
	1398, -1000, -1000, -1000, -1000, -1000, 2818, 2818, 2818, -1000,
	291, -125, -1000, 209, 1360, 18165, -1000, 1340, -1000, 20328,
	-1000, 2344, -1000, -1000, 263, 969, -1000, -1000, -1000, 723,
	-1000, 716, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13838,
	969, 1500, 969, 1194, 914, 1500, 8894, -219, -1000, -1000,
	12293, 1434, 20328, 2749, -1000, 187, 2740, 139, -1000, 146,
	-1000, -1000, 200, 912, -133, 915, -1000, 17856, 1194, -1000,
	-1000, -1000, 371, 1194, 969, -1000, -1000, -1000, 969, 568,
	637, 1182, -1000, -1000, -1000, 583, 624, -1000, 142, -1000,
	193, -1000, -138, -1000, 1183, -1000, 7008, -1000, -1000, 1194,
	-1000, -1000, 277, 132, -1000, -1000, 1062, -142, 20328, -1000,
	-1000, -1000, 2818, 9203, -1000, 898, 2658, 366, 915, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 1825, 22, 21, 1824, 1821, 1816, 1591, 1585, 1577,
	1571, 1814, 1813, 1811, 1807, 1806, 1805, 1802, 1801, 1797,
	1796, 1794, 1790, 1788, 1779, 1778, 1777, 1775, 519, 1774,
	1772, 1771, 105, 1767, 109, 1766, 1765, 76, 189, 93,
	72, 1786, 1764, 55, 106, 103, 1763, 91, 1762, 1761,
	167, 1750, 108, 1747, 1746, 142, 1745, 1744, 43, 16,
	25, 67, 1742, 1739, 107, 147, 1737, 1736, 1735, 34,
	1734, 1730, 100, 20, 37, 42, 46, 1728, 73, 18,
	1725, 92, 1724, 1720, 1719, 1717, 39, 1716, 80, 40,
	36, 12, 1715, 19, 13, 102, 61, 49, 29, 133,
	95, 1714, 66, 101, 88, 1713, 1710, 951, 1709, 1706,
	1704, 1701, 1700, 1699, 818, 110, 1698, 1697, 1696, 84,
	0, 758, 64, 116, 1686, 78, 1685, 1757, 120, 104,
	48, 1684, 52, 1782, 74, 1683, 1682, 69, 115, 8,
	113, 111, 1681, 114, 1680, 1679, 1678, 228, 65, 50,
	54, 1675, 1673, 1672, 87, 85, 56, 86, 94, 28,
	1668, 1667, 1666, 53, 1662, 44, 31, 1, 90, 1659,
	1657, 1653, 1651, 51, 59, 1647, 33, 1646, 24, 10,
	5, 7, 9, 1644, 1642, 1639, 3, 1637, 47, 1636,
	11, 1633, 17, 1627, 1626, 1625, 82, 1624, 1623, 1622,
	26, 1621, 1620, 32, 15, 68, 71, 1619, 1616, 171,
	79, 57, 1615, 58, 4, 2, 27, 1614, 6, 1613,
	1612, 1611, 14, 30, 1610, 1609, 1608, 1606, 1605, 1603,
	45, 1602, 1601, 1166, 265, 1600, 1598, 41, 1583, 1580,
	1567, 1565, 680,
}

var yyR1 = [...]uint8{
	0, 231, 232, 232, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 235,
	235, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 219, 219, 218, 220, 220, 12, 12, 12, 12,
	12, 212, 212, 212, 212, 212, 13, 13, 215, 215,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	236, 236, 237, 237, 237, 237, 237, 237, 237, 210,
	210, 210, 211, 211, 211, 213, 213, 214, 214, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 217, 217,
	194, 194, 194, 195, 195, 195, 195, 195, 195, 197,
	197, 198, 198, 125, 125, 192, 192, 191, 190, 190,
	189, 189, 188, 199, 199, 20, 170, 171, 171, 171,
	171, 171, 171, 171, 158, 158, 139, 139, 139, 139,
	139, 139, 139, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 205,
	205, 205, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 207, 208, 201, 201, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	148, 148, 148, 148, 148, 148, 200, 200, 196, 196,
	196, 196, 196, 196, 196, 196, 143, 143, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 142, 142,
	142, 142, 142, 142, 142, 142, 144, 144, 144, 144,
	144, 144, 144, 144, 140, 140, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 157, 157, 147,
	147, 155, 155, 156, 156, 156, 154, 154, 154, 151,
	151, 152, 152, 153, 153, 153, 149, 149, 149, 150,
	150, 150, 160, 181, 181, 181, 183, 183, 184, 184,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 169, 169, 209, 209, 180, 180, 180, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 168, 168, 178,
	178, 179, 179, 176, 176, 176, 177, 163, 163, 163,
	163, 163, 164, 165, 165, 165, 165, 161, 162, 203,
	203, 203, 204, 204, 166, 166, 167, 167, 174, 174,
	174, 174, 238, 238, 172, 172, 173, 173, 173, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 239, 239, 240, 240, 240, 240, 240,
	240, 240, 187, 185, 185, 186, 186, 17, 18, 18,
	18, 18, 18, 19, 19, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 112,
	112, 109, 109, 110, 110, 111, 111, 111, 113, 113,
	113, 136, 136, 136, 23, 23, 25, 25, 26, 27,
	24, 24, 24, 24, 24, 241, 28, 29, 29, 30,
	30, 30, 34, 34, 34, 32, 32, 33, 33, 39,
	39, 38, 38, 40, 40, 40, 40, 124, 124, 124,
	123, 123, 42, 42, 43, 43, 44, 44, 45, 45,
	45, 222, 222, 221, 221, 223, 223, 223, 223, 223,
	223, 57, 57, 93, 93, 93, 96, 96, 46, 46,
	46, 46, 47, 47, 48, 48, 49, 49, 131, 131,
	130, 130, 130, 129, 129, 51, 51, 51, 53, 52,
	52, 52, 52, 54, 54, 56, 56, 55, 55, 58,
	58, 58, 58, 59, 59, 94, 94, 41, 41, 41,
	41, 41, 41, 41, 108, 108, 61, 61, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 71, 71,
	71, 71, 71, 71, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 37, 37, 72, 72, 72,
	78, 73, 73, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	69, 69, 69, 69, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 242, 242,
	70, 70, 70, 70, 35, 35, 35, 35, 35, 134,
	134, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 138, 82, 82, 36, 36, 80, 80, 81,
	83, 83, 79, 79, 79, 224, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 66, 66, 66, 84,
	84, 85, 85, 86, 86, 87, 87, 88, 89, 89,
	89, 90, 90, 90, 90, 91, 91, 91, 63, 63,
	63, 63, 63, 63, 92, 92, 92, 92, 97, 97,
	74, 74, 76, 76, 75, 77, 98, 98, 102, 99,
	99, 103, 103, 103, 103, 103, 101, 101, 101, 126,
	126, 126, 106, 106, 114, 114, 115, 115, 107, 107,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	117, 117, 117, 118, 118, 121, 121, 122, 122, 127,
	127, 127, 128, 128, 225, 225, 225, 226, 226, 226,
	227, 227, 228, 229, 229, 230, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 233, 234, 132, 133,
	133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 15, 13, 14,
	7, 7, 5, 5, 5, 11, 11, 9, 5, 8,
	0, 3, 0, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 4,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 0, 1, 3,
	3, 3, 3, 3, 2, 2, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 3, 2, 4, 2, 4,
	2, 2, 3, 2, 3, 2, 7, 9, 3, 3,
	6, 9, 9, 8, 8, 5, 8, 7, 4, 2,
	4, 6, 2, 1, 1, 2, 1, 1, 1, 3,
	3, 1, 2, 1, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 3,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 2, 2, 1, 1, 1, 3, 3, 2,
	2, 2, 1, 1, 1, 1, 4, 4, 4, 4,
	4, 1, 5, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 2, 3, 4, 1, 1, 1,
	1, 1, 3, 3, 2, 2, 1, 2, 5, 5,
	8, 8, 13, 1, 1, 2, 2, 10, 7, 0,
	1, 1, 0, 3, 0, 1, 1, 3, 0, 4,
	1, 3, 2, 1, 1, 2, 1, 1, 1, 6,
	11, 13, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 0, 4, 1, 3, 1, 1, 1, 1, 1,
	1, 4, 8, 1, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 0, 4, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 6, 2, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 2,
	4, 5, 6, 4, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 1, 2,
	1, 2, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 3, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 5, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 2, 0, 2, 2,
	0, 1, 4, 1, 3, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -231, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 31, -20,
	120, 121, 123, 122, 153, 124, 146, 52, 200, 201,
	203, 204, 26, 147, 148, 151, 152, -233, 8, 307,
	56, -232, 349, -86, 15, -30, 5, -28, -241, -28,
	-28, -28, -28, -28, -170, 56, -125, -199, 129, 162,
	299, 126, 142, 160, 161, 325, 127, 144, 74, -107,
	130, 132, 127, 127, 128, 130, 299, 126, 127, -55,
	-127, 59, -120, 61, 169, 316, 21, 200, 213, 214,
	205, 246, 234, 317, 167, 231, 235, 285, 348, 68,
	203, 294, 136, 173, 149, 226, 229, 228, 220, 217,
	28, 252, 323, 219, 139, 253, 257, 264, 286, 314,
	210, 211, 288, 250, 33, 141, 318, 37, 157, 289,
	255, 249, 244, 129, 248, 209, 243, 41, 223, 259,
	258, 260, 284, 237, 168, 263, 239, 221, 238, 18,
	152, 155, 254, 256, 218, 170, 134, 159, 322, 290,
	216, 156, 171, 151, 293, 339, 166, 204, 287, 212,
	296, 40, 270, 230, 207, 222, 208, 138, 201, 164,
	241, 158, 224, 225, 247, 206, 242, 202, 160, 153,
	295, 271, 324, 240, 236, 232, 233, 165, 130, 162,
	163, 277, 278, 279, 280, 320, 291, 227, 272, 273,
	175, 176, 177, 178, 179, 180, 181, 34, 35, 127,
	114, 235, 120, 275, 128, 33, 159, -136, 127, -109,
	163, 277, 278, 279, 280, 59, 287, 286, 281, -127,
	202, -132, -132, -132, -132, -132, -2, -90, 17, 16,
	-5, -3, -233, 6, 21, 22, -34, 42, 43, -29,
	-40, 105, -41, -127, -60, 76, -65, 29, 59, -120,
	61, 24, -64, -61, -79, -224, -77, -78, 114, 115,
	103, 104, 111, 77, 116, -69, -67, -68, -70, -227,
	-121, 60, 69, 62, 63, 64, 65, 70, 71, 72,
	297, -75, -233, 46, 47, 308, 309, 310, 311, 315,
	312, 79, 36, 298, 306, 305, 304, 302, 303, 300,
	301, 347, 133, 299, 109, 307, 261, -107, -43, -44,
	-45, -46, -57, -78, -233, -55, 11, -50, -55, -99,
	-135, 202, -103, 287, 286, -122, 297, -101, -121, -119,
	285, 235, 284, 59, -120, 125, 183, 328, 75, 23,
	25, 268, 274, 182, 78, 114, 16, 79, 189, 337,
	338, 113, 308, 120, 50, 300, 301, 298, 187, 310,
	311, 299, 275, 194, 20, 29, 10, 26, 147, 22,
	107, 122, 184, 82, 83, 150, 24, 148, 72, 190,
	192, 19, 53, 140, 11, 327, 13, 14, 341, 329,
	133, 132, 94, 340, 128, 48, 8, 116, 27, 91,
	44, 145, 193, 46, 92, 17, 302, 303, 32, 315,
	154, 109, 51, 38, 342, 76, 343, 70, 54, 292,
	188, 74, 15, 49, 344, 142, 191, 93, 123, 307,
	47, 185, 345, 126, 186, 6, 313, 31, 146, 45,
	127, 276, 81, 131, 71, 161, 5, 144, 9, 52,
	55, 304, 305, 306, 36, 80, 12, 143, 319, 73,
	-171, -158, -121, 61, -203, 337, 338, 130, 130, -121,
	-115, 133, -115, -121, -121, -55, 127, -115, 307, 127,
	-55, -55, -114, 133, 59, -114, -114, -114, -55, 117,
	-55, 59, 31, 299, 59, 159, 127, 160, 130, -133,
	-233, -122, -133, -133, -133, 164, 165, -133, -110, 282,
	54, -133, -234, 58, -91, 19, 32, -41, -127, -87,
	-88, -41, -86, -2, -28, 38, -32, 22, 67, 11,
	-124, 75, 74, 91, -123, 23, -121, 61, 117, -41,
	-62, 94, 76, 92, 93, 78, 100, 99, 110, 103,
	104, 105, 106, 107, 108, 109, 101, 102, 113, 347,
	84, 85, 86, 87, 88, 89, 90, 95, 96, 97,
	98, -108, -233, -196, 347, -78, -233, 118, 119, -65,
	-65, -65, -65, -65, -65, -65, -228, 262, -233, 61,
	117, -2, -73, -41, -233, -233, -233, -233, -233, -233,
	-233, -233, -233, -82, -41, -233, -242, -233, -242, -242,
	-242, -242, -242, -242, -242, -138, 114, 235, 149, 226,
	-141, -140, 241, 240, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 234, 317, -233, -233, -233, -233,
	-56, 27, -55, 31, 57, -51, -53, -52, -54, 44,
	48, 50, 45, 46, 47, 51, -131, 23, -43, -233,
	-130, 155, -129, 23, -127, 61, -55, -50, -235, 57,
	11, 55, 57, -99, 202, -100, -104, 288, 290, 84,
	117, -126, -121, 61, 29, 31, 58, 57, -159, -139,
	-143, -140, -145, -144, -146, -121, -141, -142, 234, 317,
	231, 235, 232, 237, 238, 239, 114, 236, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 240,
	252, 31, 149, 224, 225, 226, 229, 228, 230, 227,
	253, 254, 255, 256, 257, 258, 259, 260, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 216, 217,
	219, 220, 221, 223, 222, -159, 128, -115, -115, -192,
	55, 59, 76, 59, 54, -210, 54, 19, 182, 183,
	23, -115, -55, -55, 292, -133, 131, -55, 24, 54,
	-55, 59, 59, -128, -127, -119, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -112, 276, 283, -55,
	9, 94, 57, 18, 117, 57, -89, 25, 26, -90,
	-234, -34, -66, -121, 62, 65, -33, 45, -55, -41,
	-41, -71, 70, 76, 71, 72, -123, 105, -128, -122,
	-119, -65, -72, -75, -78, 66, 94, 92, 93, 78,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -134, 59, 61, -143, 225,
	-138, -141, 216, 217, 219, 220, 221, 223, 222, 59,
	235, 225, 265, 116, 241, 250, 251, -64, 61, -121,
	-64, -121, 350, -39, 22, -73, -38, -41, -40, -122,
	-234, 57, -234, -2, -38, -38, -41, -41, -79, -65,
	-79, -121, -127, -38, -32, -80, -81, 80, -79, -234,
	233, -38, -39, -38, -38, -95, 155, -55, -98, -102,
	-79, -44, -45, -45, -44, -45, 44, 44, 44, 49,
	44, 49, 44, -52, -127, -234, -58, 52, 132, 53,
	-233, -129, -95, 55, -43, -55, -103, -100, 57, 289,
	291, 292, 54, 73, -41, -122, -150, 114, 113, -174,
	-238, 320, 35, -158, -160, -163, -161, -162, -175, -164,
	136, 134, 138, 139, 144, -168, 128, 145, 70, 76,
	-205, 136, -207, 54, 268, 274, 134, 145, 144, 348,
	68, 137, 327, 329, 29, 30, -153, 350, 262, -151,
	271, -147, 56, -147, -147, 233, -147, -147, -147, -147,
	-147, -149, 235, -149, -149, -149, -149, 56, 56, -147,
	-147, -147, -147, -147, -155, 56, 218, -155, -155, -156,
	56, -156, -121, 54, 199, -55, -55, -190, 319, -191,
	59, -133, 24, -133, -55, -213, -211, 8, 9, 10,
	-55, -139, -55, -116, 125, 122, 123, -187, 121, 268,
	235, 68, 29, 15, 308, 155, 324, 59, 156, -55,
	-55, -55, -133, -111, 11, 94, 40, -41, -41, -128,
	-88, -91, -106, 19, 11, 36, 36, -38, 70, 71,
	72, 117, -233, -72, -65, -65, -65, -37, 150, 75,
	319, -234, 233, -154, 319, 320, -229, -230, 61, -234,
	-38, -234, 57, -41, -234, -234, -234, 57, 55, 23,
	57, 11, 57, 57, 11, 117, -234, -38, -83, -81,
	82, -41, -234, -234, -234, -234, -234, -63, 31, 36,
	-2, -233, -233, -59, 57, 12, 84, -48, -47, 54,
	55, -49, 54, -47, 44, 44, -222, 319, 128, 128,
	128, -96, -121, -59, -43, -59, -104, -105, 293, 290,
	296, 84, 59, -172, -122, 57, 34, 56, -204, 54,
	76, -166, -121, 145, -168, -168, 59, -168, 59, 128,
	59, 70, 19, -121, 9, 145, 145, -204, 61, -55,
	-201, 328, 16, 56, -206, 56, 61, 62, 63, 70,
	-148, 69, -61, 263, -69, 298, 301, 300, 264, -121,
	-127, -208, 62, 351, -152, 272, 62, -149, -149, -147,
	-149, -149, -149, -150, 31, -150, -150, -150, -150, -157,
	61, -157, -154, -154, 62, -155, 62, 54, 55, -55,
	-121, 23, 23, -189, -188, -122, -194, 23, 54, 57,
	-210, 55, -132, -125, 136, -240, 162, 135, 140, 139,
	59, 134, 138, 155, -193, 162, 135, 136, 140, 139,
	59, 128, 145, 134, 138, 155, 144, -117, -118, 131,
	23, 128, 145, 155, 125, -133, -113, 92, 12, -127,
	-127, 41, 117, -55, -42, 11, 105, -122, -39, -37,
	75, -65, -65, 224, 224, 224, 351, 57, -196, -234,
	-40, -137, 114, 231, 149, 226, 220, 250, 251, 237,
	270, 224, 271, -134, -137, -65, -65, -65, -65, -65,
	-122, 316, -86, 83, -41, 81, -97, 54, -98, -74,
	-76, -75, -233, -2, -92, -121, -96, -86, -102, -41,
	-41, -41, 56, -41, 56, -233, -233, -233, -234, 57,
	-86, -59, 290, 294, 295, -41, 84, -122, -174, -179,
	-176, -121, 145, 10, 9, 19, 140, 134, 348, 59,
	59, 59, -203, 144, 339, -205, 348, -148, 264, -233,
	56, 23, 29, 62, -206, 56, -196, 347, -196, -233,
	-147, 56, -147, 56, 56, 117, 58, -150, -150, -149,
	-150, -150, -150, 59, 114, 58, 57, 58, 57, 58,
	57, -55, -121, 56, 54, -2, -2, 57, 84, -195,
	19, 170, 171, -55, -211, -213, -121, -239, 128, 145,
	-121, -132, -121, -132, -121, -55, -132, -121, 136, -163,
	61, -41, -59, -43, -234, -65, 273, 273, 273, -230,
	-234, -147, -147, -147, -156, -147, 211, -147, 211, -234,
	-234, -234, 19, 57, -234, 57, 19, -233, -36, 313,
	-41, 28, -97, 57, -234, -234, -234, 57, 117, -234,
	-90, -93, -121, 145, -221, -223, 341, 342, 343, 344,
	345, 346, -93, -93, -93, -130, -121, -90, -173, -122,
	61, 62, 58, 57, -147, -177, 266, -147, -165, 166,
	167, 31, 168, -165, 339, 145, 145, -233, -203, -204,
	-41, -93, 56, 329, 57, 58, -206, -121, 235, 225,
	241, 250, -234, 58, 58, 58, -122, -150, -149, 61,
	-149, 62, 62, 56, 55, 54, -178, -179, -69, -121,
	-55, -188, -173, 131, 21, 6, 8, 9, 10, 19,
	23, -236, 56, -121, 144, 56, 27, -121, -84, 13,
	-149, 59, -65, -65, -65, -65, -65, -234, 61, 145,
	-76, 36, -2, -233, -121, -121, 57, 58, 58, 57,
	-234, -234, -234, -58, -181, -183, 319, -182, 55, 141,
	68, 175, 176, 177, 178, 179, 180, 181, -176, -89,
	-204, 54, 70, 169, -204, 54, -166, -121, -203, -41,
	-233, -234, 58, -41, 56, 62, 58, -150, -150, 58,
	58, -178, -121, -55, 58, 56, 56, -167, -121, 184,
	-214, -216, -7, -9, -8, -11, -10, -12, -13, -14,
	-3, 20, 188, 189, 194, 190, 143, 133, -237, -121,
	103, 84, 61, -158, 57, 56, 56, -93, -233, 134,
	-85, 14, 16, -234, -234, -234, -234, -35, 94, 319,
	9, -74, -2, 117, -121, -223, -222, -180, 54, -182,
	319, 56, 321, 59, -169, 84, 61, 84, 84, 84,
	84, 84, 84, 84, 9, 10, 56, 56, -234, -41,
	-200, 168, 54, 58, -202, 58, 58, 58, 56, 56,
	-94, 340, -178, -197, 57, 55, 185, -216, -86, -219,
	-121, -218, -121, -121, -121, -212, 38, 191, 192, 193,
	-60, -65, -41, -60, 58, -237, -121, -237, -237, -237,
	-237, -237, -179, -179, 58, -185, -186, 155, 145, -41,
	-73, -234, 317, 51, 322, -98, -234, -121, -121, -184,
	-182, -121, 62, -209, 54, 73, 62, -209, -209, -209,
	-209, -209, -165, -165, -167, -179, -200, -234, 314, 10,
	9, 325, 326, 58, 201, 331, 332, 154, 333, 168,
	334, 335, -94, -178, -179, -59, 56, 58, -198, 319,
	-121, -41, -217, -216, 200, -90, 57, -220, -139, 186,
	-121, 11, 11, 11, 11, -216, 200, 81, 200, 58,
	58, -192, -234, 57, -121, 56, 41, 318, 323, -233,
	58, 57, -204, -204, 58, 58, -200, -165, -165, 319,
	62, 16, 62, 62, 62, 62, 332, 154, 334, 16,
	-59, 58, 58, -181, -93, -94, 348, -216, -91, -218,
	-121, 187, 27, -215, -216, -214, -215, -225, 195, 76,
	-190, -186, 36, -179, 41, -121, -182, 137, -181, 62,
	62, 336, -127, -181, -59, -181, -180, 58, -59, -41,
	349, 19, -121, 83, -216, 349, 83, -226, 196, 195,
	157, 58, 319, -234, -55, -180, 117, -180, -181, -181,
	83, -2, 83, 82, 198, 197, 158, 322, 56, -122,
	-180, 133, 200, -233, 323, -167, -215, -65, 154, 58,
	83, -234, -234,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 773, 0, 505, 505, 505, 505, 505, 505, 0,
	-2, 828, 0, 0, 0, 0, -2, 495, 496, 0,
	498, 499, 1128, 1128, 1128, 1128, 1128, 0, 33, 34,
	1126, 1, 3, 781, 0, 0, 509, 512, 507, 860,
	828, 0, 0, 0, 84, 157, 389, 0, 0, 0,
	826, 826, 0, 0, 0, 0, 826, 144, 0, 0,
	0, 829, 0, 824, 0, 824, 824, 824, 0, 454,
	587, 849, 850, 851, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 0,
	0, 0, 0, 1129, 1129, 1129, 1129, 0, 1129, 483,
	472, 474, 475, 476, 477, 1129, 492, 493, 482, 494,
	497, 500, 501, 502, 503, 504, 27, 785, 860, 860,
	773, 29, 0, 505, 510, 511, 515, 513, 514, 506,
	0, 523, 527, 0, 597, 860, 602, 604, -2, -2,
	-2, 0, 643, 644, 645, 646, 647, 648, 860, 860,
	860, 860, 860, 860, 860, 675, 676, 677, 678, 0,
	752, 759, 760, 761, 762, 763, 764, 765, 606, 607,
	0, 805, 860, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 708, 708, 708, 708, 708, 708, 708,
	708, 0, 0, 0, 0, 0, 861, 0, 0, 534,
	536, 537, 538, 568, 0, 570, 0, 0, 41, 45,
	0, 1094, 809, -2, -2, 0, 0, 0, 847, 848,
	-2, 1003, -2, 845, 846, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	0, 158, 172, 172, 0, 390, 391, 826, 826, 145,
	0, 0, 0, 0, 0, 0, 826, 0, 154, 0,
	1129, 0, 0, 0, 0, 0, 0, 0, 453, 0,
	455, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 464,
	1130, 1131, 465, 466, 467, 1129, 1129, 469, 0, 484,
	0, 478, 28, 1127, 22, 0, 0, 782, 0, 774,
	775, 778, 781, 27, 512, 0, 517, 516, 508, 0,
	524, 860, 860, 0, 528, 0, 530, 531, 0, 600,
	860, 0, 0, 860, 860, 860, 860, 860, 860, 860,
	860, 860, 860, 860, 860, 860, 860, 860, 0, 0,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 603, 0, 757, 0, 617, 0, 0, 0, 666,
	667, 668, 669, 670, 671, 672, 679, 0, -2, 758,
	0, 27, 0, 641, 860, 860, 860, 860, 860, 860,
	0, 860, 515, 0, 744, 0, 699, 0, 700, 701,
	702, 703, 704, 705, 706, 707, 735, 0, 737, 738,
	739, 740, 741, 742, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 274, 275, 860, -2, 860, 860,
	43, 0, 586, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 578, 0, 0, 0, 0, 569, 0, 0,
	589, 1058, 571, 0, 573, 574, -2, 0, 0, 0,
	39, 40, 0, 46, 1094, 48, 73, 0, 0, 860,
	0, 329, 819, 820, 821, 817, 398, 0, 164, 323,
	319, 167, 168, 169, 170, 171, 309, 247, -2, -2,
	-2, -2, -2, -2, -2, -2, 309, -2, -2, -2,
	-2, -2, 326, -2, -2, -2, -2, -2, 295, -2,
	1018, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 165, 0, 0, 0, 148,
	0, 1129, 0, 1129, 0, 0, 0, 109, 110, 111,
	172, 0, 155, 0, 0, 420, 0, 448, 825, 0,
	1129, 451, 452, 588, 852, 853, 456, 457, 458, 459,
	460, 461, 462, 463, 468, 471, 485, 479, 480, 473,
	786, 0, 860, 860, 0, 860, 777, 779, 780, 785,
	30, 515, 0, 766, 0, 0, 860, 518, 25, 598,
	599, 601, 618, 0, 620, 622, 529, 525, 0, 753,
	-2, 608, 609, 637, 638, 639, 0, 860, 860, 860,
	635, 613, 0, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 663, 719, 720, 664, 0,
	674, 309, 311, 311, 311, 313, 313, 264, 265, 0,
	0, 316, 241, 242, 243, 244, 245, 661, 238, 0,
	662, 673, 0, 0, 860, 0, 520, 527, 521, 755,
	640, 860, 804, 27, 0, 0, 0, 0, 645, 0,
	0, 752, 0, 0, 860, 750, 747, 860, 0, 709,
	736, 0, 0, 0, 0, 0, 0, 585, 593, 806,
	0, 535, 564, 566, 0, 561, 576, 577, 579, 0,
	581, 0, 583, 584, 539, 540, 541, 0, 0, 0,
	0, 572, 593, 0, 593, 42, 810, 47, 0, 0,
	76, 77, 811, 812, 813, 0, 815, 330, 0, 156,
	400, 0, 403, 159, 160, 161, 162, 163, 0, 392,
	-2, 1063, 1084, 1021, 0, 0, 367, 368, 174, 0,
	176, 0, 178, 0, 180, 181, 0, 183, 185, 392,
	0, 0, 0, 0, 0, 0, 173, 0, 325, 321,
	320, 246, 0, 326, 326, 309, 326, 326, 326, 283,
	284, 329, 0, 329, 329, 329, 329, 0, 0, 316,
	316, 269, 270, 271, 258, 0, 311, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 0, 92, 0, 146,
	147, 93, 827, 94, 130, 0, 115, 112, 113, 114,
	0, 98, 0, 1128, 143, 0, 840, 421, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 0, 0,
	447, 1129, 450, 488, 0, 0, 0, 783, 784, 0,
	776, 23, 0, 822, 823, 767, 768, 532, 619, 621,
	623, 0, -2, 610, 635, 614, 0, 611, 860, 860,
	0, 605, 239, 240, 0, 0, 0, 863, 238, 680,
	0, 683, 860, 642, -2, 684, 685, 0, 0, 0,
	860, 860, 860, 860, 860, 0, 0, 773, 0, 748,
	860, 0, 698, 710, 711, 712, 713, 798, 0, 0,
	-2, 0, 0, 773, 0, 860, 860, 558, 565, 860,
	0, 559, 860, 560, 580, 582, 551, 0, 0, 0,
	0, 0, 556, 773, 593, 38, 74, 75, 0, 0,
	81, 860, 331, 0, 404, 398, 402, 0, 377, 0,
	0, 0, 395, 358, 0, 0, 361, 0, 363, -2,
	389, 175, 0, 0, 0, 182, 184, 0, 188, 189,
	0, 214, 0, 0, 199, 0, -2, 203, 204, 238,
	206, 207, 208, 1052, 211, 309, 309, 234, 1024, 0,
	0, 212, 213, 324, 166, 322, 0, 329, 329, 326,
	329, 329, 329, 285, 0, 286, 287, 288, 289, 0,
	307, 0, 267, 268, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 149, 150, 0, 133, 0, 0, 0,
	0, 0, 409, 0, 0, 1128, 0, 435, 436, 437,
	438, 439, 440, 441, 1128, 0, 422, 423, 424, 425,
	426, 427, 428, 429, 430, 431, 432, 0, 1128, 841,
	842, 843, 844, 0, 0, 449, 470, 0, 860, 486,
	487, 787, 0, 24, 593, 0, 526, 754, 0, 612,
	860, 636, 615, 0, 0, 0, 862, 0, 865, 681,
	522, 0, 309, 309, 724, 309, 313, 727, 728, 309,
	730, 309, 733, 0, 0, 0, 0, 0, 0, 0,
	753, 0, 745, 697, 751, 860, 31, 0, 798, 788,
	800, 802, 860, 27, 0, 794, 0, 781, 807, 594,
	808, 562, 0, 567, 0, 0, 0, 0, 570, 0,
	781, 37, 78, 79, 80, 814, 0, 405, 401, 0,
	371, 309, 309, 0, 0, 0, 0, 0, 0, 359,
	360, 362, 365, 389, 198, 177, 392, 179, 0, 860,
	0, 0, 215, 0, 0, 0, 202, 0, 205, 0,
	230, 0, 232, 0, 0, 0, 310, 276, 277, 329,
	278, 279, 280, 327, 328, 326, 0, 326, 0, 314,
	0, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	0, 131, 132, 0, 116, 0, 100, 0, 433, 434,
	0, 414, 0, 415, 417, 418, 419, 0, 394, 413,
	489, 490, 769, 533, 682, 616, 665, 317, 318, 864,
	686, 721, 326, 725, 726, 729, 731, 732, 734, 688,
	687, 689, 860, 860, 692, 860, 860, 860, 0, 0,
	749, 0, 32, 0, 803, -2, 0, 0, 0, 44,
	35, 0, 553, 554, 0, 543, 545, 546, 547, 548,
	549, 550, 0, 0, 0, 589, 557, 36, 399, 406,
	407, 408, 333, 0, 778, 375, 376, 374, 392, 383,
	384, 0, 0, 392, 393, 394, 389, 860, 366, 0,
	0, 0, 860, 195, 0, 200, 0, 210, 1003, 316,
	243, 244, 209, 231, 233, 235, 0, 282, 329, 308,
	329, 0, 0, 0, 0, 0, 0, 369, 370, 309,
	0, 151, 152, 0, 134, 135, 136, 137, 138, 0,
	0, 99, 102, 0, 0, 0, 0, 395, 771, 0,
	722, 723, 0, 0, 0, 0, 714, 696, 746, 0,
	801, 0, -2, 0, 796, 795, 0, 563, 542, 0,
	590, 591, 592, 541, 355, 334, 0, 336, 0, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	378, 0, 385, 386, 379, 0, 0, 395, 0, 0,
	860, 236, 190, 0, 216, 0, 0, 297, 298, 312,
	315, 0, 0, 0, 595, 1126, 0, 139, 396, 0,
	97, 117, 119, 120, 121, 122, 123, 124, 125, 126,
	773, 0, 0, 0, 0, 61, 860, 860, 0, -2,
	102, 102, -2, 102, 102, 0, 0, 0, 0, 0,
	26, 860, 860, 691, 690, 693, 694, 0, 0, 0,
	0, 791, 27, 0, 555, 544, 552, 332, 0, 337,
	0, 0, 0, 340, 0, 352, 342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 236, 0,
	186, 0, 0, 0, 0, 197, 201, 595, 0, 0,
	593, 0, 0, 141, 0, 860, 0, 118, 781, 49,
	-2, 51, 56, 57, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 101, 103, -2, 104, 105, 106,
	107, 108, 0, 0, 145, 0, 443, 0, 0, 772,
	770, 695, 0, 0, 0, 799, -2, 797, 356, 0,
	338, 343, 341, 344, 353, 354, 345, 346, 347, 348,
	349, 350, 392, 392, 0, 0, 388, 236, 237, 0,
	0, 193, 194, 196, 0, 0, 0, 0, 0, 0,
	227, 0, 593, 0, 0, 333, 0, 595, 95, 0,
	397, 140, 96, 128, 0, 785, 0, 0, 53, 55,
	59, 62, 63, 64, 65, 66, 0, 0, 0, 410,
	854, 148, 442, 0, 0, 0, 715, 0, 718, 0,
	335, 0, 380, 381, 0, 333, 187, 191, 192, 0,
	218, 0, 220, 221, 222, 223, 224, 225, 226, 0,
	333, 593, 333, 355, 0, 593, 860, 0, 127, 52,
	172, 0, 0, 0, 68, 0, 0, 857, 855, 0,
	416, 444, 0, 0, 716, 0, 339, 0, 355, 217,
	219, 228, 0, 355, 333, 88, 86, 596, 333, 142,
	0, 0, 60, 67, 69, 0, 71, 412, 0, 856,
	0, 411, 0, 357, 0, 387, 0, 85, 89, 355,
	129, -2, 0, 0, 858, 859, 0, 0, 0, 229,
	87, 70, 0, 860, 717, 0, 0, 0, 0, 382,
	72, 445, 446,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 108, 100, 3,
	56, 58, 105, 103, 57, 104, 117, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 349,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 350, 3, 351, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:387
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:392
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:397
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:420
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:432
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:438
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:445
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:451
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:455
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:461
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:465
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:472
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:484
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:500
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:506
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:512
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:516
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:520
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:525
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:530
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:534
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:539
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:543
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:549
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:557
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:561
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:571
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:584
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:588
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:594
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:599
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:603
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:609
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:616
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:623
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:630
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:638
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:648
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:660
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:664
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:670
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:677
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:687
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:691
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:698
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:707
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:715
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:726
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:730
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:736
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:740
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:744
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:750
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:754
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:758
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:762
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:768
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:772
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:778
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:783
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:803
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:      NewColIdent(""),
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[10].columns,
					Where:     NewWhere(WhereStr, yyDollar[11].expr),
					Options:   yyDollar[12].indexOptions,
					Partition: yyDollar[13].indexPartition,
				},
				IndexCols: yyDollar[8].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[8].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-15 : yypt+1]
//line parser.y:823
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[6].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[12].columns,
					Where:     NewWhere(WhereStr, yyDollar[13].expr),
					Options:   yyDollar[14].indexOptions,
					Partition: yyDollar[15].indexPartition,
				},
				IndexCols: yyDollar[10].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[10].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:844
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 89:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:860
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:876
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:884
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateMatViewStr,
				Name:       yyDollar[5].tableName.ToViewName(),
				Definition: yyDollar[7].selStmt,
			}}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:892
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:900
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:904
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:908
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:920
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 97:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:931
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:942
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:953
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName, TableSpec: &TableSpec{}}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:958
		{
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:959
		{
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:963
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:964
		{
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:965
		{
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:967
		{
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:968
		{
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:969
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:973
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:977
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:981
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:987
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:995
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1001
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1005
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1011
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1021
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1032
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1044
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1051
		{
			yyVAL.bytes = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1055
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1059
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1064
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1068
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1072
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1076
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1080
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1084
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1089
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1093
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1098
		{
			yyVAL.expr = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1102
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1107
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1111
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1116
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1120
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1126
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1131
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1136
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1142
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1147
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1153
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1158
		{
			yyVAL.bytes = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1162
		{
			yyVAL.bytes = nil
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1168
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1175
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOptions
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1181
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1185
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1190
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1194
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1198
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1202
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1206
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1212
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1217
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1223
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1234
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1239
		{
			yyVAL.columnType = ColumnType{Type: ""}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1245
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.Srid = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1258
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1263
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1268
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1273
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1279
		{
			yyDollar[1].columnType.Srid = &SridDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1284
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1289
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1294
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1299
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1304
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1309
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1314
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1319
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1328
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1338
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1348
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1355
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1362
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1370
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1375
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1381
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1387
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1393
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1399
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1406
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1410
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1414
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1420
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1424
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1428
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1432
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1436
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1440
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1444
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1448
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1452
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1456
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1462
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1468
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1474
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1478
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1483
		{
			yyVAL.sequence = &Sequence{}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1487
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1492
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1497
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1502
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1507
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1512
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1517
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1522
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1527
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1532
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1537
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1542
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1547
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1554
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1558
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1562
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1566
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1570
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1579
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1583
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1588
		{
			yyVAL.bytes = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1601
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1606
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1873
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1878
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1883
		{
			yyVAL.optVal = nil
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1887
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1892
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1896
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1904
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1908
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1922
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1926
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1930
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1935
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1939
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1944
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1948
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1953
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1957
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1961
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1966
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1970
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1974
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1979
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1983
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1987
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1993
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1998
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2002
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2006
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2012
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2016
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2022
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2026
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2032
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2036
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2041
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2045
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2049
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2053
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2057
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2061
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2065
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2069
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2073
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2079
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2083
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2089
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2093
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2099
		{
			yyVAL.indexPartition = nil
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2103
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2107
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2113
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2117
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2121
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2125
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(""), Unique: true}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2151
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2161
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2166
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2172
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2176
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2182
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2187
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2191
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2201
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2206
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2213
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2220
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 381:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2227
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 382:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2236
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2248
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2252
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2256
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2260
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 387:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2266
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2277
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2287
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2291
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2295
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2301
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2305
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2310
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2317
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2321
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2328
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2332
		{
			yyVAL.tableOptions = yyDollar[1].tableOptions
			yyVAL.tableOptions[string(yyDollar[2].str)] = string(yyDollar[4].str)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2338
		{
			yyVAL.tableOptions = map[string]string{}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2342
		{
			yyVAL.tableOptions = yyDollar[3].tableOptions
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2347
		{
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2348
		{
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2352
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2356
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].colIdent.String()
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2362
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2366
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2370
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2376
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 410:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2380
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 411:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2394
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 412:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2408
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2427
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2436
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2440
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 416:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2444
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 417:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2457
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 418:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2467
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 419:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2472
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2477
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2481
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2513
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2519
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2523
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2529
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 446:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2533
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2539
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2545
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2553
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2558
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2566
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2570
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2576
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2580
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2585
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2591
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2599
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2640
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2648
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2658
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2662
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2670
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2678
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2692
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2698
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2702
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2708
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2712
		{
			yyVAL.str = "extended "
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2718
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2722
		{
			yyVAL.str = "full "
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2728
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2732
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2736
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2742
		{
			yyVAL.showFilter = nil
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2746
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2756
		{
			yyVAL.str = ""
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2760
		{
			yyVAL.str = SessionStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2764
		{
			yyVAL.str = GlobalStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2770
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2774
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2780
		{
			yyVAL.statement = &Begin{}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2784
		{
			yyVAL.statement = &Begin{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2790
		{
			yyVAL.statement = &Commit{}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2796
		{
			yyVAL.statement = &Rollback{}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2802
		{
			yyVAL.statement = &OtherRead{}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2806
		{
			yyVAL.statement = &OtherRead{}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2810
		{
			yyVAL.statement = &OtherRead{}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2814
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2818
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2823
		{
			setAllowComments(yylex, true)
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2827
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2833
		{
			yyVAL.bytes2 = nil
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2837
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2843
		{
			yyVAL.str = UnionStr
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2847
		{
			yyVAL.str = UnionAllStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2851
		{
			yyVAL.str = UnionDistinctStr
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2856
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2860
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2864
		{
			yyVAL.str = SQLCacheStr
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2869
		{
			yyVAL.str = ""
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2873
		{
			yyVAL.str = DistinctStr
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2878
		{
			yyVAL.str = ""
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2882
		{
			yyVAL.str = StraightJoinHint
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2887
		{
			yyVAL.selectExprs = nil
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2891
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2897
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2901
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2907
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2911
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2915
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2919
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2924
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2928
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2932
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2939
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2944
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2948
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2958
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2968
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2972
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2976
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2981
		{
			yyVAL.strs = []string{}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2985
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2991
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2995
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3001
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3005
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3009
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3013
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3027
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 552:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3031
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3037
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3042
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3046
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3052
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3056
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3069
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3073
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3077
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3081
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3087
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3089
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3093
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3095
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3099
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3101
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3104
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3106
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3109
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3113
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3117
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3124
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3130
		{
			yyVAL.str = JoinStr
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3134
		{
			yyVAL.str = JoinStr
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3138
		{
			yyVAL.str = JoinStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3144
		{
			yyVAL.str = StraightJoinStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3150
		{
			yyVAL.str = LeftJoinStr
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3154
		{
			yyVAL.str = LeftJoinStr
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3158
		{
			yyVAL.str = RightJoinStr
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3162
		{
			yyVAL.str = RightJoinStr
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3168
		{
			yyVAL.str = NaturalJoinStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3172
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3182
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3186
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3192
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3196
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3201
		{
			yyVAL.indexHints = nil
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3205
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3209
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3213
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3218
		{
			yyVAL.expr = nil
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3222
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3227
		{
			yyVAL.columns = nil
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3231
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3237
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3241
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3245
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3249
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3253
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3257
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3261
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3267
		{
			yyVAL.str = ""
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3271
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3277
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3281
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3287
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3291
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3295
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3299
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3303
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3307
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3311
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3315
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3319
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3323
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3329
		{
			yyVAL.str = IsNullStr
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3333
		{
			yyVAL.str = IsNotNullStr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3337
		{
			yyVAL.str = IsTrueStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3341
		{
			yyVAL.str = IsNotTrueStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3345
		{
			yyVAL.str = IsFalseStr
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3349
		{
			yyVAL.str = IsNotFalseStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3355
		{
			yyVAL.str = EqualStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3359
		{
			yyVAL.str = LessThanStr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3363
		{
			yyVAL.str = GreaterThanStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3367
		{
			yyVAL.str = LessEqualStr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3371
		{
			yyVAL.str = GreaterEqualStr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3375
		{
			yyVAL.str = NotEqualStr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3379
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3383
		{
			yyVAL.str = PosixRegexStr
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3387
		{
			yyVAL.str = PosixRegexCiStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3391
		{
			yyVAL.str = PosixNotRegexStr
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3395
		{
			yyVAL.str = PosixNotRegexCiStr
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3400
		{
			yyVAL.expr = nil
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3410
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3414
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3418
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3424
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3430
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3434
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3440
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3444
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3452
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3456
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3460
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3464
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3468
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3472
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3476
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3480
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3484
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3488
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3492
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3496
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3500
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3504
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3508
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3512
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3516
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3520
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3524
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3532
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3536
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3540
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3548
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3562
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3566
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3570
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3578
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3586
		{
			yyVAL.expr = &CastExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3594
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3604
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3608
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 682:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3612
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3616
		{
			yyVAL.expr = &FuncCallExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].exprs}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3630
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 686:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3634
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 687:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3638
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3642
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3646
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 690:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3650
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].expr, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 691:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3654
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 692:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3658
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 693:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3662
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 694:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3666
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 695:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3670
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 696:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3674
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 697:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3678
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3682
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3714
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3719
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3728
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3742
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3746
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3760
		{
			yyVAL.str = ""
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3764
		{
			yyVAL.str = BooleanModeStr
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3768
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 717:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3772
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3776
		{
			yyVAL.str = QueryExpansionStr
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3782
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3786
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3792
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3800
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3804
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3808
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3812
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3818
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3822
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3826
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3830
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3834
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3842
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3868
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3872
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3876
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3880
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3885
		{
			yyVAL.expr = nil
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3889
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3894
		{
			yyVAL.str = string("")
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3898
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3904
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3908
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3914
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3919
		{
			yyVAL.expr = nil
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3923
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3929
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3933
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3937
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3943
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3949
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3953
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3958
		{
			// Ignoring _charset_name as a workaround
			yyVAL.expr = NewStrVal(yyDollar[2].bytes)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3963
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3967
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3971
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3975
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3979
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3983
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3987
		{
			yyVAL.expr = &NullVal{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3993
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4002
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4006
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4011
		{
			yyVAL.exprs = nil
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4015
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4020
		{
			yyVAL.expr = nil
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4024
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4029
		{
			yyVAL.orderBy = nil
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4033
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4039
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4043
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4049
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4054
		{
			yyVAL.str = AscScr
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4058
		{
			yyVAL.str = AscScr
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4062
		{
			yyVAL.str = DescScr
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4067
		{
			yyVAL.limit = nil
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4071
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4075
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4079
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4084
		{
			yyVAL.str = ""
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4088
		{
			yyVAL.str = ForUpdateStr
		}
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4092
		{
			yyVAL.str = ShareModeStr
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4105
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4109
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4113
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4118
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4122
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 793:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:4126
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4133
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4137
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4141
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4145
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4150
		{
			yyVAL.updateExprs = nil
		}
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4154
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4160
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4164
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4170
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4174
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4180
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4186
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4196
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4200
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4206
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4212
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4216
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4222
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4226
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4230
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 814:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4235
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4239
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4246
		{
			yyVAL.bytes = []byte("charset")
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4253
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4257
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4261
		{
			yyVAL.expr = &Default{}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4270
		{
			yyVAL.byt = 0
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4272
		{
			yyVAL.byt = 1
		}
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4275
		{
			yyVAL.empty = struct{}{}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4277
		{
			yyVAL.empty = struct{}{}
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4280
		{
			yyVAL.str = ""
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4282
		{
			yyVAL.str = IgnoreStr
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4286
		{
			yyVAL.empty = struct{}{}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4288
		{
			yyVAL.empty = struct{}{}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4290
		{
			yyVAL.empty = struct{}{}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4292
		{
			yyVAL.empty = struct{}{}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4294
		{
			yyVAL.empty = struct{}{}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4296
		{
			yyVAL.empty = struct{}{}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4298
		{
			yyVAL.empty = struct{}{}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4300
		{
			yyVAL.empty = struct{}{}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4302
		{
			yyVAL.empty = struct{}{}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4304
		{
			yyVAL.empty = struct{}{}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4307
		{
			yyVAL.empty = struct{}{}
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4309
		{
			yyVAL.empty = struct{}{}
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4311
		{
			yyVAL.empty = struct{}{}
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4315
		{
			yyVAL.empty = struct{}{}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4317
		{
			yyVAL.empty = struct{}{}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4321
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4325
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4332
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4338
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4342
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4347
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4354
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4360
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4364
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4368
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4374
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4378
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4382
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4388
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4392
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4399
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4406
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4410
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4417
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4703
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4712
		{
			decNesting(yylex)
		}
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4717
		{
			forceEOF(yylex)
		}
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4722
		{
			forceEOF(yylex)
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4726
		{
			forceEOF(yylex)
		}
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4730
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
